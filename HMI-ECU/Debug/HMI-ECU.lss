
HMI-ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002dd0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000009a  00800060  00002dd0  00002e64  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  008000fa  008000fa  00002efe  2**0
                  ALLOC
  3 .stab         00002c04  00000000  00000000  00002f00  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011f9  00000000  00000000  00005b04  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006cfd  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006e3d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006fad  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008bf6  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009ae1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a890  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a9f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000ac7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b44b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 64 14 	jmp	0x28c8	; 0x28c8 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 97 14 	jmp	0x292e	; 0x292e <__vector_19>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d4 e0       	ldi	r29, 0x04	; 4
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ed       	ldi	r30, 0xD0	; 208
      68:	fd e2       	ldi	r31, 0x2D	; 45
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3f       	cpi	r26, 0xFA	; 250
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa ef       	ldi	r26, 0xFA	; 250
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	af 30       	cpi	r26, 0x0F	; 15
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 e6 16 	jmp	0x2dcc	; 0x2dcc <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 6a 16 	jmp	0x2cd4	; 0x2cd4 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	aa ee       	ldi	r26, 0xEA	; 234
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 86 16 	jmp	0x2d0c	; 0x2d0c <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 76 16 	jmp	0x2cec	; 0x2cec <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 92 16 	jmp	0x2d24	; 0x2d24 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 76 16 	jmp	0x2cec	; 0x2cec <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 92 16 	jmp	0x2d24	; 0x2d24 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 6a 16 	jmp	0x2cd4	; 0x2cd4 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__stack+0x3f>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__stack+0x55>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__stack+0x2d>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__stack+0x3f>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__stack+0x35>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__stack+0x3b>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__stack+0x55>
     494:	8a ee       	ldi	r24, 0xEA	; 234
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__stack+0x1c7>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__stack+0x51>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__stack+0x1c7>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__stack+0x67>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__stack+0x1c7>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__stack+0xd3>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__stack+0xc7>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__stack+0xef>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__stack+0x109>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__stack+0x8f>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__stack+0x14d>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__stack+0x141>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__stack+0x11f>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__stack+0x16b>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__stack+0x153>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__stack+0x1ad>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__stack+0x1ad>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__stack+0x1ad>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__stack+0x1b7>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 86 16 	jmp	0x2d0c	; 0x2d0c <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 76 16 	jmp	0x2cec	; 0x2cec <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 92 16 	jmp	0x2d24	; 0x2d24 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 76 16 	jmp	0x2cec	; 0x2cec <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 92 16 	jmp	0x2d24	; 0x2d24 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 76 16 	jmp	0x2cec	; 0x2cec <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 92 16 	jmp	0x2d24	; 0x2d24 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 7a 16 	jmp	0x2cf4	; 0x2cf4 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 96 16 	jmp	0x2d2c	; 0x2d2c <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__pack_f+0x178>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__pack_f+0x172>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__pack_f+0x17c>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__pack_f+0x114>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__pack_f+0x76>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__pack_f+0xca>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__pack_f+0x86>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__pack_f+0x7e>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__pack_f+0x9c>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__pack_f+0x94>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__pack_f+0xbe>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__pack_f+0xee>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__pack_f+0xf6>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__pack_f+0xf6>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__pack_f+0x10e>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__pack_f+0x162>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__pack_f+0x172>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__pack_f+0x144>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__pack_f+0x154>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__pack_f+0x14c>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__pack_f+0x162>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__pack_f+0x164>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__pack_f+0x17c>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:



void motor_ACW_15sec(void);

int main(void){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	2c 97       	sbiw	r28, 0x0c	; 12
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61

	/*Configuration of UART and initialization*/
	Usart_ConfigType USART_Config = {NO_PARITY, ONE_BIT, BIT_8, 9600};
     b5a:	ce 01       	movw	r24, r28
     b5c:	01 96       	adiw	r24, 0x01	; 1
     b5e:	99 87       	std	Y+9, r25	; 0x09
     b60:	88 87       	std	Y+8, r24	; 0x08
     b62:	e2 ef       	ldi	r30, 0xF2	; 242
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	fb 87       	std	Y+11, r31	; 0x0b
     b68:	ea 87       	std	Y+10, r30	; 0x0a
     b6a:	f7 e0       	ldi	r31, 0x07	; 7
     b6c:	fc 87       	std	Y+12, r31	; 0x0c
     b6e:	ea 85       	ldd	r30, Y+10	; 0x0a
     b70:	fb 85       	ldd	r31, Y+11	; 0x0b
     b72:	00 80       	ld	r0, Z
     b74:	8a 85       	ldd	r24, Y+10	; 0x0a
     b76:	9b 85       	ldd	r25, Y+11	; 0x0b
     b78:	01 96       	adiw	r24, 0x01	; 1
     b7a:	9b 87       	std	Y+11, r25	; 0x0b
     b7c:	8a 87       	std	Y+10, r24	; 0x0a
     b7e:	e8 85       	ldd	r30, Y+8	; 0x08
     b80:	f9 85       	ldd	r31, Y+9	; 0x09
     b82:	00 82       	st	Z, r0
     b84:	88 85       	ldd	r24, Y+8	; 0x08
     b86:	99 85       	ldd	r25, Y+9	; 0x09
     b88:	01 96       	adiw	r24, 0x01	; 1
     b8a:	99 87       	std	Y+9, r25	; 0x09
     b8c:	88 87       	std	Y+8, r24	; 0x08
     b8e:	9c 85       	ldd	r25, Y+12	; 0x0c
     b90:	91 50       	subi	r25, 0x01	; 1
     b92:	9c 87       	std	Y+12, r25	; 0x0c
     b94:	ec 85       	ldd	r30, Y+12	; 0x0c
     b96:	ee 23       	and	r30, r30
     b98:	51 f7       	brne	.-44     	; 0xb6e <main+0x28>
	UART_init(&USART_Config);
     b9a:	ce 01       	movw	r24, r28
     b9c:	01 96       	adiw	r24, 0x01	; 1
     b9e:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <UART_init>

	/* Wait until MC2 is ready to receive the string */
	//while(UART_recieveByte() != MC2_READY){}

	LCD_init();
     ba2:	0e 94 a8 0f 	call	0x1f50	; 0x1f50 <LCD_init>

	//GPIO_setupPinDirection(PORTC_ID, PIN5_ID, PIN_OUTPUT);

	while(1){
		enter_password_first_time();
     ba6:	0e 94 af 06 	call	0xd5e	; 0xd5e <enter_password_first_time>
		check_password();
     baa:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <check_password>
     bae:	fb cf       	rjmp	.-10     	; 0xba6 <main+0x60>

00000bb0 <check_password>:
 * Description:
 * take the first entered password and check it with the second attempt, if both are matched
 * then send the password to MC2 and display operation list. In the mismatch case, go back to
 * display "Enter a password"
 */
void check_password(void){
     bb0:	df 93       	push	r29
     bb2:	cf 93       	push	r28
     bb4:	cd b7       	in	r28, 0x3d	; 61
     bb6:	de b7       	in	r29, 0x3e	; 62
     bb8:	60 97       	sbiw	r28, 0x10	; 16
     bba:	0f b6       	in	r0, 0x3f	; 63
     bbc:	f8 94       	cli
     bbe:	de bf       	out	0x3e, r29	; 62
     bc0:	0f be       	out	0x3f, r0	; 63
     bc2:	cd bf       	out	0x3d, r28	; 61
	uint8 i=0;
     bc4:	18 8a       	std	Y+16, r1	; 0x10
	uint8 unmatched = 0;
     bc6:	1f 86       	std	Y+15, r1	; 0x0f
	UART_sendByte(CHANGE_PASS);
     bc8:	80 e9       	ldi	r24, 0x90	; 144
     bca:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <UART_sendByte>
	for(i=0; i<PASSWORD_SIZE; i++){
     bce:	18 8a       	std	Y+16, r1	; 0x10
     bd0:	16 c0       	rjmp	.+44     	; 0xbfe <check_password+0x4e>
		if(g_firstPassword[i] == g_secondPassword[i]){
     bd2:	88 89       	ldd	r24, Y+16	; 0x10
     bd4:	88 2f       	mov	r24, r24
     bd6:	90 e0       	ldi	r25, 0x00	; 0
     bd8:	fc 01       	movw	r30, r24
     bda:	eb 5f       	subi	r30, 0xFB	; 251
     bdc:	fe 4f       	sbci	r31, 0xFE	; 254
     bde:	20 81       	ld	r18, Z
     be0:	88 89       	ldd	r24, Y+16	; 0x10
     be2:	88 2f       	mov	r24, r24
     be4:	90 e0       	ldi	r25, 0x00	; 0
     be6:	fc 01       	movw	r30, r24
     be8:	e0 50       	subi	r30, 0x00	; 0
     bea:	ff 4f       	sbci	r31, 0xFF	; 255
     bec:	80 81       	ld	r24, Z
     bee:	28 17       	cp	r18, r24
     bf0:	19 f0       	breq	.+6      	; 0xbf8 <check_password+0x48>

		}
		else{
			unmatched++;
     bf2:	8f 85       	ldd	r24, Y+15	; 0x0f
     bf4:	8f 5f       	subi	r24, 0xFF	; 255
     bf6:	8f 87       	std	Y+15, r24	; 0x0f
 */
void check_password(void){
	uint8 i=0;
	uint8 unmatched = 0;
	UART_sendByte(CHANGE_PASS);
	for(i=0; i<PASSWORD_SIZE; i++){
     bf8:	88 89       	ldd	r24, Y+16	; 0x10
     bfa:	8f 5f       	subi	r24, 0xFF	; 255
     bfc:	88 8b       	std	Y+16, r24	; 0x10
     bfe:	88 89       	ldd	r24, Y+16	; 0x10
     c00:	85 30       	cpi	r24, 0x05	; 5
     c02:	38 f3       	brcs	.-50     	; 0xbd2 <check_password+0x22>
		else{
			unmatched++;
		}
	}
	//while(UART_recieveByte() != MC2_READY){}
	if(unmatched == 0){
     c04:	8f 85       	ldd	r24, Y+15	; 0x0f
     c06:	88 23       	and	r24, r24
     c08:	09 f0       	breq	.+2      	; 0xc0c <check_password+0x5c>
     c0a:	99 c0       	rjmp	.+306    	; 0xd3e <check_password+0x18e>

		/*UART_sendByte(MC1_READY);
		while(UART_recieveByte() != MC2_READY){}*/
		LCD_clearScreen();
     c0c:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <LCD_clearScreen>
		LCD_displayString("Matched!");
     c10:	80 e6       	ldi	r24, 0x60	; 96
     c12:	90 e0       	ldi	r25, 0x00	; 0
     c14:	0e 94 b3 13 	call	0x2766	; 0x2766 <LCD_displayString>

		UART_sendByte(MC1_READY);
     c18:	80 e3       	ldi	r24, 0x30	; 48
     c1a:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <UART_sendByte>
		while(UART_recieveByte() != MC2_READY){}
     c1e:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <UART_recieveByte>
     c22:	80 31       	cpi	r24, 0x10	; 16
     c24:	e1 f7       	brne	.-8      	; 0xc1e <check_password+0x6e>
		for(i=0; i<PASSWORD_SIZE; i++){
     c26:	18 8a       	std	Y+16, r1	; 0x10
     c28:	7e c0       	rjmp	.+252    	; 0xd26 <check_password+0x176>

			UART_sendByte(g_firstPassword[i]);/* Send each number of the password alone to MC2 */
     c2a:	88 89       	ldd	r24, Y+16	; 0x10
     c2c:	88 2f       	mov	r24, r24
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	fc 01       	movw	r30, r24
     c32:	eb 5f       	subi	r30, 0xFB	; 251
     c34:	fe 4f       	sbci	r31, 0xFE	; 254
     c36:	80 81       	ld	r24, Z
     c38:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <UART_sendByte>
     c3c:	80 e0       	ldi	r24, 0x00	; 0
     c3e:	90 e8       	ldi	r25, 0x80	; 128
     c40:	ab e3       	ldi	r26, 0x3B	; 59
     c42:	b5 e4       	ldi	r27, 0x45	; 69
     c44:	8b 87       	std	Y+11, r24	; 0x0b
     c46:	9c 87       	std	Y+12, r25	; 0x0c
     c48:	ad 87       	std	Y+13, r26	; 0x0d
     c4a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c4c:	6b 85       	ldd	r22, Y+11	; 0x0b
     c4e:	7c 85       	ldd	r23, Y+12	; 0x0c
     c50:	8d 85       	ldd	r24, Y+13	; 0x0d
     c52:	9e 85       	ldd	r25, Y+14	; 0x0e
     c54:	20 e0       	ldi	r18, 0x00	; 0
     c56:	30 e0       	ldi	r19, 0x00	; 0
     c58:	4a e7       	ldi	r20, 0x7A	; 122
     c5a:	53 e4       	ldi	r21, 0x43	; 67
     c5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c60:	dc 01       	movw	r26, r24
     c62:	cb 01       	movw	r24, r22
     c64:	8f 83       	std	Y+7, r24	; 0x07
     c66:	98 87       	std	Y+8, r25	; 0x08
     c68:	a9 87       	std	Y+9, r26	; 0x09
     c6a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     c6c:	6f 81       	ldd	r22, Y+7	; 0x07
     c6e:	78 85       	ldd	r23, Y+8	; 0x08
     c70:	89 85       	ldd	r24, Y+9	; 0x09
     c72:	9a 85       	ldd	r25, Y+10	; 0x0a
     c74:	20 e0       	ldi	r18, 0x00	; 0
     c76:	30 e0       	ldi	r19, 0x00	; 0
     c78:	40 e8       	ldi	r20, 0x80	; 128
     c7a:	5f e3       	ldi	r21, 0x3F	; 63
     c7c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c80:	88 23       	and	r24, r24
     c82:	2c f4       	brge	.+10     	; 0xc8e <check_password+0xde>
		__ticks = 1;
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	9e 83       	std	Y+6, r25	; 0x06
     c8a:	8d 83       	std	Y+5, r24	; 0x05
     c8c:	3f c0       	rjmp	.+126    	; 0xd0c <check_password+0x15c>
	else if (__tmp > 65535)
     c8e:	6f 81       	ldd	r22, Y+7	; 0x07
     c90:	78 85       	ldd	r23, Y+8	; 0x08
     c92:	89 85       	ldd	r24, Y+9	; 0x09
     c94:	9a 85       	ldd	r25, Y+10	; 0x0a
     c96:	20 e0       	ldi	r18, 0x00	; 0
     c98:	3f ef       	ldi	r19, 0xFF	; 255
     c9a:	4f e7       	ldi	r20, 0x7F	; 127
     c9c:	57 e4       	ldi	r21, 0x47	; 71
     c9e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ca2:	18 16       	cp	r1, r24
     ca4:	4c f5       	brge	.+82     	; 0xcf8 <check_password+0x148>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ca6:	6b 85       	ldd	r22, Y+11	; 0x0b
     ca8:	7c 85       	ldd	r23, Y+12	; 0x0c
     caa:	8d 85       	ldd	r24, Y+13	; 0x0d
     cac:	9e 85       	ldd	r25, Y+14	; 0x0e
     cae:	20 e0       	ldi	r18, 0x00	; 0
     cb0:	30 e0       	ldi	r19, 0x00	; 0
     cb2:	40 e2       	ldi	r20, 0x20	; 32
     cb4:	51 e4       	ldi	r21, 0x41	; 65
     cb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cba:	dc 01       	movw	r26, r24
     cbc:	cb 01       	movw	r24, r22
     cbe:	bc 01       	movw	r22, r24
     cc0:	cd 01       	movw	r24, r26
     cc2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cc6:	dc 01       	movw	r26, r24
     cc8:	cb 01       	movw	r24, r22
     cca:	9e 83       	std	Y+6, r25	; 0x06
     ccc:	8d 83       	std	Y+5, r24	; 0x05
     cce:	0f c0       	rjmp	.+30     	; 0xcee <check_password+0x13e>
     cd0:	89 e1       	ldi	r24, 0x19	; 25
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	9c 83       	std	Y+4, r25	; 0x04
     cd6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cd8:	8b 81       	ldd	r24, Y+3	; 0x03
     cda:	9c 81       	ldd	r25, Y+4	; 0x04
     cdc:	01 97       	sbiw	r24, 0x01	; 1
     cde:	f1 f7       	brne	.-4      	; 0xcdc <check_password+0x12c>
     ce0:	9c 83       	std	Y+4, r25	; 0x04
     ce2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     ce4:	8d 81       	ldd	r24, Y+5	; 0x05
     ce6:	9e 81       	ldd	r25, Y+6	; 0x06
     ce8:	01 97       	sbiw	r24, 0x01	; 1
     cea:	9e 83       	std	Y+6, r25	; 0x06
     cec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cee:	8d 81       	ldd	r24, Y+5	; 0x05
     cf0:	9e 81       	ldd	r25, Y+6	; 0x06
     cf2:	00 97       	sbiw	r24, 0x00	; 0
     cf4:	69 f7       	brne	.-38     	; 0xcd0 <check_password+0x120>
     cf6:	14 c0       	rjmp	.+40     	; 0xd20 <check_password+0x170>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     cf8:	6f 81       	ldd	r22, Y+7	; 0x07
     cfa:	78 85       	ldd	r23, Y+8	; 0x08
     cfc:	89 85       	ldd	r24, Y+9	; 0x09
     cfe:	9a 85       	ldd	r25, Y+10	; 0x0a
     d00:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d04:	dc 01       	movw	r26, r24
     d06:	cb 01       	movw	r24, r22
     d08:	9e 83       	std	Y+6, r25	; 0x06
     d0a:	8d 83       	std	Y+5, r24	; 0x05
     d0c:	8d 81       	ldd	r24, Y+5	; 0x05
     d0e:	9e 81       	ldd	r25, Y+6	; 0x06
     d10:	9a 83       	std	Y+2, r25	; 0x02
     d12:	89 83       	std	Y+1, r24	; 0x01
     d14:	89 81       	ldd	r24, Y+1	; 0x01
     d16:	9a 81       	ldd	r25, Y+2	; 0x02
     d18:	01 97       	sbiw	r24, 0x01	; 1
     d1a:	f1 f7       	brne	.-4      	; 0xd18 <check_password+0x168>
     d1c:	9a 83       	std	Y+2, r25	; 0x02
     d1e:	89 83       	std	Y+1, r24	; 0x01
		LCD_clearScreen();
		LCD_displayString("Matched!");

		UART_sendByte(MC1_READY);
		while(UART_recieveByte() != MC2_READY){}
		for(i=0; i<PASSWORD_SIZE; i++){
     d20:	88 89       	ldd	r24, Y+16	; 0x10
     d22:	8f 5f       	subi	r24, 0xFF	; 255
     d24:	88 8b       	std	Y+16, r24	; 0x10
     d26:	88 89       	ldd	r24, Y+16	; 0x10
     d28:	85 30       	cpi	r24, 0x05	; 5
     d2a:	08 f4       	brcc	.+2      	; 0xd2e <check_password+0x17e>
     d2c:	7e cf       	rjmp	.-260    	; 0xc2a <check_password+0x7a>

			UART_sendByte(g_firstPassword[i]);/* Send each number of the password alone to MC2 */
			_delay_ms(3000);
		}
		LCD_clearScreen();
     d2e:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <LCD_clearScreen>
		unmatched = 0;
     d32:	1f 86       	std	Y+15, r1	; 0x0f
		display_main_options();
     d34:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <display_main_options>
		checking_password_after_operation();
     d38:	0e 94 0d 09 	call	0x121a	; 0x121a <checking_password_after_operation>
     d3c:	07 c0       	rjmp	.+14     	; 0xd4c <check_password+0x19c>

	}
	else{
		LCD_clearScreen();
     d3e:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <LCD_clearScreen>
		unmatched = 0;
     d42:	1f 86       	std	Y+15, r1	; 0x0f
		enter_password_first_time();
     d44:	0e 94 af 06 	call	0xd5e	; 0xd5e <enter_password_first_time>
		check_password();
     d48:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <check_password>
	}

}
     d4c:	60 96       	adiw	r28, 0x10	; 16
     d4e:	0f b6       	in	r0, 0x3f	; 63
     d50:	f8 94       	cli
     d52:	de bf       	out	0x3e, r29	; 62
     d54:	0f be       	out	0x3f, r0	; 63
     d56:	cd bf       	out	0x3d, r28	; 61
     d58:	cf 91       	pop	r28
     d5a:	df 91       	pop	r29
     d5c:	08 95       	ret

00000d5e <enter_password_first_time>:
/*
 * Description:
 * Ask the user who use the system for the first time to enter a password of 5 numbers
 * and then re-enter that password and display the password on the screen in the '*' form
 */
void enter_password_first_time(void){
     d5e:	df 93       	push	r29
     d60:	cf 93       	push	r28
     d62:	cd b7       	in	r28, 0x3d	; 61
     d64:	de b7       	in	r29, 0x3e	; 62
     d66:	6e 97       	sbiw	r28, 0x1e	; 30
     d68:	0f b6       	in	r0, 0x3f	; 63
     d6a:	f8 94       	cli
     d6c:	de bf       	out	0x3e, r29	; 62
     d6e:	0f be       	out	0x3f, r0	; 63
     d70:	cd bf       	out	0x3d, r28	; 61
	uint8 i=0;
     d72:	1e 8e       	std	Y+30, r1	; 0x1e
	uint8 key;
	LCD_clearScreen();
     d74:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <LCD_clearScreen>
	LCD_displayString("Enter Password");
     d78:	89 e6       	ldi	r24, 0x69	; 105
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	0e 94 b3 13 	call	0x2766	; 0x2766 <LCD_displayString>
	LCD_moveCursor(1,0);
     d80:	81 e0       	ldi	r24, 0x01	; 1
     d82:	60 e0       	ldi	r22, 0x00	; 0
     d84:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <LCD_moveCursor>

	for(i=0; i<PASSWORD_SIZE; i++){
     d88:	1e 8e       	std	Y+30, r1	; 0x1e
     d8a:	86 c0       	rjmp	.+268    	; 0xe98 <enter_password_first_time+0x13a>

		key = KEYPAD_getPressedKey();/* read the pressed key on the keypad*/
     d8c:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <KEYPAD_getPressedKey>
     d90:	8d 8f       	std	Y+29, r24	; 0x1d
     d92:	80 e0       	ldi	r24, 0x00	; 0
     d94:	90 e0       	ldi	r25, 0x00	; 0
     d96:	aa ef       	ldi	r26, 0xFA	; 250
     d98:	b4 e4       	ldi	r27, 0x44	; 68
     d9a:	89 8f       	std	Y+25, r24	; 0x19
     d9c:	9a 8f       	std	Y+26, r25	; 0x1a
     d9e:	ab 8f       	std	Y+27, r26	; 0x1b
     da0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     da2:	69 8d       	ldd	r22, Y+25	; 0x19
     da4:	7a 8d       	ldd	r23, Y+26	; 0x1a
     da6:	8b 8d       	ldd	r24, Y+27	; 0x1b
     da8:	9c 8d       	ldd	r25, Y+28	; 0x1c
     daa:	20 e0       	ldi	r18, 0x00	; 0
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	4a e7       	ldi	r20, 0x7A	; 122
     db0:	53 e4       	ldi	r21, 0x43	; 67
     db2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     db6:	dc 01       	movw	r26, r24
     db8:	cb 01       	movw	r24, r22
     dba:	8d 8b       	std	Y+21, r24	; 0x15
     dbc:	9e 8b       	std	Y+22, r25	; 0x16
     dbe:	af 8b       	std	Y+23, r26	; 0x17
     dc0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
     dc2:	6d 89       	ldd	r22, Y+21	; 0x15
     dc4:	7e 89       	ldd	r23, Y+22	; 0x16
     dc6:	8f 89       	ldd	r24, Y+23	; 0x17
     dc8:	98 8d       	ldd	r25, Y+24	; 0x18
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	40 e8       	ldi	r20, 0x80	; 128
     dd0:	5f e3       	ldi	r21, 0x3F	; 63
     dd2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dd6:	88 23       	and	r24, r24
     dd8:	2c f4       	brge	.+10     	; 0xde4 <enter_password_first_time+0x86>
		__ticks = 1;
     dda:	81 e0       	ldi	r24, 0x01	; 1
     ddc:	90 e0       	ldi	r25, 0x00	; 0
     dde:	9c 8b       	std	Y+20, r25	; 0x14
     de0:	8b 8b       	std	Y+19, r24	; 0x13
     de2:	3f c0       	rjmp	.+126    	; 0xe62 <enter_password_first_time+0x104>
	else if (__tmp > 65535)
     de4:	6d 89       	ldd	r22, Y+21	; 0x15
     de6:	7e 89       	ldd	r23, Y+22	; 0x16
     de8:	8f 89       	ldd	r24, Y+23	; 0x17
     dea:	98 8d       	ldd	r25, Y+24	; 0x18
     dec:	20 e0       	ldi	r18, 0x00	; 0
     dee:	3f ef       	ldi	r19, 0xFF	; 255
     df0:	4f e7       	ldi	r20, 0x7F	; 127
     df2:	57 e4       	ldi	r21, 0x47	; 71
     df4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     df8:	18 16       	cp	r1, r24
     dfa:	4c f5       	brge	.+82     	; 0xe4e <enter_password_first_time+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     dfc:	69 8d       	ldd	r22, Y+25	; 0x19
     dfe:	7a 8d       	ldd	r23, Y+26	; 0x1a
     e00:	8b 8d       	ldd	r24, Y+27	; 0x1b
     e02:	9c 8d       	ldd	r25, Y+28	; 0x1c
     e04:	20 e0       	ldi	r18, 0x00	; 0
     e06:	30 e0       	ldi	r19, 0x00	; 0
     e08:	40 e2       	ldi	r20, 0x20	; 32
     e0a:	51 e4       	ldi	r21, 0x41	; 65
     e0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e10:	dc 01       	movw	r26, r24
     e12:	cb 01       	movw	r24, r22
     e14:	bc 01       	movw	r22, r24
     e16:	cd 01       	movw	r24, r26
     e18:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e1c:	dc 01       	movw	r26, r24
     e1e:	cb 01       	movw	r24, r22
     e20:	9c 8b       	std	Y+20, r25	; 0x14
     e22:	8b 8b       	std	Y+19, r24	; 0x13
     e24:	0f c0       	rjmp	.+30     	; 0xe44 <enter_password_first_time+0xe6>
     e26:	89 e1       	ldi	r24, 0x19	; 25
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	9a 8b       	std	Y+18, r25	; 0x12
     e2c:	89 8b       	std	Y+17, r24	; 0x11
     e2e:	89 89       	ldd	r24, Y+17	; 0x11
     e30:	9a 89       	ldd	r25, Y+18	; 0x12
     e32:	01 97       	sbiw	r24, 0x01	; 1
     e34:	f1 f7       	brne	.-4      	; 0xe32 <enter_password_first_time+0xd4>
     e36:	9a 8b       	std	Y+18, r25	; 0x12
     e38:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e3a:	8b 89       	ldd	r24, Y+19	; 0x13
     e3c:	9c 89       	ldd	r25, Y+20	; 0x14
     e3e:	01 97       	sbiw	r24, 0x01	; 1
     e40:	9c 8b       	std	Y+20, r25	; 0x14
     e42:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e44:	8b 89       	ldd	r24, Y+19	; 0x13
     e46:	9c 89       	ldd	r25, Y+20	; 0x14
     e48:	00 97       	sbiw	r24, 0x00	; 0
     e4a:	69 f7       	brne	.-38     	; 0xe26 <enter_password_first_time+0xc8>
     e4c:	14 c0       	rjmp	.+40     	; 0xe76 <enter_password_first_time+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e4e:	6d 89       	ldd	r22, Y+21	; 0x15
     e50:	7e 89       	ldd	r23, Y+22	; 0x16
     e52:	8f 89       	ldd	r24, Y+23	; 0x17
     e54:	98 8d       	ldd	r25, Y+24	; 0x18
     e56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e5a:	dc 01       	movw	r26, r24
     e5c:	cb 01       	movw	r24, r22
     e5e:	9c 8b       	std	Y+20, r25	; 0x14
     e60:	8b 8b       	std	Y+19, r24	; 0x13
     e62:	8b 89       	ldd	r24, Y+19	; 0x13
     e64:	9c 89       	ldd	r25, Y+20	; 0x14
     e66:	98 8b       	std	Y+16, r25	; 0x10
     e68:	8f 87       	std	Y+15, r24	; 0x0f
     e6a:	8f 85       	ldd	r24, Y+15	; 0x0f
     e6c:	98 89       	ldd	r25, Y+16	; 0x10
     e6e:	01 97       	sbiw	r24, 0x01	; 1
     e70:	f1 f7       	brne	.-4      	; 0xe6e <enter_password_first_time+0x110>
     e72:	98 8b       	std	Y+16, r25	; 0x10
     e74:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2000);
		//UART_sendByte(key);

		if((key <= 9) && (key >= 0))
     e76:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e78:	8a 30       	cpi	r24, 0x0A	; 10
     e7a:	58 f4       	brcc	.+22     	; 0xe92 <enter_password_first_time+0x134>
		{
			g_firstPassword[i] = key;/* store every pressed key to store the whole password*/
     e7c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e7e:	88 2f       	mov	r24, r24
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	fc 01       	movw	r30, r24
     e84:	eb 5f       	subi	r30, 0xFB	; 251
     e86:	fe 4f       	sbci	r31, 0xFE	; 254
     e88:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e8a:	80 83       	st	Z, r24
			LCD_displayCharacter('*'); /* display '*' on the LCD */
     e8c:	8a e2       	ldi	r24, 0x2A	; 42
     e8e:	0e 94 bf 11 	call	0x237e	; 0x237e <LCD_displayCharacter>
	uint8 key;
	LCD_clearScreen();
	LCD_displayString("Enter Password");
	LCD_moveCursor(1,0);

	for(i=0; i<PASSWORD_SIZE; i++){
     e92:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e94:	8f 5f       	subi	r24, 0xFF	; 255
     e96:	8e 8f       	std	Y+30, r24	; 0x1e
     e98:	8e 8d       	ldd	r24, Y+30	; 0x1e
     e9a:	85 30       	cpi	r24, 0x05	; 5
     e9c:	08 f4       	brcc	.+2      	; 0xea0 <enter_password_first_time+0x142>
     e9e:	76 cf       	rjmp	.-276    	; 0xd8c <enter_password_first_time+0x2e>
			LCD_displayCharacter('*'); /* display '*' on the LCD */
			//LCD_intgerToString(key); /* display the pressed keypad switch */
		}

	}
	key = 0;
     ea0:	1d 8e       	std	Y+29, r1	; 0x1d
	LCD_clearScreen();
     ea2:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <LCD_clearScreen>
	LCD_displayString("ReEnter Password");
     ea6:	88 e7       	ldi	r24, 0x78	; 120
     ea8:	90 e0       	ldi	r25, 0x00	; 0
     eaa:	0e 94 b3 13 	call	0x2766	; 0x2766 <LCD_displayString>
	LCD_moveCursor(1,0);
     eae:	81 e0       	ldi	r24, 0x01	; 1
     eb0:	60 e0       	ldi	r22, 0x00	; 0
     eb2:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <LCD_moveCursor>
	for(i=0; i<PASSWORD_SIZE; i++){
     eb6:	1e 8e       	std	Y+30, r1	; 0x1e
     eb8:	86 c0       	rjmp	.+268    	; 0xfc6 <enter_password_first_time+0x268>

		key = KEYPAD_getPressedKey();/* read the pressed key on the keypad*/
     eba:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <KEYPAD_getPressedKey>
     ebe:	8d 8f       	std	Y+29, r24	; 0x1d
     ec0:	80 e0       	ldi	r24, 0x00	; 0
     ec2:	90 e0       	ldi	r25, 0x00	; 0
     ec4:	aa ef       	ldi	r26, 0xFA	; 250
     ec6:	b4 e4       	ldi	r27, 0x44	; 68
     ec8:	8b 87       	std	Y+11, r24	; 0x0b
     eca:	9c 87       	std	Y+12, r25	; 0x0c
     ecc:	ad 87       	std	Y+13, r26	; 0x0d
     ece:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ed0:	6b 85       	ldd	r22, Y+11	; 0x0b
     ed2:	7c 85       	ldd	r23, Y+12	; 0x0c
     ed4:	8d 85       	ldd	r24, Y+13	; 0x0d
     ed6:	9e 85       	ldd	r25, Y+14	; 0x0e
     ed8:	20 e0       	ldi	r18, 0x00	; 0
     eda:	30 e0       	ldi	r19, 0x00	; 0
     edc:	4a e7       	ldi	r20, 0x7A	; 122
     ede:	53 e4       	ldi	r21, 0x43	; 67
     ee0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     ee4:	dc 01       	movw	r26, r24
     ee6:	cb 01       	movw	r24, r22
     ee8:	8f 83       	std	Y+7, r24	; 0x07
     eea:	98 87       	std	Y+8, r25	; 0x08
     eec:	a9 87       	std	Y+9, r26	; 0x09
     eee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     ef0:	6f 81       	ldd	r22, Y+7	; 0x07
     ef2:	78 85       	ldd	r23, Y+8	; 0x08
     ef4:	89 85       	ldd	r24, Y+9	; 0x09
     ef6:	9a 85       	ldd	r25, Y+10	; 0x0a
     ef8:	20 e0       	ldi	r18, 0x00	; 0
     efa:	30 e0       	ldi	r19, 0x00	; 0
     efc:	40 e8       	ldi	r20, 0x80	; 128
     efe:	5f e3       	ldi	r21, 0x3F	; 63
     f00:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f04:	88 23       	and	r24, r24
     f06:	2c f4       	brge	.+10     	; 0xf12 <enter_password_first_time+0x1b4>
		__ticks = 1;
     f08:	81 e0       	ldi	r24, 0x01	; 1
     f0a:	90 e0       	ldi	r25, 0x00	; 0
     f0c:	9e 83       	std	Y+6, r25	; 0x06
     f0e:	8d 83       	std	Y+5, r24	; 0x05
     f10:	3f c0       	rjmp	.+126    	; 0xf90 <enter_password_first_time+0x232>
	else if (__tmp > 65535)
     f12:	6f 81       	ldd	r22, Y+7	; 0x07
     f14:	78 85       	ldd	r23, Y+8	; 0x08
     f16:	89 85       	ldd	r24, Y+9	; 0x09
     f18:	9a 85       	ldd	r25, Y+10	; 0x0a
     f1a:	20 e0       	ldi	r18, 0x00	; 0
     f1c:	3f ef       	ldi	r19, 0xFF	; 255
     f1e:	4f e7       	ldi	r20, 0x7F	; 127
     f20:	57 e4       	ldi	r21, 0x47	; 71
     f22:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f26:	18 16       	cp	r1, r24
     f28:	4c f5       	brge	.+82     	; 0xf7c <enter_password_first_time+0x21e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f2a:	6b 85       	ldd	r22, Y+11	; 0x0b
     f2c:	7c 85       	ldd	r23, Y+12	; 0x0c
     f2e:	8d 85       	ldd	r24, Y+13	; 0x0d
     f30:	9e 85       	ldd	r25, Y+14	; 0x0e
     f32:	20 e0       	ldi	r18, 0x00	; 0
     f34:	30 e0       	ldi	r19, 0x00	; 0
     f36:	40 e2       	ldi	r20, 0x20	; 32
     f38:	51 e4       	ldi	r21, 0x41	; 65
     f3a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f3e:	dc 01       	movw	r26, r24
     f40:	cb 01       	movw	r24, r22
     f42:	bc 01       	movw	r22, r24
     f44:	cd 01       	movw	r24, r26
     f46:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f4a:	dc 01       	movw	r26, r24
     f4c:	cb 01       	movw	r24, r22
     f4e:	9e 83       	std	Y+6, r25	; 0x06
     f50:	8d 83       	std	Y+5, r24	; 0x05
     f52:	0f c0       	rjmp	.+30     	; 0xf72 <enter_password_first_time+0x214>
     f54:	89 e1       	ldi	r24, 0x19	; 25
     f56:	90 e0       	ldi	r25, 0x00	; 0
     f58:	9c 83       	std	Y+4, r25	; 0x04
     f5a:	8b 83       	std	Y+3, r24	; 0x03
     f5c:	8b 81       	ldd	r24, Y+3	; 0x03
     f5e:	9c 81       	ldd	r25, Y+4	; 0x04
     f60:	01 97       	sbiw	r24, 0x01	; 1
     f62:	f1 f7       	brne	.-4      	; 0xf60 <enter_password_first_time+0x202>
     f64:	9c 83       	std	Y+4, r25	; 0x04
     f66:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f68:	8d 81       	ldd	r24, Y+5	; 0x05
     f6a:	9e 81       	ldd	r25, Y+6	; 0x06
     f6c:	01 97       	sbiw	r24, 0x01	; 1
     f6e:	9e 83       	std	Y+6, r25	; 0x06
     f70:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f72:	8d 81       	ldd	r24, Y+5	; 0x05
     f74:	9e 81       	ldd	r25, Y+6	; 0x06
     f76:	00 97       	sbiw	r24, 0x00	; 0
     f78:	69 f7       	brne	.-38     	; 0xf54 <enter_password_first_time+0x1f6>
     f7a:	14 c0       	rjmp	.+40     	; 0xfa4 <enter_password_first_time+0x246>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f7c:	6f 81       	ldd	r22, Y+7	; 0x07
     f7e:	78 85       	ldd	r23, Y+8	; 0x08
     f80:	89 85       	ldd	r24, Y+9	; 0x09
     f82:	9a 85       	ldd	r25, Y+10	; 0x0a
     f84:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f88:	dc 01       	movw	r26, r24
     f8a:	cb 01       	movw	r24, r22
     f8c:	9e 83       	std	Y+6, r25	; 0x06
     f8e:	8d 83       	std	Y+5, r24	; 0x05
     f90:	8d 81       	ldd	r24, Y+5	; 0x05
     f92:	9e 81       	ldd	r25, Y+6	; 0x06
     f94:	9a 83       	std	Y+2, r25	; 0x02
     f96:	89 83       	std	Y+1, r24	; 0x01
     f98:	89 81       	ldd	r24, Y+1	; 0x01
     f9a:	9a 81       	ldd	r25, Y+2	; 0x02
     f9c:	01 97       	sbiw	r24, 0x01	; 1
     f9e:	f1 f7       	brne	.-4      	; 0xf9c <enter_password_first_time+0x23e>
     fa0:	9a 83       	std	Y+2, r25	; 0x02
     fa2:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(2000);


		if((key <= 9) && (key >= 0))
     fa4:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fa6:	8a 30       	cpi	r24, 0x0A	; 10
     fa8:	58 f4       	brcc	.+22     	; 0xfc0 <enter_password_first_time+0x262>
		{
			g_secondPassword[i] = key;/* store every pressed key to store the whole re entered password*/
     faa:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fac:	88 2f       	mov	r24, r24
     fae:	90 e0       	ldi	r25, 0x00	; 0
     fb0:	fc 01       	movw	r30, r24
     fb2:	e0 50       	subi	r30, 0x00	; 0
     fb4:	ff 4f       	sbci	r31, 0xFF	; 255
     fb6:	8d 8d       	ldd	r24, Y+29	; 0x1d
     fb8:	80 83       	st	Z, r24
			LCD_displayCharacter('*');/* display '*' on the LCD */
     fba:	8a e2       	ldi	r24, 0x2A	; 42
     fbc:	0e 94 bf 11 	call	0x237e	; 0x237e <LCD_displayCharacter>
	}
	key = 0;
	LCD_clearScreen();
	LCD_displayString("ReEnter Password");
	LCD_moveCursor(1,0);
	for(i=0; i<PASSWORD_SIZE; i++){
     fc0:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fc2:	8f 5f       	subi	r24, 0xFF	; 255
     fc4:	8e 8f       	std	Y+30, r24	; 0x1e
     fc6:	8e 8d       	ldd	r24, Y+30	; 0x1e
     fc8:	85 30       	cpi	r24, 0x05	; 5
     fca:	08 f4       	brcc	.+2      	; 0xfce <enter_password_first_time+0x270>
     fcc:	76 cf       	rjmp	.-276    	; 0xeba <enter_password_first_time+0x15c>
			g_secondPassword[i] = key;/* store every pressed key to store the whole re entered password*/
			LCD_displayCharacter('*');/* display '*' on the LCD */
			//LCD_intgerToString(key); /* display the pressed keypad switch */
		}
	}
}
     fce:	6e 96       	adiw	r28, 0x1e	; 30
     fd0:	0f b6       	in	r0, 0x3f	; 63
     fd2:	f8 94       	cli
     fd4:	de bf       	out	0x3e, r29	; 62
     fd6:	0f be       	out	0x3f, r0	; 63
     fd8:	cd bf       	out	0x3d, r28	; 61
     fda:	cf 91       	pop	r28
     fdc:	df 91       	pop	r29
     fde:	08 95       	ret

00000fe0 <display_main_options>:
/*
 * Description:
 * display available options and return the user's choice
 */
void display_main_options(void){
     fe0:	df 93       	push	r29
     fe2:	cf 93       	push	r28
     fe4:	cd b7       	in	r28, 0x3d	; 61
     fe6:	de b7       	in	r29, 0x3e	; 62
     fe8:	6d 97       	sbiw	r28, 0x1d	; 29
     fea:	0f b6       	in	r0, 0x3f	; 63
     fec:	f8 94       	cli
     fee:	de bf       	out	0x3e, r29	; 62
     ff0:	0f be       	out	0x3f, r0	; 63
     ff2:	cd bf       	out	0x3d, r28	; 61

	uint8 key;
	while(1){
		LCD_clearScreen();
     ff4:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <LCD_clearScreen>
		LCD_displayString("+: open the door");
     ff8:	89 e8       	ldi	r24, 0x89	; 137
     ffa:	90 e0       	ldi	r25, 0x00	; 0
     ffc:	0e 94 b3 13 	call	0x2766	; 0x2766 <LCD_displayString>
		LCD_moveCursor(1,0);
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	60 e0       	ldi	r22, 0x00	; 0
    1004:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <LCD_moveCursor>
		LCD_displayString("-: change pass  ");
    1008:	8a e9       	ldi	r24, 0x9A	; 154
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	0e 94 b3 13 	call	0x2766	; 0x2766 <LCD_displayString>

		key = KEYPAD_getPressedKey();/* read the pressed key on the keypad*/
    1010:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <KEYPAD_getPressedKey>
    1014:	8d 8f       	std	Y+29, r24	; 0x1d
    1016:	80 e0       	ldi	r24, 0x00	; 0
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	aa e7       	ldi	r26, 0x7A	; 122
    101c:	b4 e4       	ldi	r27, 0x44	; 68
    101e:	89 8f       	std	Y+25, r24	; 0x19
    1020:	9a 8f       	std	Y+26, r25	; 0x1a
    1022:	ab 8f       	std	Y+27, r26	; 0x1b
    1024:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1026:	69 8d       	ldd	r22, Y+25	; 0x19
    1028:	7a 8d       	ldd	r23, Y+26	; 0x1a
    102a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    102c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    102e:	20 e0       	ldi	r18, 0x00	; 0
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	4a e7       	ldi	r20, 0x7A	; 122
    1034:	53 e4       	ldi	r21, 0x43	; 67
    1036:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    103a:	dc 01       	movw	r26, r24
    103c:	cb 01       	movw	r24, r22
    103e:	8d 8b       	std	Y+21, r24	; 0x15
    1040:	9e 8b       	std	Y+22, r25	; 0x16
    1042:	af 8b       	std	Y+23, r26	; 0x17
    1044:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1046:	6d 89       	ldd	r22, Y+21	; 0x15
    1048:	7e 89       	ldd	r23, Y+22	; 0x16
    104a:	8f 89       	ldd	r24, Y+23	; 0x17
    104c:	98 8d       	ldd	r25, Y+24	; 0x18
    104e:	20 e0       	ldi	r18, 0x00	; 0
    1050:	30 e0       	ldi	r19, 0x00	; 0
    1052:	40 e8       	ldi	r20, 0x80	; 128
    1054:	5f e3       	ldi	r21, 0x3F	; 63
    1056:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    105a:	88 23       	and	r24, r24
    105c:	2c f4       	brge	.+10     	; 0x1068 <display_main_options+0x88>
		__ticks = 1;
    105e:	81 e0       	ldi	r24, 0x01	; 1
    1060:	90 e0       	ldi	r25, 0x00	; 0
    1062:	9c 8b       	std	Y+20, r25	; 0x14
    1064:	8b 8b       	std	Y+19, r24	; 0x13
    1066:	3f c0       	rjmp	.+126    	; 0x10e6 <display_main_options+0x106>
	else if (__tmp > 65535)
    1068:	6d 89       	ldd	r22, Y+21	; 0x15
    106a:	7e 89       	ldd	r23, Y+22	; 0x16
    106c:	8f 89       	ldd	r24, Y+23	; 0x17
    106e:	98 8d       	ldd	r25, Y+24	; 0x18
    1070:	20 e0       	ldi	r18, 0x00	; 0
    1072:	3f ef       	ldi	r19, 0xFF	; 255
    1074:	4f e7       	ldi	r20, 0x7F	; 127
    1076:	57 e4       	ldi	r21, 0x47	; 71
    1078:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    107c:	18 16       	cp	r1, r24
    107e:	4c f5       	brge	.+82     	; 0x10d2 <display_main_options+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1080:	69 8d       	ldd	r22, Y+25	; 0x19
    1082:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1084:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1086:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1088:	20 e0       	ldi	r18, 0x00	; 0
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	40 e2       	ldi	r20, 0x20	; 32
    108e:	51 e4       	ldi	r21, 0x41	; 65
    1090:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1094:	dc 01       	movw	r26, r24
    1096:	cb 01       	movw	r24, r22
    1098:	bc 01       	movw	r22, r24
    109a:	cd 01       	movw	r24, r26
    109c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10a0:	dc 01       	movw	r26, r24
    10a2:	cb 01       	movw	r24, r22
    10a4:	9c 8b       	std	Y+20, r25	; 0x14
    10a6:	8b 8b       	std	Y+19, r24	; 0x13
    10a8:	0f c0       	rjmp	.+30     	; 0x10c8 <display_main_options+0xe8>
    10aa:	89 e1       	ldi	r24, 0x19	; 25
    10ac:	90 e0       	ldi	r25, 0x00	; 0
    10ae:	9a 8b       	std	Y+18, r25	; 0x12
    10b0:	89 8b       	std	Y+17, r24	; 0x11
    10b2:	89 89       	ldd	r24, Y+17	; 0x11
    10b4:	9a 89       	ldd	r25, Y+18	; 0x12
    10b6:	01 97       	sbiw	r24, 0x01	; 1
    10b8:	f1 f7       	brne	.-4      	; 0x10b6 <display_main_options+0xd6>
    10ba:	9a 8b       	std	Y+18, r25	; 0x12
    10bc:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10be:	8b 89       	ldd	r24, Y+19	; 0x13
    10c0:	9c 89       	ldd	r25, Y+20	; 0x14
    10c2:	01 97       	sbiw	r24, 0x01	; 1
    10c4:	9c 8b       	std	Y+20, r25	; 0x14
    10c6:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10c8:	8b 89       	ldd	r24, Y+19	; 0x13
    10ca:	9c 89       	ldd	r25, Y+20	; 0x14
    10cc:	00 97       	sbiw	r24, 0x00	; 0
    10ce:	69 f7       	brne	.-38     	; 0x10aa <display_main_options+0xca>
    10d0:	14 c0       	rjmp	.+40     	; 0x10fa <display_main_options+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10d2:	6d 89       	ldd	r22, Y+21	; 0x15
    10d4:	7e 89       	ldd	r23, Y+22	; 0x16
    10d6:	8f 89       	ldd	r24, Y+23	; 0x17
    10d8:	98 8d       	ldd	r25, Y+24	; 0x18
    10da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10de:	dc 01       	movw	r26, r24
    10e0:	cb 01       	movw	r24, r22
    10e2:	9c 8b       	std	Y+20, r25	; 0x14
    10e4:	8b 8b       	std	Y+19, r24	; 0x13
    10e6:	8b 89       	ldd	r24, Y+19	; 0x13
    10e8:	9c 89       	ldd	r25, Y+20	; 0x14
    10ea:	98 8b       	std	Y+16, r25	; 0x10
    10ec:	8f 87       	std	Y+15, r24	; 0x0f
    10ee:	8f 85       	ldd	r24, Y+15	; 0x0f
    10f0:	98 89       	ldd	r25, Y+16	; 0x10
    10f2:	01 97       	sbiw	r24, 0x01	; 1
    10f4:	f1 f7       	brne	.-4      	; 0x10f2 <display_main_options+0x112>
    10f6:	98 8b       	std	Y+16, r25	; 0x10
    10f8:	8f 87       	std	Y+15, r24	; 0x0f

		_delay_ms(1000);
		LCD_moveCursor(1,15);
    10fa:	81 e0       	ldi	r24, 0x01	; 1
    10fc:	6f e0       	ldi	r22, 0x0F	; 15
    10fe:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <LCD_moveCursor>
		LCD_displayCharacter(key);
    1102:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1104:	0e 94 bf 11 	call	0x237e	; 0x237e <LCD_displayCharacter>
    1108:	80 e0       	ldi	r24, 0x00	; 0
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	aa e7       	ldi	r26, 0x7A	; 122
    110e:	b4 e4       	ldi	r27, 0x44	; 68
    1110:	8b 87       	std	Y+11, r24	; 0x0b
    1112:	9c 87       	std	Y+12, r25	; 0x0c
    1114:	ad 87       	std	Y+13, r26	; 0x0d
    1116:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1118:	6b 85       	ldd	r22, Y+11	; 0x0b
    111a:	7c 85       	ldd	r23, Y+12	; 0x0c
    111c:	8d 85       	ldd	r24, Y+13	; 0x0d
    111e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	30 e0       	ldi	r19, 0x00	; 0
    1124:	4a e7       	ldi	r20, 0x7A	; 122
    1126:	53 e4       	ldi	r21, 0x43	; 67
    1128:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    112c:	dc 01       	movw	r26, r24
    112e:	cb 01       	movw	r24, r22
    1130:	8f 83       	std	Y+7, r24	; 0x07
    1132:	98 87       	std	Y+8, r25	; 0x08
    1134:	a9 87       	std	Y+9, r26	; 0x09
    1136:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1138:	6f 81       	ldd	r22, Y+7	; 0x07
    113a:	78 85       	ldd	r23, Y+8	; 0x08
    113c:	89 85       	ldd	r24, Y+9	; 0x09
    113e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1140:	20 e0       	ldi	r18, 0x00	; 0
    1142:	30 e0       	ldi	r19, 0x00	; 0
    1144:	40 e8       	ldi	r20, 0x80	; 128
    1146:	5f e3       	ldi	r21, 0x3F	; 63
    1148:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    114c:	88 23       	and	r24, r24
    114e:	2c f4       	brge	.+10     	; 0x115a <display_main_options+0x17a>
		__ticks = 1;
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	9e 83       	std	Y+6, r25	; 0x06
    1156:	8d 83       	std	Y+5, r24	; 0x05
    1158:	3f c0       	rjmp	.+126    	; 0x11d8 <display_main_options+0x1f8>
	else if (__tmp > 65535)
    115a:	6f 81       	ldd	r22, Y+7	; 0x07
    115c:	78 85       	ldd	r23, Y+8	; 0x08
    115e:	89 85       	ldd	r24, Y+9	; 0x09
    1160:	9a 85       	ldd	r25, Y+10	; 0x0a
    1162:	20 e0       	ldi	r18, 0x00	; 0
    1164:	3f ef       	ldi	r19, 0xFF	; 255
    1166:	4f e7       	ldi	r20, 0x7F	; 127
    1168:	57 e4       	ldi	r21, 0x47	; 71
    116a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    116e:	18 16       	cp	r1, r24
    1170:	4c f5       	brge	.+82     	; 0x11c4 <display_main_options+0x1e4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1172:	6b 85       	ldd	r22, Y+11	; 0x0b
    1174:	7c 85       	ldd	r23, Y+12	; 0x0c
    1176:	8d 85       	ldd	r24, Y+13	; 0x0d
    1178:	9e 85       	ldd	r25, Y+14	; 0x0e
    117a:	20 e0       	ldi	r18, 0x00	; 0
    117c:	30 e0       	ldi	r19, 0x00	; 0
    117e:	40 e2       	ldi	r20, 0x20	; 32
    1180:	51 e4       	ldi	r21, 0x41	; 65
    1182:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1186:	dc 01       	movw	r26, r24
    1188:	cb 01       	movw	r24, r22
    118a:	bc 01       	movw	r22, r24
    118c:	cd 01       	movw	r24, r26
    118e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1192:	dc 01       	movw	r26, r24
    1194:	cb 01       	movw	r24, r22
    1196:	9e 83       	std	Y+6, r25	; 0x06
    1198:	8d 83       	std	Y+5, r24	; 0x05
    119a:	0f c0       	rjmp	.+30     	; 0x11ba <display_main_options+0x1da>
    119c:	89 e1       	ldi	r24, 0x19	; 25
    119e:	90 e0       	ldi	r25, 0x00	; 0
    11a0:	9c 83       	std	Y+4, r25	; 0x04
    11a2:	8b 83       	std	Y+3, r24	; 0x03
    11a4:	8b 81       	ldd	r24, Y+3	; 0x03
    11a6:	9c 81       	ldd	r25, Y+4	; 0x04
    11a8:	01 97       	sbiw	r24, 0x01	; 1
    11aa:	f1 f7       	brne	.-4      	; 0x11a8 <display_main_options+0x1c8>
    11ac:	9c 83       	std	Y+4, r25	; 0x04
    11ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11b0:	8d 81       	ldd	r24, Y+5	; 0x05
    11b2:	9e 81       	ldd	r25, Y+6	; 0x06
    11b4:	01 97       	sbiw	r24, 0x01	; 1
    11b6:	9e 83       	std	Y+6, r25	; 0x06
    11b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ba:	8d 81       	ldd	r24, Y+5	; 0x05
    11bc:	9e 81       	ldd	r25, Y+6	; 0x06
    11be:	00 97       	sbiw	r24, 0x00	; 0
    11c0:	69 f7       	brne	.-38     	; 0x119c <display_main_options+0x1bc>
    11c2:	14 c0       	rjmp	.+40     	; 0x11ec <display_main_options+0x20c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11c4:	6f 81       	ldd	r22, Y+7	; 0x07
    11c6:	78 85       	ldd	r23, Y+8	; 0x08
    11c8:	89 85       	ldd	r24, Y+9	; 0x09
    11ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    11cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11d0:	dc 01       	movw	r26, r24
    11d2:	cb 01       	movw	r24, r22
    11d4:	9e 83       	std	Y+6, r25	; 0x06
    11d6:	8d 83       	std	Y+5, r24	; 0x05
    11d8:	8d 81       	ldd	r24, Y+5	; 0x05
    11da:	9e 81       	ldd	r25, Y+6	; 0x06
    11dc:	9a 83       	std	Y+2, r25	; 0x02
    11de:	89 83       	std	Y+1, r24	; 0x01
    11e0:	89 81       	ldd	r24, Y+1	; 0x01
    11e2:	9a 81       	ldd	r25, Y+2	; 0x02
    11e4:	01 97       	sbiw	r24, 0x01	; 1
    11e6:	f1 f7       	brne	.-4      	; 0x11e4 <display_main_options+0x204>
    11e8:	9a 83       	std	Y+2, r25	; 0x02
    11ea:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		LCD_clearScreen();
    11ec:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <LCD_clearScreen>
		if((key == '+') || (key == '-')){
    11f0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11f2:	8b 32       	cpi	r24, 0x2B	; 43
    11f4:	21 f0       	breq	.+8      	; 0x11fe <display_main_options+0x21e>
    11f6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    11f8:	8d 32       	cpi	r24, 0x2D	; 45
    11fa:	09 f0       	breq	.+2      	; 0x11fe <display_main_options+0x21e>
    11fc:	fb ce       	rjmp	.-522    	; 0xff4 <display_main_options+0x14>
			g_operation = key;
    11fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1200:	80 93 fb 00 	sts	0x00FB, r24
			checking_password_after_operation();
    1204:	0e 94 0d 09 	call	0x121a	; 0x121a <checking_password_after_operation>
			break;
		}


	}
    1208:	6d 96       	adiw	r28, 0x1d	; 29
    120a:	0f b6       	in	r0, 0x3f	; 63
    120c:	f8 94       	cli
    120e:	de bf       	out	0x3e, r29	; 62
    1210:	0f be       	out	0x3f, r0	; 63
    1212:	cd bf       	out	0x3d, r28	; 61
    1214:	cf 91       	pop	r28
    1216:	df 91       	pop	r29
    1218:	08 95       	ret

0000121a <checking_password_after_operation>:
/*
 * Description:
 * After choosing an operation he will be asked again about his password and send it to MC2 to
 * check it with the old one stored in EEPROM
 */
void checking_password_after_operation(void){
    121a:	df 93       	push	r29
    121c:	cf 93       	push	r28
    121e:	cd b7       	in	r28, 0x3d	; 61
    1220:	de b7       	in	r29, 0x3e	; 62
    1222:	6e 97       	sbiw	r28, 0x1e	; 30
    1224:	0f b6       	in	r0, 0x3f	; 63
    1226:	f8 94       	cli
    1228:	de bf       	out	0x3e, r29	; 62
    122a:	0f be       	out	0x3f, r0	; 63
    122c:	cd bf       	out	0x3d, r28	; 61
	uint8 i=0;
    122e:	1e 8e       	std	Y+30, r1	; 0x1e
	uint8 key;
	LCD_clearScreen();
    1230:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <LCD_clearScreen>
	LCD_displayString("Enter Password:");
    1234:	8b ea       	ldi	r24, 0xAB	; 171
    1236:	90 e0       	ldi	r25, 0x00	; 0
    1238:	0e 94 b3 13 	call	0x2766	; 0x2766 <LCD_displayString>
	LCD_moveCursor(1,0);
    123c:	81 e0       	ldi	r24, 0x01	; 1
    123e:	60 e0       	ldi	r22, 0x00	; 0
    1240:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <LCD_moveCursor>

	for(i=0; i<PASSWORD_SIZE; i++){
    1244:	1e 8e       	std	Y+30, r1	; 0x1e
    1246:	86 c0       	rjmp	.+268    	; 0x1354 <checking_password_after_operation+0x13a>

		key = KEYPAD_getPressedKey();/* read the pressed key on the keypad*/
    1248:	0e 94 b0 0e 	call	0x1d60	; 0x1d60 <KEYPAD_getPressedKey>
    124c:	8d 8f       	std	Y+29, r24	; 0x1d
    124e:	80 e0       	ldi	r24, 0x00	; 0
    1250:	90 e0       	ldi	r25, 0x00	; 0
    1252:	aa ef       	ldi	r26, 0xFA	; 250
    1254:	b4 e4       	ldi	r27, 0x44	; 68
    1256:	89 8f       	std	Y+25, r24	; 0x19
    1258:	9a 8f       	std	Y+26, r25	; 0x1a
    125a:	ab 8f       	std	Y+27, r26	; 0x1b
    125c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    125e:	69 8d       	ldd	r22, Y+25	; 0x19
    1260:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1262:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1264:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1266:	20 e0       	ldi	r18, 0x00	; 0
    1268:	30 e0       	ldi	r19, 0x00	; 0
    126a:	4a e7       	ldi	r20, 0x7A	; 122
    126c:	53 e4       	ldi	r21, 0x43	; 67
    126e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1272:	dc 01       	movw	r26, r24
    1274:	cb 01       	movw	r24, r22
    1276:	8d 8b       	std	Y+21, r24	; 0x15
    1278:	9e 8b       	std	Y+22, r25	; 0x16
    127a:	af 8b       	std	Y+23, r26	; 0x17
    127c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    127e:	6d 89       	ldd	r22, Y+21	; 0x15
    1280:	7e 89       	ldd	r23, Y+22	; 0x16
    1282:	8f 89       	ldd	r24, Y+23	; 0x17
    1284:	98 8d       	ldd	r25, Y+24	; 0x18
    1286:	20 e0       	ldi	r18, 0x00	; 0
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	40 e8       	ldi	r20, 0x80	; 128
    128c:	5f e3       	ldi	r21, 0x3F	; 63
    128e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1292:	88 23       	and	r24, r24
    1294:	2c f4       	brge	.+10     	; 0x12a0 <checking_password_after_operation+0x86>
		__ticks = 1;
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	9c 8b       	std	Y+20, r25	; 0x14
    129c:	8b 8b       	std	Y+19, r24	; 0x13
    129e:	3f c0       	rjmp	.+126    	; 0x131e <checking_password_after_operation+0x104>
	else if (__tmp > 65535)
    12a0:	6d 89       	ldd	r22, Y+21	; 0x15
    12a2:	7e 89       	ldd	r23, Y+22	; 0x16
    12a4:	8f 89       	ldd	r24, Y+23	; 0x17
    12a6:	98 8d       	ldd	r25, Y+24	; 0x18
    12a8:	20 e0       	ldi	r18, 0x00	; 0
    12aa:	3f ef       	ldi	r19, 0xFF	; 255
    12ac:	4f e7       	ldi	r20, 0x7F	; 127
    12ae:	57 e4       	ldi	r21, 0x47	; 71
    12b0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12b4:	18 16       	cp	r1, r24
    12b6:	4c f5       	brge	.+82     	; 0x130a <checking_password_after_operation+0xf0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12b8:	69 8d       	ldd	r22, Y+25	; 0x19
    12ba:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12bc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12be:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12c0:	20 e0       	ldi	r18, 0x00	; 0
    12c2:	30 e0       	ldi	r19, 0x00	; 0
    12c4:	40 e2       	ldi	r20, 0x20	; 32
    12c6:	51 e4       	ldi	r21, 0x41	; 65
    12c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12cc:	dc 01       	movw	r26, r24
    12ce:	cb 01       	movw	r24, r22
    12d0:	bc 01       	movw	r22, r24
    12d2:	cd 01       	movw	r24, r26
    12d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12d8:	dc 01       	movw	r26, r24
    12da:	cb 01       	movw	r24, r22
    12dc:	9c 8b       	std	Y+20, r25	; 0x14
    12de:	8b 8b       	std	Y+19, r24	; 0x13
    12e0:	0f c0       	rjmp	.+30     	; 0x1300 <checking_password_after_operation+0xe6>
    12e2:	89 e1       	ldi	r24, 0x19	; 25
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	9a 8b       	std	Y+18, r25	; 0x12
    12e8:	89 8b       	std	Y+17, r24	; 0x11
    12ea:	89 89       	ldd	r24, Y+17	; 0x11
    12ec:	9a 89       	ldd	r25, Y+18	; 0x12
    12ee:	01 97       	sbiw	r24, 0x01	; 1
    12f0:	f1 f7       	brne	.-4      	; 0x12ee <checking_password_after_operation+0xd4>
    12f2:	9a 8b       	std	Y+18, r25	; 0x12
    12f4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12f6:	8b 89       	ldd	r24, Y+19	; 0x13
    12f8:	9c 89       	ldd	r25, Y+20	; 0x14
    12fa:	01 97       	sbiw	r24, 0x01	; 1
    12fc:	9c 8b       	std	Y+20, r25	; 0x14
    12fe:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1300:	8b 89       	ldd	r24, Y+19	; 0x13
    1302:	9c 89       	ldd	r25, Y+20	; 0x14
    1304:	00 97       	sbiw	r24, 0x00	; 0
    1306:	69 f7       	brne	.-38     	; 0x12e2 <checking_password_after_operation+0xc8>
    1308:	14 c0       	rjmp	.+40     	; 0x1332 <checking_password_after_operation+0x118>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    130a:	6d 89       	ldd	r22, Y+21	; 0x15
    130c:	7e 89       	ldd	r23, Y+22	; 0x16
    130e:	8f 89       	ldd	r24, Y+23	; 0x17
    1310:	98 8d       	ldd	r25, Y+24	; 0x18
    1312:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1316:	dc 01       	movw	r26, r24
    1318:	cb 01       	movw	r24, r22
    131a:	9c 8b       	std	Y+20, r25	; 0x14
    131c:	8b 8b       	std	Y+19, r24	; 0x13
    131e:	8b 89       	ldd	r24, Y+19	; 0x13
    1320:	9c 89       	ldd	r25, Y+20	; 0x14
    1322:	98 8b       	std	Y+16, r25	; 0x10
    1324:	8f 87       	std	Y+15, r24	; 0x0f
    1326:	8f 85       	ldd	r24, Y+15	; 0x0f
    1328:	98 89       	ldd	r25, Y+16	; 0x10
    132a:	01 97       	sbiw	r24, 0x01	; 1
    132c:	f1 f7       	brne	.-4      	; 0x132a <checking_password_after_operation+0x110>
    132e:	98 8b       	std	Y+16, r25	; 0x10
    1330:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(2000);


		if((key <= 9) && (key >= 0))
    1332:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1334:	8a 30       	cpi	r24, 0x0A	; 10
    1336:	58 f4       	brcc	.+22     	; 0x134e <checking_password_after_operation+0x134>
		{
			g_password[i] = key;/* store every pressed key to store the whole password*/
    1338:	8e 8d       	ldd	r24, Y+30	; 0x1e
    133a:	88 2f       	mov	r24, r24
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	fc 01       	movw	r30, r24
    1340:	e6 5f       	subi	r30, 0xF6	; 246
    1342:	fe 4f       	sbci	r31, 0xFE	; 254
    1344:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1346:	80 83       	st	Z, r24
			LCD_displayCharacter('*'); /* display '*' on the LCD */
    1348:	8a e2       	ldi	r24, 0x2A	; 42
    134a:	0e 94 bf 11 	call	0x237e	; 0x237e <LCD_displayCharacter>
	uint8 key;
	LCD_clearScreen();
	LCD_displayString("Enter Password:");
	LCD_moveCursor(1,0);

	for(i=0; i<PASSWORD_SIZE; i++){
    134e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1350:	8f 5f       	subi	r24, 0xFF	; 255
    1352:	8e 8f       	std	Y+30, r24	; 0x1e
    1354:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1356:	85 30       	cpi	r24, 0x05	; 5
    1358:	08 f4       	brcc	.+2      	; 0x135c <checking_password_after_operation+0x142>
    135a:	76 cf       	rjmp	.-276    	; 0x1248 <checking_password_after_operation+0x2e>
			LCD_displayCharacter('*'); /* display '*' on the LCD */

			//LCD_intgerToString(key); /* display the pressed keypad switch */
		}
	}
	UART_sendByte(SEND_PASSWORD);
    135c:	80 e2       	ldi	r24, 0x20	; 32
    135e:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <UART_sendByte>
	while(UART_recieveByte() != MC2_READY){}
    1362:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <UART_recieveByte>
    1366:	80 31       	cpi	r24, 0x10	; 16
    1368:	e1 f7       	brne	.-8      	; 0x1362 <checking_password_after_operation+0x148>
	for(i=0; i<PASSWORD_SIZE; i++){
    136a:	1e 8e       	std	Y+30, r1	; 0x1e
    136c:	7e c0       	rjmp	.+252    	; 0x146a <checking_password_after_operation+0x250>
		UART_sendByte(g_password[i]);/* Send each number of the password alone to MC2 */
    136e:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1370:	88 2f       	mov	r24, r24
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	fc 01       	movw	r30, r24
    1376:	e6 5f       	subi	r30, 0xF6	; 246
    1378:	fe 4f       	sbci	r31, 0xFE	; 254
    137a:	80 81       	ld	r24, Z
    137c:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <UART_sendByte>
    1380:	80 e0       	ldi	r24, 0x00	; 0
    1382:	90 e8       	ldi	r25, 0x80	; 128
    1384:	ab e3       	ldi	r26, 0x3B	; 59
    1386:	b5 e4       	ldi	r27, 0x45	; 69
    1388:	8b 87       	std	Y+11, r24	; 0x0b
    138a:	9c 87       	std	Y+12, r25	; 0x0c
    138c:	ad 87       	std	Y+13, r26	; 0x0d
    138e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1390:	6b 85       	ldd	r22, Y+11	; 0x0b
    1392:	7c 85       	ldd	r23, Y+12	; 0x0c
    1394:	8d 85       	ldd	r24, Y+13	; 0x0d
    1396:	9e 85       	ldd	r25, Y+14	; 0x0e
    1398:	20 e0       	ldi	r18, 0x00	; 0
    139a:	30 e0       	ldi	r19, 0x00	; 0
    139c:	4a e7       	ldi	r20, 0x7A	; 122
    139e:	53 e4       	ldi	r21, 0x43	; 67
    13a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13a4:	dc 01       	movw	r26, r24
    13a6:	cb 01       	movw	r24, r22
    13a8:	8f 83       	std	Y+7, r24	; 0x07
    13aa:	98 87       	std	Y+8, r25	; 0x08
    13ac:	a9 87       	std	Y+9, r26	; 0x09
    13ae:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    13b0:	6f 81       	ldd	r22, Y+7	; 0x07
    13b2:	78 85       	ldd	r23, Y+8	; 0x08
    13b4:	89 85       	ldd	r24, Y+9	; 0x09
    13b6:	9a 85       	ldd	r25, Y+10	; 0x0a
    13b8:	20 e0       	ldi	r18, 0x00	; 0
    13ba:	30 e0       	ldi	r19, 0x00	; 0
    13bc:	40 e8       	ldi	r20, 0x80	; 128
    13be:	5f e3       	ldi	r21, 0x3F	; 63
    13c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13c4:	88 23       	and	r24, r24
    13c6:	2c f4       	brge	.+10     	; 0x13d2 <checking_password_after_operation+0x1b8>
		__ticks = 1;
    13c8:	81 e0       	ldi	r24, 0x01	; 1
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	9e 83       	std	Y+6, r25	; 0x06
    13ce:	8d 83       	std	Y+5, r24	; 0x05
    13d0:	3f c0       	rjmp	.+126    	; 0x1450 <checking_password_after_operation+0x236>
	else if (__tmp > 65535)
    13d2:	6f 81       	ldd	r22, Y+7	; 0x07
    13d4:	78 85       	ldd	r23, Y+8	; 0x08
    13d6:	89 85       	ldd	r24, Y+9	; 0x09
    13d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    13da:	20 e0       	ldi	r18, 0x00	; 0
    13dc:	3f ef       	ldi	r19, 0xFF	; 255
    13de:	4f e7       	ldi	r20, 0x7F	; 127
    13e0:	57 e4       	ldi	r21, 0x47	; 71
    13e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13e6:	18 16       	cp	r1, r24
    13e8:	4c f5       	brge	.+82     	; 0x143c <checking_password_after_operation+0x222>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13ea:	6b 85       	ldd	r22, Y+11	; 0x0b
    13ec:	7c 85       	ldd	r23, Y+12	; 0x0c
    13ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    13f0:	9e 85       	ldd	r25, Y+14	; 0x0e
    13f2:	20 e0       	ldi	r18, 0x00	; 0
    13f4:	30 e0       	ldi	r19, 0x00	; 0
    13f6:	40 e2       	ldi	r20, 0x20	; 32
    13f8:	51 e4       	ldi	r21, 0x41	; 65
    13fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13fe:	dc 01       	movw	r26, r24
    1400:	cb 01       	movw	r24, r22
    1402:	bc 01       	movw	r22, r24
    1404:	cd 01       	movw	r24, r26
    1406:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    140a:	dc 01       	movw	r26, r24
    140c:	cb 01       	movw	r24, r22
    140e:	9e 83       	std	Y+6, r25	; 0x06
    1410:	8d 83       	std	Y+5, r24	; 0x05
    1412:	0f c0       	rjmp	.+30     	; 0x1432 <checking_password_after_operation+0x218>
    1414:	89 e1       	ldi	r24, 0x19	; 25
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	9c 83       	std	Y+4, r25	; 0x04
    141a:	8b 83       	std	Y+3, r24	; 0x03
    141c:	8b 81       	ldd	r24, Y+3	; 0x03
    141e:	9c 81       	ldd	r25, Y+4	; 0x04
    1420:	01 97       	sbiw	r24, 0x01	; 1
    1422:	f1 f7       	brne	.-4      	; 0x1420 <checking_password_after_operation+0x206>
    1424:	9c 83       	std	Y+4, r25	; 0x04
    1426:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1428:	8d 81       	ldd	r24, Y+5	; 0x05
    142a:	9e 81       	ldd	r25, Y+6	; 0x06
    142c:	01 97       	sbiw	r24, 0x01	; 1
    142e:	9e 83       	std	Y+6, r25	; 0x06
    1430:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1432:	8d 81       	ldd	r24, Y+5	; 0x05
    1434:	9e 81       	ldd	r25, Y+6	; 0x06
    1436:	00 97       	sbiw	r24, 0x00	; 0
    1438:	69 f7       	brne	.-38     	; 0x1414 <checking_password_after_operation+0x1fa>
    143a:	14 c0       	rjmp	.+40     	; 0x1464 <checking_password_after_operation+0x24a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    143c:	6f 81       	ldd	r22, Y+7	; 0x07
    143e:	78 85       	ldd	r23, Y+8	; 0x08
    1440:	89 85       	ldd	r24, Y+9	; 0x09
    1442:	9a 85       	ldd	r25, Y+10	; 0x0a
    1444:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1448:	dc 01       	movw	r26, r24
    144a:	cb 01       	movw	r24, r22
    144c:	9e 83       	std	Y+6, r25	; 0x06
    144e:	8d 83       	std	Y+5, r24	; 0x05
    1450:	8d 81       	ldd	r24, Y+5	; 0x05
    1452:	9e 81       	ldd	r25, Y+6	; 0x06
    1454:	9a 83       	std	Y+2, r25	; 0x02
    1456:	89 83       	std	Y+1, r24	; 0x01
    1458:	89 81       	ldd	r24, Y+1	; 0x01
    145a:	9a 81       	ldd	r25, Y+2	; 0x02
    145c:	01 97       	sbiw	r24, 0x01	; 1
    145e:	f1 f7       	brne	.-4      	; 0x145c <checking_password_after_operation+0x242>
    1460:	9a 83       	std	Y+2, r25	; 0x02
    1462:	89 83       	std	Y+1, r24	; 0x01
			//LCD_intgerToString(key); /* display the pressed keypad switch */
		}
	}
	UART_sendByte(SEND_PASSWORD);
	while(UART_recieveByte() != MC2_READY){}
	for(i=0; i<PASSWORD_SIZE; i++){
    1464:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1466:	8f 5f       	subi	r24, 0xFF	; 255
    1468:	8e 8f       	std	Y+30, r24	; 0x1e
    146a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    146c:	85 30       	cpi	r24, 0x05	; 5
    146e:	08 f4       	brcc	.+2      	; 0x1472 <checking_password_after_operation+0x258>
    1470:	7e cf       	rjmp	.-260    	; 0x136e <checking_password_after_operation+0x154>
		UART_sendByte(g_password[i]);/* Send each number of the password alone to MC2 */
		_delay_ms(3000);
	}


	mismatch_3_or_less();
    1472:	0e 94 44 0a 	call	0x1488	; 0x1488 <mismatch_3_or_less>
}
    1476:	6e 96       	adiw	r28, 0x1e	; 30
    1478:	0f b6       	in	r0, 0x3f	; 63
    147a:	f8 94       	cli
    147c:	de bf       	out	0x3e, r29	; 62
    147e:	0f be       	out	0x3f, r0	; 63
    1480:	cd bf       	out	0x3d, r28	; 61
    1482:	cf 91       	pop	r28
    1484:	df 91       	pop	r29
    1486:	08 95       	ret

00001488 <mismatch_3_or_less>:
/*
 * Description:
 * check whether the sent password to MC2 is correct or wrong
 */
void mismatch_3_or_less(void){
    1488:	df 93       	push	r29
    148a:	cf 93       	push	r28
    148c:	cd b7       	in	r28, 0x3d	; 61
    148e:	de b7       	in	r29, 0x3e	; 62
    1490:	62 97       	sbiw	r28, 0x12	; 18
    1492:	0f b6       	in	r0, 0x3f	; 63
    1494:	f8 94       	cli
    1496:	de bf       	out	0x3e, r29	; 62
    1498:	0f be       	out	0x3f, r0	; 63
    149a:	cd bf       	out	0x3d, r28	; 61

	while(UART_recieveByte() != PASSWORD_STATUS){}
    149c:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <UART_recieveByte>
    14a0:	80 36       	cpi	r24, 0x60	; 96
    14a2:	e1 f7       	brne	.-8      	; 0x149c <mismatch_3_or_less+0x14>

	if(g_operation == '+'){
    14a4:	80 91 fb 00 	lds	r24, 0x00FB
    14a8:	8b 32       	cpi	r24, 0x2B	; 43
    14aa:	01 f5       	brne	.+64     	; 0x14ec <mismatch_3_or_less+0x64>
		TIMER0_ConfigType Timer_Config = {OVF_MODE,CLK_1024, 0, 0};
    14ac:	1f 86       	std	Y+15, r1	; 0x0f
    14ae:	85 e0       	ldi	r24, 0x05	; 5
    14b0:	88 8b       	std	Y+16, r24	; 0x10
    14b2:	19 8a       	std	Y+17, r1	; 0x11
    14b4:	1a 8a       	std	Y+18, r1	; 0x12
		SREG  |= (1<<7);    //Enable global interrupts in MC by setting the I-Bit.
    14b6:	af e5       	ldi	r26, 0x5F	; 95
    14b8:	b0 e0       	ldi	r27, 0x00	; 0
    14ba:	ef e5       	ldi	r30, 0x5F	; 95
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	80 81       	ld	r24, Z
    14c0:	80 68       	ori	r24, 0x80	; 128
    14c2:	8c 93       	st	X, r24
		LCD_clearScreen();
    14c4:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <LCD_clearScreen>
		UART_sendByte(USE_MOTOR);
    14c8:	80 e7       	ldi	r24, 0x70	; 112
    14ca:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <UART_sendByte>
		g_countMismatch=0;
    14ce:	10 92 fa 00 	sts	0x00FA, r1

		Timer0_setCallBack(motor_CW_15sec);
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	9b e0       	ldi	r25, 0x0B	; 11
    14d6:	0e 94 23 15 	call	0x2a46	; 0x2a46 <Timer0_setCallBack>
		LCD_displayString("Door is opening ");
    14da:	8b eb       	ldi	r24, 0xBB	; 187
    14dc:	90 e0       	ldi	r25, 0x00	; 0
    14de:	0e 94 b3 13 	call	0x2766	; 0x2766 <LCD_displayString>

		Timer0_Init(&Timer_Config);
    14e2:	ce 01       	movw	r24, r28
    14e4:	0f 96       	adiw	r24, 0x0f	; 15
    14e6:	0e 94 ca 14 	call	0x2994	; 0x2994 <Timer0_Init>
    14ea:	82 c0       	rjmp	.+260    	; 0x15f0 <mismatch_3_or_less+0x168>

	}
	else if(g_operation == '-'){
    14ec:	80 91 fb 00 	lds	r24, 0x00FB
    14f0:	8d 32       	cpi	r24, 0x2D	; 45
    14f2:	09 f0       	breq	.+2      	; 0x14f6 <mismatch_3_or_less+0x6e>
    14f4:	7d c0       	rjmp	.+250    	; 0x15f0 <mismatch_3_or_less+0x168>


		LCD_clearScreen();
    14f6:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <LCD_clearScreen>
		g_countMismatch=0;
    14fa:	10 92 fa 00 	sts	0x00FA, r1
		enter_password_first_time();
    14fe:	0e 94 af 06 	call	0xd5e	; 0xd5e <enter_password_first_time>
		UART_sendByte(CHANGE_PASS);
    1502:	80 e9       	ldi	r24, 0x90	; 144
    1504:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <UART_sendByte>
    1508:	80 e0       	ldi	r24, 0x00	; 0
    150a:	90 e8       	ldi	r25, 0x80	; 128
    150c:	ab e3       	ldi	r26, 0x3B	; 59
    150e:	b5 e4       	ldi	r27, 0x45	; 69
    1510:	8b 87       	std	Y+11, r24	; 0x0b
    1512:	9c 87       	std	Y+12, r25	; 0x0c
    1514:	ad 87       	std	Y+13, r26	; 0x0d
    1516:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1518:	6b 85       	ldd	r22, Y+11	; 0x0b
    151a:	7c 85       	ldd	r23, Y+12	; 0x0c
    151c:	8d 85       	ldd	r24, Y+13	; 0x0d
    151e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1520:	20 e0       	ldi	r18, 0x00	; 0
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	4a e7       	ldi	r20, 0x7A	; 122
    1526:	53 e4       	ldi	r21, 0x43	; 67
    1528:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    152c:	dc 01       	movw	r26, r24
    152e:	cb 01       	movw	r24, r22
    1530:	8f 83       	std	Y+7, r24	; 0x07
    1532:	98 87       	std	Y+8, r25	; 0x08
    1534:	a9 87       	std	Y+9, r26	; 0x09
    1536:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1538:	6f 81       	ldd	r22, Y+7	; 0x07
    153a:	78 85       	ldd	r23, Y+8	; 0x08
    153c:	89 85       	ldd	r24, Y+9	; 0x09
    153e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	40 e8       	ldi	r20, 0x80	; 128
    1546:	5f e3       	ldi	r21, 0x3F	; 63
    1548:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    154c:	88 23       	and	r24, r24
    154e:	2c f4       	brge	.+10     	; 0x155a <mismatch_3_or_less+0xd2>
		__ticks = 1;
    1550:	81 e0       	ldi	r24, 0x01	; 1
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	9e 83       	std	Y+6, r25	; 0x06
    1556:	8d 83       	std	Y+5, r24	; 0x05
    1558:	3f c0       	rjmp	.+126    	; 0x15d8 <mismatch_3_or_less+0x150>
	else if (__tmp > 65535)
    155a:	6f 81       	ldd	r22, Y+7	; 0x07
    155c:	78 85       	ldd	r23, Y+8	; 0x08
    155e:	89 85       	ldd	r24, Y+9	; 0x09
    1560:	9a 85       	ldd	r25, Y+10	; 0x0a
    1562:	20 e0       	ldi	r18, 0x00	; 0
    1564:	3f ef       	ldi	r19, 0xFF	; 255
    1566:	4f e7       	ldi	r20, 0x7F	; 127
    1568:	57 e4       	ldi	r21, 0x47	; 71
    156a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    156e:	18 16       	cp	r1, r24
    1570:	4c f5       	brge	.+82     	; 0x15c4 <mismatch_3_or_less+0x13c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1572:	6b 85       	ldd	r22, Y+11	; 0x0b
    1574:	7c 85       	ldd	r23, Y+12	; 0x0c
    1576:	8d 85       	ldd	r24, Y+13	; 0x0d
    1578:	9e 85       	ldd	r25, Y+14	; 0x0e
    157a:	20 e0       	ldi	r18, 0x00	; 0
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	40 e2       	ldi	r20, 0x20	; 32
    1580:	51 e4       	ldi	r21, 0x41	; 65
    1582:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1586:	dc 01       	movw	r26, r24
    1588:	cb 01       	movw	r24, r22
    158a:	bc 01       	movw	r22, r24
    158c:	cd 01       	movw	r24, r26
    158e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1592:	dc 01       	movw	r26, r24
    1594:	cb 01       	movw	r24, r22
    1596:	9e 83       	std	Y+6, r25	; 0x06
    1598:	8d 83       	std	Y+5, r24	; 0x05
    159a:	0f c0       	rjmp	.+30     	; 0x15ba <mismatch_3_or_less+0x132>
    159c:	89 e1       	ldi	r24, 0x19	; 25
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	9c 83       	std	Y+4, r25	; 0x04
    15a2:	8b 83       	std	Y+3, r24	; 0x03
    15a4:	8b 81       	ldd	r24, Y+3	; 0x03
    15a6:	9c 81       	ldd	r25, Y+4	; 0x04
    15a8:	01 97       	sbiw	r24, 0x01	; 1
    15aa:	f1 f7       	brne	.-4      	; 0x15a8 <mismatch_3_or_less+0x120>
    15ac:	9c 83       	std	Y+4, r25	; 0x04
    15ae:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15b0:	8d 81       	ldd	r24, Y+5	; 0x05
    15b2:	9e 81       	ldd	r25, Y+6	; 0x06
    15b4:	01 97       	sbiw	r24, 0x01	; 1
    15b6:	9e 83       	std	Y+6, r25	; 0x06
    15b8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15ba:	8d 81       	ldd	r24, Y+5	; 0x05
    15bc:	9e 81       	ldd	r25, Y+6	; 0x06
    15be:	00 97       	sbiw	r24, 0x00	; 0
    15c0:	69 f7       	brne	.-38     	; 0x159c <mismatch_3_or_less+0x114>
    15c2:	14 c0       	rjmp	.+40     	; 0x15ec <mismatch_3_or_less+0x164>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15c4:	6f 81       	ldd	r22, Y+7	; 0x07
    15c6:	78 85       	ldd	r23, Y+8	; 0x08
    15c8:	89 85       	ldd	r24, Y+9	; 0x09
    15ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    15cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15d0:	dc 01       	movw	r26, r24
    15d2:	cb 01       	movw	r24, r22
    15d4:	9e 83       	std	Y+6, r25	; 0x06
    15d6:	8d 83       	std	Y+5, r24	; 0x05
    15d8:	8d 81       	ldd	r24, Y+5	; 0x05
    15da:	9e 81       	ldd	r25, Y+6	; 0x06
    15dc:	9a 83       	std	Y+2, r25	; 0x02
    15de:	89 83       	std	Y+1, r24	; 0x01
    15e0:	89 81       	ldd	r24, Y+1	; 0x01
    15e2:	9a 81       	ldd	r25, Y+2	; 0x02
    15e4:	01 97       	sbiw	r24, 0x01	; 1
    15e6:	f1 f7       	brne	.-4      	; 0x15e4 <mismatch_3_or_less+0x15c>
    15e8:	9a 83       	std	Y+2, r25	; 0x02
    15ea:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(3000);
		check_password();
    15ec:	0e 94 d8 05 	call	0xbb0	; 0xbb0 <check_password>
			enter_password_first_time();
			check_password();
		}*/
	//}

}
    15f0:	62 96       	adiw	r28, 0x12	; 18
    15f2:	0f b6       	in	r0, 0x3f	; 63
    15f4:	f8 94       	cli
    15f6:	de bf       	out	0x3e, r29	; 62
    15f8:	0f be       	out	0x3f, r0	; 63
    15fa:	cd bf       	out	0x3d, r28	; 61
    15fc:	cf 91       	pop	r28
    15fe:	df 91       	pop	r29
    1600:	08 95       	ret

00001602 <motor_CW_15sec>:

void motor_CW_15sec(void){
    1602:	df 93       	push	r29
    1604:	cf 93       	push	r28
    1606:	cd b7       	in	r28, 0x3d	; 61
    1608:	de b7       	in	r29, 0x3e	; 62
	/*TIMER0_ConfigType Timer_Config = {OVF_MODE,CLK_1024, 0, 0};
	Timer0_Init(&Timer_Config);*/

	g_tick_motor++;
    160a:	80 91 fc 00 	lds	r24, 0x00FC
    160e:	8f 5f       	subi	r24, 0xFF	; 255
    1610:	80 93 fc 00 	sts	0x00FC, r24
		if(g_tick_motor == NUMBER_OF_OVERFLOWS_PER_SECOND)
    1614:	80 91 fc 00 	lds	r24, 0x00FC
    1618:	80 32       	cpi	r24, 0x20	; 32
    161a:	39 f4       	brne	.+14     	; 0x162a <motor_CW_15sec+0x28>
		{
			/*GPIO_writePin(PORTC_ID, PIN5_ID, LOGIC_HIGH);
			_delay_ms(2000);
			GPIO_writePin(PORTC_ID, PIN5_ID, LOGIC_LOW);*/
			g_tick_motor = 0;
    161c:	10 92 fc 00 	sts	0x00FC, r1
			g_seconds_motor++;
    1620:	80 91 fd 00 	lds	r24, 0x00FD
    1624:	8f 5f       	subi	r24, 0xFF	; 255
    1626:	80 93 fd 00 	sts	0x00FD, r24
		}

		if(g_seconds_motor == MOVING_MOTOR_SEC){
    162a:	80 91 fd 00 	lds	r24, 0x00FD
    162e:	8f 30       	cpi	r24, 0x0F	; 15
    1630:	61 f4       	brne	.+24     	; 0x164a <motor_CW_15sec+0x48>
			LCD_clearScreen();
    1632:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <LCD_clearScreen>
			g_seconds_motor=0;
    1636:	10 92 fd 00 	sts	0x00FD, r1
			Timer0_setCallBack(motor_holding_3sec);
    163a:	88 e2       	ldi	r24, 0x28	; 40
    163c:	9b e0       	ldi	r25, 0x0B	; 11
    163e:	0e 94 23 15 	call	0x2a46	; 0x2a46 <Timer0_setCallBack>
			LCD_displayString("Door is Open!");
    1642:	8c ec       	ldi	r24, 0xCC	; 204
    1644:	90 e0       	ldi	r25, 0x00	; 0
    1646:	0e 94 b3 13 	call	0x2766	; 0x2766 <LCD_displayString>


		}
}
    164a:	cf 91       	pop	r28
    164c:	df 91       	pop	r29
    164e:	08 95       	ret

00001650 <motor_holding_3sec>:

void motor_holding_3sec(void){
    1650:	df 93       	push	r29
    1652:	cf 93       	push	r28
    1654:	cd b7       	in	r28, 0x3d	; 61
    1656:	de b7       	in	r29, 0x3e	; 62

	g_tick_motor++;
    1658:	80 91 fc 00 	lds	r24, 0x00FC
    165c:	8f 5f       	subi	r24, 0xFF	; 255
    165e:	80 93 fc 00 	sts	0x00FC, r24
	if(g_tick_motor == NUMBER_OF_OVERFLOWS_PER_SECOND)
    1662:	80 91 fc 00 	lds	r24, 0x00FC
    1666:	80 32       	cpi	r24, 0x20	; 32
    1668:	39 f4       	brne	.+14     	; 0x1678 <motor_holding_3sec+0x28>
	{
		/*GPIO_writePin(PORTC_ID, PIN5_ID, LOGIC_HIGH);
		_delay_ms(2000);
		GPIO_writePin(PORTC_ID, PIN5_ID, LOGIC_LOW);*/
		g_tick_motor = 0;
    166a:	10 92 fc 00 	sts	0x00FC, r1
		g_seconds_motor++;
    166e:	80 91 fd 00 	lds	r24, 0x00FD
    1672:	8f 5f       	subi	r24, 0xFF	; 255
    1674:	80 93 fd 00 	sts	0x00FD, r24
	}

	if(g_seconds_motor == HOLDING_MOTOR_SEC){
    1678:	80 91 fd 00 	lds	r24, 0x00FD
    167c:	83 30       	cpi	r24, 0x03	; 3
    167e:	61 f4       	brne	.+24     	; 0x1698 <motor_holding_3sec+0x48>
		LCD_clearScreen();
    1680:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <LCD_clearScreen>
		g_seconds_motor=0;
    1684:	10 92 fd 00 	sts	0x00FD, r1
		Timer0_setCallBack(motor_ACW_15sec);
    1688:	8f e4       	ldi	r24, 0x4F	; 79
    168a:	9b e0       	ldi	r25, 0x0B	; 11
    168c:	0e 94 23 15 	call	0x2a46	; 0x2a46 <Timer0_setCallBack>
		LCD_displayString("Door is Closing");
    1690:	8a ed       	ldi	r24, 0xDA	; 218
    1692:	90 e0       	ldi	r25, 0x00	; 0
    1694:	0e 94 b3 13 	call	0x2766	; 0x2766 <LCD_displayString>

	}
}
    1698:	cf 91       	pop	r28
    169a:	df 91       	pop	r29
    169c:	08 95       	ret

0000169e <motor_ACW_15sec>:
void motor_ACW_15sec(void){
    169e:	df 93       	push	r29
    16a0:	cf 93       	push	r28
    16a2:	cd b7       	in	r28, 0x3d	; 61
    16a4:	de b7       	in	r29, 0x3e	; 62
	/*TIMER0_ConfigType Timer_Config = {OVF_MODE,CLK_1024, 0, 0};
	Timer0_Init(&Timer_Config);*/

	g_tick_motor++;
    16a6:	80 91 fc 00 	lds	r24, 0x00FC
    16aa:	8f 5f       	subi	r24, 0xFF	; 255
    16ac:	80 93 fc 00 	sts	0x00FC, r24
	if(g_tick_motor == NUMBER_OF_OVERFLOWS_PER_SECOND)
    16b0:	80 91 fc 00 	lds	r24, 0x00FC
    16b4:	80 32       	cpi	r24, 0x20	; 32
    16b6:	39 f4       	brne	.+14     	; 0x16c6 <motor_ACW_15sec+0x28>
	{
		/*GPIO_writePin(PORTA_ID, PIN5_ID, LOGIC_HIGH);
			_delay_ms(2000);
			GPIO_writePin(PORTA_ID, PIN5_ID, LOGIC_LOW);*/
		g_tick_motor = 0;
    16b8:	10 92 fc 00 	sts	0x00FC, r1
		g_seconds_motor++;
    16bc:	80 91 fd 00 	lds	r24, 0x00FD
    16c0:	8f 5f       	subi	r24, 0xFF	; 255
    16c2:	80 93 fd 00 	sts	0x00FD, r24
	}

	if(g_seconds_motor == MOVING_MOTOR_SEC){
    16c6:	80 91 fd 00 	lds	r24, 0x00FD
    16ca:	8f 30       	cpi	r24, 0x0F	; 15
    16cc:	41 f4       	brne	.+16     	; 0x16de <motor_ACW_15sec+0x40>

		g_seconds_motor=0;
    16ce:	10 92 fd 00 	sts	0x00FD, r1
		Timer0_DeInit();
    16d2:	0e 94 10 15 	call	0x2a20	; 0x2a20 <Timer0_DeInit>
		LCD_clearScreen();
    16d6:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <LCD_clearScreen>
		display_main_options();
    16da:	0e 94 f0 07 	call	0xfe0	; 0xfe0 <display_main_options>

	}
}
    16de:	cf 91       	pop	r28
    16e0:	df 91       	pop	r29
    16e2:	08 95       	ret

000016e4 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    16e4:	df 93       	push	r29
    16e6:	cf 93       	push	r28
    16e8:	00 d0       	rcall	.+0      	; 0x16ea <GPIO_setupPinDirection+0x6>
    16ea:	00 d0       	rcall	.+0      	; 0x16ec <GPIO_setupPinDirection+0x8>
    16ec:	0f 92       	push	r0
    16ee:	cd b7       	in	r28, 0x3d	; 61
    16f0:	de b7       	in	r29, 0x3e	; 62
    16f2:	89 83       	std	Y+1, r24	; 0x01
    16f4:	6a 83       	std	Y+2, r22	; 0x02
    16f6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    16f8:	8a 81       	ldd	r24, Y+2	; 0x02
    16fa:	88 30       	cpi	r24, 0x08	; 8
    16fc:	08 f0       	brcs	.+2      	; 0x1700 <GPIO_setupPinDirection+0x1c>
    16fe:	d5 c0       	rjmp	.+426    	; 0x18aa <GPIO_setupPinDirection+0x1c6>
    1700:	89 81       	ldd	r24, Y+1	; 0x01
    1702:	84 30       	cpi	r24, 0x04	; 4
    1704:	08 f0       	brcs	.+2      	; 0x1708 <GPIO_setupPinDirection+0x24>
    1706:	d1 c0       	rjmp	.+418    	; 0x18aa <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1708:	89 81       	ldd	r24, Y+1	; 0x01
    170a:	28 2f       	mov	r18, r24
    170c:	30 e0       	ldi	r19, 0x00	; 0
    170e:	3d 83       	std	Y+5, r19	; 0x05
    1710:	2c 83       	std	Y+4, r18	; 0x04
    1712:	8c 81       	ldd	r24, Y+4	; 0x04
    1714:	9d 81       	ldd	r25, Y+5	; 0x05
    1716:	81 30       	cpi	r24, 0x01	; 1
    1718:	91 05       	cpc	r25, r1
    171a:	09 f4       	brne	.+2      	; 0x171e <GPIO_setupPinDirection+0x3a>
    171c:	43 c0       	rjmp	.+134    	; 0x17a4 <GPIO_setupPinDirection+0xc0>
    171e:	2c 81       	ldd	r18, Y+4	; 0x04
    1720:	3d 81       	ldd	r19, Y+5	; 0x05
    1722:	22 30       	cpi	r18, 0x02	; 2
    1724:	31 05       	cpc	r19, r1
    1726:	2c f4       	brge	.+10     	; 0x1732 <GPIO_setupPinDirection+0x4e>
    1728:	8c 81       	ldd	r24, Y+4	; 0x04
    172a:	9d 81       	ldd	r25, Y+5	; 0x05
    172c:	00 97       	sbiw	r24, 0x00	; 0
    172e:	71 f0       	breq	.+28     	; 0x174c <GPIO_setupPinDirection+0x68>
    1730:	bc c0       	rjmp	.+376    	; 0x18aa <GPIO_setupPinDirection+0x1c6>
    1732:	2c 81       	ldd	r18, Y+4	; 0x04
    1734:	3d 81       	ldd	r19, Y+5	; 0x05
    1736:	22 30       	cpi	r18, 0x02	; 2
    1738:	31 05       	cpc	r19, r1
    173a:	09 f4       	brne	.+2      	; 0x173e <GPIO_setupPinDirection+0x5a>
    173c:	5f c0       	rjmp	.+190    	; 0x17fc <GPIO_setupPinDirection+0x118>
    173e:	8c 81       	ldd	r24, Y+4	; 0x04
    1740:	9d 81       	ldd	r25, Y+5	; 0x05
    1742:	83 30       	cpi	r24, 0x03	; 3
    1744:	91 05       	cpc	r25, r1
    1746:	09 f4       	brne	.+2      	; 0x174a <GPIO_setupPinDirection+0x66>
    1748:	85 c0       	rjmp	.+266    	; 0x1854 <GPIO_setupPinDirection+0x170>
    174a:	af c0       	rjmp	.+350    	; 0x18aa <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    174c:	8b 81       	ldd	r24, Y+3	; 0x03
    174e:	81 30       	cpi	r24, 0x01	; 1
    1750:	a1 f4       	brne	.+40     	; 0x177a <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1752:	aa e3       	ldi	r26, 0x3A	; 58
    1754:	b0 e0       	ldi	r27, 0x00	; 0
    1756:	ea e3       	ldi	r30, 0x3A	; 58
    1758:	f0 e0       	ldi	r31, 0x00	; 0
    175a:	80 81       	ld	r24, Z
    175c:	48 2f       	mov	r20, r24
    175e:	8a 81       	ldd	r24, Y+2	; 0x02
    1760:	28 2f       	mov	r18, r24
    1762:	30 e0       	ldi	r19, 0x00	; 0
    1764:	81 e0       	ldi	r24, 0x01	; 1
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	02 2e       	mov	r0, r18
    176a:	02 c0       	rjmp	.+4      	; 0x1770 <GPIO_setupPinDirection+0x8c>
    176c:	88 0f       	add	r24, r24
    176e:	99 1f       	adc	r25, r25
    1770:	0a 94       	dec	r0
    1772:	e2 f7       	brpl	.-8      	; 0x176c <GPIO_setupPinDirection+0x88>
    1774:	84 2b       	or	r24, r20
    1776:	8c 93       	st	X, r24
    1778:	98 c0       	rjmp	.+304    	; 0x18aa <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    177a:	aa e3       	ldi	r26, 0x3A	; 58
    177c:	b0 e0       	ldi	r27, 0x00	; 0
    177e:	ea e3       	ldi	r30, 0x3A	; 58
    1780:	f0 e0       	ldi	r31, 0x00	; 0
    1782:	80 81       	ld	r24, Z
    1784:	48 2f       	mov	r20, r24
    1786:	8a 81       	ldd	r24, Y+2	; 0x02
    1788:	28 2f       	mov	r18, r24
    178a:	30 e0       	ldi	r19, 0x00	; 0
    178c:	81 e0       	ldi	r24, 0x01	; 1
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	02 2e       	mov	r0, r18
    1792:	02 c0       	rjmp	.+4      	; 0x1798 <GPIO_setupPinDirection+0xb4>
    1794:	88 0f       	add	r24, r24
    1796:	99 1f       	adc	r25, r25
    1798:	0a 94       	dec	r0
    179a:	e2 f7       	brpl	.-8      	; 0x1794 <GPIO_setupPinDirection+0xb0>
    179c:	80 95       	com	r24
    179e:	84 23       	and	r24, r20
    17a0:	8c 93       	st	X, r24
    17a2:	83 c0       	rjmp	.+262    	; 0x18aa <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    17a4:	8b 81       	ldd	r24, Y+3	; 0x03
    17a6:	81 30       	cpi	r24, 0x01	; 1
    17a8:	a1 f4       	brne	.+40     	; 0x17d2 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    17aa:	a7 e3       	ldi	r26, 0x37	; 55
    17ac:	b0 e0       	ldi	r27, 0x00	; 0
    17ae:	e7 e3       	ldi	r30, 0x37	; 55
    17b0:	f0 e0       	ldi	r31, 0x00	; 0
    17b2:	80 81       	ld	r24, Z
    17b4:	48 2f       	mov	r20, r24
    17b6:	8a 81       	ldd	r24, Y+2	; 0x02
    17b8:	28 2f       	mov	r18, r24
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	90 e0       	ldi	r25, 0x00	; 0
    17c0:	02 2e       	mov	r0, r18
    17c2:	02 c0       	rjmp	.+4      	; 0x17c8 <GPIO_setupPinDirection+0xe4>
    17c4:	88 0f       	add	r24, r24
    17c6:	99 1f       	adc	r25, r25
    17c8:	0a 94       	dec	r0
    17ca:	e2 f7       	brpl	.-8      	; 0x17c4 <GPIO_setupPinDirection+0xe0>
    17cc:	84 2b       	or	r24, r20
    17ce:	8c 93       	st	X, r24
    17d0:	6c c0       	rjmp	.+216    	; 0x18aa <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    17d2:	a7 e3       	ldi	r26, 0x37	; 55
    17d4:	b0 e0       	ldi	r27, 0x00	; 0
    17d6:	e7 e3       	ldi	r30, 0x37	; 55
    17d8:	f0 e0       	ldi	r31, 0x00	; 0
    17da:	80 81       	ld	r24, Z
    17dc:	48 2f       	mov	r20, r24
    17de:	8a 81       	ldd	r24, Y+2	; 0x02
    17e0:	28 2f       	mov	r18, r24
    17e2:	30 e0       	ldi	r19, 0x00	; 0
    17e4:	81 e0       	ldi	r24, 0x01	; 1
    17e6:	90 e0       	ldi	r25, 0x00	; 0
    17e8:	02 2e       	mov	r0, r18
    17ea:	02 c0       	rjmp	.+4      	; 0x17f0 <GPIO_setupPinDirection+0x10c>
    17ec:	88 0f       	add	r24, r24
    17ee:	99 1f       	adc	r25, r25
    17f0:	0a 94       	dec	r0
    17f2:	e2 f7       	brpl	.-8      	; 0x17ec <GPIO_setupPinDirection+0x108>
    17f4:	80 95       	com	r24
    17f6:	84 23       	and	r24, r20
    17f8:	8c 93       	st	X, r24
    17fa:	57 c0       	rjmp	.+174    	; 0x18aa <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    17fc:	8b 81       	ldd	r24, Y+3	; 0x03
    17fe:	81 30       	cpi	r24, 0x01	; 1
    1800:	a1 f4       	brne	.+40     	; 0x182a <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1802:	a4 e3       	ldi	r26, 0x34	; 52
    1804:	b0 e0       	ldi	r27, 0x00	; 0
    1806:	e4 e3       	ldi	r30, 0x34	; 52
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	48 2f       	mov	r20, r24
    180e:	8a 81       	ldd	r24, Y+2	; 0x02
    1810:	28 2f       	mov	r18, r24
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	81 e0       	ldi	r24, 0x01	; 1
    1816:	90 e0       	ldi	r25, 0x00	; 0
    1818:	02 2e       	mov	r0, r18
    181a:	02 c0       	rjmp	.+4      	; 0x1820 <GPIO_setupPinDirection+0x13c>
    181c:	88 0f       	add	r24, r24
    181e:	99 1f       	adc	r25, r25
    1820:	0a 94       	dec	r0
    1822:	e2 f7       	brpl	.-8      	; 0x181c <GPIO_setupPinDirection+0x138>
    1824:	84 2b       	or	r24, r20
    1826:	8c 93       	st	X, r24
    1828:	40 c0       	rjmp	.+128    	; 0x18aa <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    182a:	a4 e3       	ldi	r26, 0x34	; 52
    182c:	b0 e0       	ldi	r27, 0x00	; 0
    182e:	e4 e3       	ldi	r30, 0x34	; 52
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	80 81       	ld	r24, Z
    1834:	48 2f       	mov	r20, r24
    1836:	8a 81       	ldd	r24, Y+2	; 0x02
    1838:	28 2f       	mov	r18, r24
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	81 e0       	ldi	r24, 0x01	; 1
    183e:	90 e0       	ldi	r25, 0x00	; 0
    1840:	02 2e       	mov	r0, r18
    1842:	02 c0       	rjmp	.+4      	; 0x1848 <GPIO_setupPinDirection+0x164>
    1844:	88 0f       	add	r24, r24
    1846:	99 1f       	adc	r25, r25
    1848:	0a 94       	dec	r0
    184a:	e2 f7       	brpl	.-8      	; 0x1844 <GPIO_setupPinDirection+0x160>
    184c:	80 95       	com	r24
    184e:	84 23       	and	r24, r20
    1850:	8c 93       	st	X, r24
    1852:	2b c0       	rjmp	.+86     	; 0x18aa <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1854:	8b 81       	ldd	r24, Y+3	; 0x03
    1856:	81 30       	cpi	r24, 0x01	; 1
    1858:	a1 f4       	brne	.+40     	; 0x1882 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    185a:	a1 e3       	ldi	r26, 0x31	; 49
    185c:	b0 e0       	ldi	r27, 0x00	; 0
    185e:	e1 e3       	ldi	r30, 0x31	; 49
    1860:	f0 e0       	ldi	r31, 0x00	; 0
    1862:	80 81       	ld	r24, Z
    1864:	48 2f       	mov	r20, r24
    1866:	8a 81       	ldd	r24, Y+2	; 0x02
    1868:	28 2f       	mov	r18, r24
    186a:	30 e0       	ldi	r19, 0x00	; 0
    186c:	81 e0       	ldi	r24, 0x01	; 1
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	02 2e       	mov	r0, r18
    1872:	02 c0       	rjmp	.+4      	; 0x1878 <GPIO_setupPinDirection+0x194>
    1874:	88 0f       	add	r24, r24
    1876:	99 1f       	adc	r25, r25
    1878:	0a 94       	dec	r0
    187a:	e2 f7       	brpl	.-8      	; 0x1874 <GPIO_setupPinDirection+0x190>
    187c:	84 2b       	or	r24, r20
    187e:	8c 93       	st	X, r24
    1880:	14 c0       	rjmp	.+40     	; 0x18aa <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1882:	a1 e3       	ldi	r26, 0x31	; 49
    1884:	b0 e0       	ldi	r27, 0x00	; 0
    1886:	e1 e3       	ldi	r30, 0x31	; 49
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	48 2f       	mov	r20, r24
    188e:	8a 81       	ldd	r24, Y+2	; 0x02
    1890:	28 2f       	mov	r18, r24
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	81 e0       	ldi	r24, 0x01	; 1
    1896:	90 e0       	ldi	r25, 0x00	; 0
    1898:	02 2e       	mov	r0, r18
    189a:	02 c0       	rjmp	.+4      	; 0x18a0 <GPIO_setupPinDirection+0x1bc>
    189c:	88 0f       	add	r24, r24
    189e:	99 1f       	adc	r25, r25
    18a0:	0a 94       	dec	r0
    18a2:	e2 f7       	brpl	.-8      	; 0x189c <GPIO_setupPinDirection+0x1b8>
    18a4:	80 95       	com	r24
    18a6:	84 23       	and	r24, r20
    18a8:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    18aa:	0f 90       	pop	r0
    18ac:	0f 90       	pop	r0
    18ae:	0f 90       	pop	r0
    18b0:	0f 90       	pop	r0
    18b2:	0f 90       	pop	r0
    18b4:	cf 91       	pop	r28
    18b6:	df 91       	pop	r29
    18b8:	08 95       	ret

000018ba <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    18ba:	df 93       	push	r29
    18bc:	cf 93       	push	r28
    18be:	00 d0       	rcall	.+0      	; 0x18c0 <GPIO_writePin+0x6>
    18c0:	00 d0       	rcall	.+0      	; 0x18c2 <GPIO_writePin+0x8>
    18c2:	0f 92       	push	r0
    18c4:	cd b7       	in	r28, 0x3d	; 61
    18c6:	de b7       	in	r29, 0x3e	; 62
    18c8:	89 83       	std	Y+1, r24	; 0x01
    18ca:	6a 83       	std	Y+2, r22	; 0x02
    18cc:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    18ce:	8a 81       	ldd	r24, Y+2	; 0x02
    18d0:	88 30       	cpi	r24, 0x08	; 8
    18d2:	08 f0       	brcs	.+2      	; 0x18d6 <GPIO_writePin+0x1c>
    18d4:	d5 c0       	rjmp	.+426    	; 0x1a80 <GPIO_writePin+0x1c6>
    18d6:	89 81       	ldd	r24, Y+1	; 0x01
    18d8:	84 30       	cpi	r24, 0x04	; 4
    18da:	08 f0       	brcs	.+2      	; 0x18de <GPIO_writePin+0x24>
    18dc:	d1 c0       	rjmp	.+418    	; 0x1a80 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    18de:	89 81       	ldd	r24, Y+1	; 0x01
    18e0:	28 2f       	mov	r18, r24
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	3d 83       	std	Y+5, r19	; 0x05
    18e6:	2c 83       	std	Y+4, r18	; 0x04
    18e8:	8c 81       	ldd	r24, Y+4	; 0x04
    18ea:	9d 81       	ldd	r25, Y+5	; 0x05
    18ec:	81 30       	cpi	r24, 0x01	; 1
    18ee:	91 05       	cpc	r25, r1
    18f0:	09 f4       	brne	.+2      	; 0x18f4 <GPIO_writePin+0x3a>
    18f2:	43 c0       	rjmp	.+134    	; 0x197a <GPIO_writePin+0xc0>
    18f4:	2c 81       	ldd	r18, Y+4	; 0x04
    18f6:	3d 81       	ldd	r19, Y+5	; 0x05
    18f8:	22 30       	cpi	r18, 0x02	; 2
    18fa:	31 05       	cpc	r19, r1
    18fc:	2c f4       	brge	.+10     	; 0x1908 <GPIO_writePin+0x4e>
    18fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1900:	9d 81       	ldd	r25, Y+5	; 0x05
    1902:	00 97       	sbiw	r24, 0x00	; 0
    1904:	71 f0       	breq	.+28     	; 0x1922 <GPIO_writePin+0x68>
    1906:	bc c0       	rjmp	.+376    	; 0x1a80 <GPIO_writePin+0x1c6>
    1908:	2c 81       	ldd	r18, Y+4	; 0x04
    190a:	3d 81       	ldd	r19, Y+5	; 0x05
    190c:	22 30       	cpi	r18, 0x02	; 2
    190e:	31 05       	cpc	r19, r1
    1910:	09 f4       	brne	.+2      	; 0x1914 <GPIO_writePin+0x5a>
    1912:	5f c0       	rjmp	.+190    	; 0x19d2 <GPIO_writePin+0x118>
    1914:	8c 81       	ldd	r24, Y+4	; 0x04
    1916:	9d 81       	ldd	r25, Y+5	; 0x05
    1918:	83 30       	cpi	r24, 0x03	; 3
    191a:	91 05       	cpc	r25, r1
    191c:	09 f4       	brne	.+2      	; 0x1920 <GPIO_writePin+0x66>
    191e:	85 c0       	rjmp	.+266    	; 0x1a2a <GPIO_writePin+0x170>
    1920:	af c0       	rjmp	.+350    	; 0x1a80 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1922:	8b 81       	ldd	r24, Y+3	; 0x03
    1924:	81 30       	cpi	r24, 0x01	; 1
    1926:	a1 f4       	brne	.+40     	; 0x1950 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1928:	ab e3       	ldi	r26, 0x3B	; 59
    192a:	b0 e0       	ldi	r27, 0x00	; 0
    192c:	eb e3       	ldi	r30, 0x3B	; 59
    192e:	f0 e0       	ldi	r31, 0x00	; 0
    1930:	80 81       	ld	r24, Z
    1932:	48 2f       	mov	r20, r24
    1934:	8a 81       	ldd	r24, Y+2	; 0x02
    1936:	28 2f       	mov	r18, r24
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	81 e0       	ldi	r24, 0x01	; 1
    193c:	90 e0       	ldi	r25, 0x00	; 0
    193e:	02 2e       	mov	r0, r18
    1940:	02 c0       	rjmp	.+4      	; 0x1946 <GPIO_writePin+0x8c>
    1942:	88 0f       	add	r24, r24
    1944:	99 1f       	adc	r25, r25
    1946:	0a 94       	dec	r0
    1948:	e2 f7       	brpl	.-8      	; 0x1942 <GPIO_writePin+0x88>
    194a:	84 2b       	or	r24, r20
    194c:	8c 93       	st	X, r24
    194e:	98 c0       	rjmp	.+304    	; 0x1a80 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1950:	ab e3       	ldi	r26, 0x3B	; 59
    1952:	b0 e0       	ldi	r27, 0x00	; 0
    1954:	eb e3       	ldi	r30, 0x3B	; 59
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	48 2f       	mov	r20, r24
    195c:	8a 81       	ldd	r24, Y+2	; 0x02
    195e:	28 2f       	mov	r18, r24
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	02 2e       	mov	r0, r18
    1968:	02 c0       	rjmp	.+4      	; 0x196e <GPIO_writePin+0xb4>
    196a:	88 0f       	add	r24, r24
    196c:	99 1f       	adc	r25, r25
    196e:	0a 94       	dec	r0
    1970:	e2 f7       	brpl	.-8      	; 0x196a <GPIO_writePin+0xb0>
    1972:	80 95       	com	r24
    1974:	84 23       	and	r24, r20
    1976:	8c 93       	st	X, r24
    1978:	83 c0       	rjmp	.+262    	; 0x1a80 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    197a:	8b 81       	ldd	r24, Y+3	; 0x03
    197c:	81 30       	cpi	r24, 0x01	; 1
    197e:	a1 f4       	brne	.+40     	; 0x19a8 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1980:	a8 e3       	ldi	r26, 0x38	; 56
    1982:	b0 e0       	ldi	r27, 0x00	; 0
    1984:	e8 e3       	ldi	r30, 0x38	; 56
    1986:	f0 e0       	ldi	r31, 0x00	; 0
    1988:	80 81       	ld	r24, Z
    198a:	48 2f       	mov	r20, r24
    198c:	8a 81       	ldd	r24, Y+2	; 0x02
    198e:	28 2f       	mov	r18, r24
    1990:	30 e0       	ldi	r19, 0x00	; 0
    1992:	81 e0       	ldi	r24, 0x01	; 1
    1994:	90 e0       	ldi	r25, 0x00	; 0
    1996:	02 2e       	mov	r0, r18
    1998:	02 c0       	rjmp	.+4      	; 0x199e <GPIO_writePin+0xe4>
    199a:	88 0f       	add	r24, r24
    199c:	99 1f       	adc	r25, r25
    199e:	0a 94       	dec	r0
    19a0:	e2 f7       	brpl	.-8      	; 0x199a <GPIO_writePin+0xe0>
    19a2:	84 2b       	or	r24, r20
    19a4:	8c 93       	st	X, r24
    19a6:	6c c0       	rjmp	.+216    	; 0x1a80 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    19a8:	a8 e3       	ldi	r26, 0x38	; 56
    19aa:	b0 e0       	ldi	r27, 0x00	; 0
    19ac:	e8 e3       	ldi	r30, 0x38	; 56
    19ae:	f0 e0       	ldi	r31, 0x00	; 0
    19b0:	80 81       	ld	r24, Z
    19b2:	48 2f       	mov	r20, r24
    19b4:	8a 81       	ldd	r24, Y+2	; 0x02
    19b6:	28 2f       	mov	r18, r24
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	02 2e       	mov	r0, r18
    19c0:	02 c0       	rjmp	.+4      	; 0x19c6 <GPIO_writePin+0x10c>
    19c2:	88 0f       	add	r24, r24
    19c4:	99 1f       	adc	r25, r25
    19c6:	0a 94       	dec	r0
    19c8:	e2 f7       	brpl	.-8      	; 0x19c2 <GPIO_writePin+0x108>
    19ca:	80 95       	com	r24
    19cc:	84 23       	and	r24, r20
    19ce:	8c 93       	st	X, r24
    19d0:	57 c0       	rjmp	.+174    	; 0x1a80 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    19d2:	8b 81       	ldd	r24, Y+3	; 0x03
    19d4:	81 30       	cpi	r24, 0x01	; 1
    19d6:	a1 f4       	brne	.+40     	; 0x1a00 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    19d8:	a5 e3       	ldi	r26, 0x35	; 53
    19da:	b0 e0       	ldi	r27, 0x00	; 0
    19dc:	e5 e3       	ldi	r30, 0x35	; 53
    19de:	f0 e0       	ldi	r31, 0x00	; 0
    19e0:	80 81       	ld	r24, Z
    19e2:	48 2f       	mov	r20, r24
    19e4:	8a 81       	ldd	r24, Y+2	; 0x02
    19e6:	28 2f       	mov	r18, r24
    19e8:	30 e0       	ldi	r19, 0x00	; 0
    19ea:	81 e0       	ldi	r24, 0x01	; 1
    19ec:	90 e0       	ldi	r25, 0x00	; 0
    19ee:	02 2e       	mov	r0, r18
    19f0:	02 c0       	rjmp	.+4      	; 0x19f6 <GPIO_writePin+0x13c>
    19f2:	88 0f       	add	r24, r24
    19f4:	99 1f       	adc	r25, r25
    19f6:	0a 94       	dec	r0
    19f8:	e2 f7       	brpl	.-8      	; 0x19f2 <GPIO_writePin+0x138>
    19fa:	84 2b       	or	r24, r20
    19fc:	8c 93       	st	X, r24
    19fe:	40 c0       	rjmp	.+128    	; 0x1a80 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1a00:	a5 e3       	ldi	r26, 0x35	; 53
    1a02:	b0 e0       	ldi	r27, 0x00	; 0
    1a04:	e5 e3       	ldi	r30, 0x35	; 53
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	80 81       	ld	r24, Z
    1a0a:	48 2f       	mov	r20, r24
    1a0c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0e:	28 2f       	mov	r18, r24
    1a10:	30 e0       	ldi	r19, 0x00	; 0
    1a12:	81 e0       	ldi	r24, 0x01	; 1
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	02 2e       	mov	r0, r18
    1a18:	02 c0       	rjmp	.+4      	; 0x1a1e <GPIO_writePin+0x164>
    1a1a:	88 0f       	add	r24, r24
    1a1c:	99 1f       	adc	r25, r25
    1a1e:	0a 94       	dec	r0
    1a20:	e2 f7       	brpl	.-8      	; 0x1a1a <GPIO_writePin+0x160>
    1a22:	80 95       	com	r24
    1a24:	84 23       	and	r24, r20
    1a26:	8c 93       	st	X, r24
    1a28:	2b c0       	rjmp	.+86     	; 0x1a80 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1a2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a2c:	81 30       	cpi	r24, 0x01	; 1
    1a2e:	a1 f4       	brne	.+40     	; 0x1a58 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1a30:	a2 e3       	ldi	r26, 0x32	; 50
    1a32:	b0 e0       	ldi	r27, 0x00	; 0
    1a34:	e2 e3       	ldi	r30, 0x32	; 50
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	80 81       	ld	r24, Z
    1a3a:	48 2f       	mov	r20, r24
    1a3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3e:	28 2f       	mov	r18, r24
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	02 2e       	mov	r0, r18
    1a48:	02 c0       	rjmp	.+4      	; 0x1a4e <GPIO_writePin+0x194>
    1a4a:	88 0f       	add	r24, r24
    1a4c:	99 1f       	adc	r25, r25
    1a4e:	0a 94       	dec	r0
    1a50:	e2 f7       	brpl	.-8      	; 0x1a4a <GPIO_writePin+0x190>
    1a52:	84 2b       	or	r24, r20
    1a54:	8c 93       	st	X, r24
    1a56:	14 c0       	rjmp	.+40     	; 0x1a80 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1a58:	a2 e3       	ldi	r26, 0x32	; 50
    1a5a:	b0 e0       	ldi	r27, 0x00	; 0
    1a5c:	e2 e3       	ldi	r30, 0x32	; 50
    1a5e:	f0 e0       	ldi	r31, 0x00	; 0
    1a60:	80 81       	ld	r24, Z
    1a62:	48 2f       	mov	r20, r24
    1a64:	8a 81       	ldd	r24, Y+2	; 0x02
    1a66:	28 2f       	mov	r18, r24
    1a68:	30 e0       	ldi	r19, 0x00	; 0
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	02 2e       	mov	r0, r18
    1a70:	02 c0       	rjmp	.+4      	; 0x1a76 <GPIO_writePin+0x1bc>
    1a72:	88 0f       	add	r24, r24
    1a74:	99 1f       	adc	r25, r25
    1a76:	0a 94       	dec	r0
    1a78:	e2 f7       	brpl	.-8      	; 0x1a72 <GPIO_writePin+0x1b8>
    1a7a:	80 95       	com	r24
    1a7c:	84 23       	and	r24, r20
    1a7e:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1a80:	0f 90       	pop	r0
    1a82:	0f 90       	pop	r0
    1a84:	0f 90       	pop	r0
    1a86:	0f 90       	pop	r0
    1a88:	0f 90       	pop	r0
    1a8a:	cf 91       	pop	r28
    1a8c:	df 91       	pop	r29
    1a8e:	08 95       	ret

00001a90 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1a90:	df 93       	push	r29
    1a92:	cf 93       	push	r28
    1a94:	00 d0       	rcall	.+0      	; 0x1a96 <GPIO_readPin+0x6>
    1a96:	00 d0       	rcall	.+0      	; 0x1a98 <GPIO_readPin+0x8>
    1a98:	0f 92       	push	r0
    1a9a:	cd b7       	in	r28, 0x3d	; 61
    1a9c:	de b7       	in	r29, 0x3e	; 62
    1a9e:	8a 83       	std	Y+2, r24	; 0x02
    1aa0:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1aa2:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1aa4:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa6:	88 30       	cpi	r24, 0x08	; 8
    1aa8:	08 f0       	brcs	.+2      	; 0x1aac <GPIO_readPin+0x1c>
    1aaa:	84 c0       	rjmp	.+264    	; 0x1bb4 <GPIO_readPin+0x124>
    1aac:	8a 81       	ldd	r24, Y+2	; 0x02
    1aae:	84 30       	cpi	r24, 0x04	; 4
    1ab0:	08 f0       	brcs	.+2      	; 0x1ab4 <GPIO_readPin+0x24>
    1ab2:	80 c0       	rjmp	.+256    	; 0x1bb4 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ab6:	28 2f       	mov	r18, r24
    1ab8:	30 e0       	ldi	r19, 0x00	; 0
    1aba:	3d 83       	std	Y+5, r19	; 0x05
    1abc:	2c 83       	std	Y+4, r18	; 0x04
    1abe:	4c 81       	ldd	r20, Y+4	; 0x04
    1ac0:	5d 81       	ldd	r21, Y+5	; 0x05
    1ac2:	41 30       	cpi	r20, 0x01	; 1
    1ac4:	51 05       	cpc	r21, r1
    1ac6:	79 f1       	breq	.+94     	; 0x1b26 <GPIO_readPin+0x96>
    1ac8:	8c 81       	ldd	r24, Y+4	; 0x04
    1aca:	9d 81       	ldd	r25, Y+5	; 0x05
    1acc:	82 30       	cpi	r24, 0x02	; 2
    1ace:	91 05       	cpc	r25, r1
    1ad0:	34 f4       	brge	.+12     	; 0x1ade <GPIO_readPin+0x4e>
    1ad2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ad4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ad6:	21 15       	cp	r18, r1
    1ad8:	31 05       	cpc	r19, r1
    1ada:	69 f0       	breq	.+26     	; 0x1af6 <GPIO_readPin+0x66>
    1adc:	6b c0       	rjmp	.+214    	; 0x1bb4 <GPIO_readPin+0x124>
    1ade:	4c 81       	ldd	r20, Y+4	; 0x04
    1ae0:	5d 81       	ldd	r21, Y+5	; 0x05
    1ae2:	42 30       	cpi	r20, 0x02	; 2
    1ae4:	51 05       	cpc	r21, r1
    1ae6:	b9 f1       	breq	.+110    	; 0x1b56 <GPIO_readPin+0xc6>
    1ae8:	8c 81       	ldd	r24, Y+4	; 0x04
    1aea:	9d 81       	ldd	r25, Y+5	; 0x05
    1aec:	83 30       	cpi	r24, 0x03	; 3
    1aee:	91 05       	cpc	r25, r1
    1af0:	09 f4       	brne	.+2      	; 0x1af4 <GPIO_readPin+0x64>
    1af2:	49 c0       	rjmp	.+146    	; 0x1b86 <GPIO_readPin+0xf6>
    1af4:	5f c0       	rjmp	.+190    	; 0x1bb4 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    1af6:	e9 e3       	ldi	r30, 0x39	; 57
    1af8:	f0 e0       	ldi	r31, 0x00	; 0
    1afa:	80 81       	ld	r24, Z
    1afc:	28 2f       	mov	r18, r24
    1afe:	30 e0       	ldi	r19, 0x00	; 0
    1b00:	8b 81       	ldd	r24, Y+3	; 0x03
    1b02:	88 2f       	mov	r24, r24
    1b04:	90 e0       	ldi	r25, 0x00	; 0
    1b06:	a9 01       	movw	r20, r18
    1b08:	02 c0       	rjmp	.+4      	; 0x1b0e <GPIO_readPin+0x7e>
    1b0a:	55 95       	asr	r21
    1b0c:	47 95       	ror	r20
    1b0e:	8a 95       	dec	r24
    1b10:	e2 f7       	brpl	.-8      	; 0x1b0a <GPIO_readPin+0x7a>
    1b12:	ca 01       	movw	r24, r20
    1b14:	81 70       	andi	r24, 0x01	; 1
    1b16:	90 70       	andi	r25, 0x00	; 0
    1b18:	88 23       	and	r24, r24
    1b1a:	19 f0       	breq	.+6      	; 0x1b22 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    1b1c:	81 e0       	ldi	r24, 0x01	; 1
    1b1e:	89 83       	std	Y+1, r24	; 0x01
    1b20:	49 c0       	rjmp	.+146    	; 0x1bb4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b22:	19 82       	std	Y+1, r1	; 0x01
    1b24:	47 c0       	rjmp	.+142    	; 0x1bb4 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1b26:	e6 e3       	ldi	r30, 0x36	; 54
    1b28:	f0 e0       	ldi	r31, 0x00	; 0
    1b2a:	80 81       	ld	r24, Z
    1b2c:	28 2f       	mov	r18, r24
    1b2e:	30 e0       	ldi	r19, 0x00	; 0
    1b30:	8b 81       	ldd	r24, Y+3	; 0x03
    1b32:	88 2f       	mov	r24, r24
    1b34:	90 e0       	ldi	r25, 0x00	; 0
    1b36:	a9 01       	movw	r20, r18
    1b38:	02 c0       	rjmp	.+4      	; 0x1b3e <GPIO_readPin+0xae>
    1b3a:	55 95       	asr	r21
    1b3c:	47 95       	ror	r20
    1b3e:	8a 95       	dec	r24
    1b40:	e2 f7       	brpl	.-8      	; 0x1b3a <GPIO_readPin+0xaa>
    1b42:	ca 01       	movw	r24, r20
    1b44:	81 70       	andi	r24, 0x01	; 1
    1b46:	90 70       	andi	r25, 0x00	; 0
    1b48:	88 23       	and	r24, r24
    1b4a:	19 f0       	breq	.+6      	; 0x1b52 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	89 83       	std	Y+1, r24	; 0x01
    1b50:	31 c0       	rjmp	.+98     	; 0x1bb4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b52:	19 82       	std	Y+1, r1	; 0x01
    1b54:	2f c0       	rjmp	.+94     	; 0x1bb4 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1b56:	e3 e3       	ldi	r30, 0x33	; 51
    1b58:	f0 e0       	ldi	r31, 0x00	; 0
    1b5a:	80 81       	ld	r24, Z
    1b5c:	28 2f       	mov	r18, r24
    1b5e:	30 e0       	ldi	r19, 0x00	; 0
    1b60:	8b 81       	ldd	r24, Y+3	; 0x03
    1b62:	88 2f       	mov	r24, r24
    1b64:	90 e0       	ldi	r25, 0x00	; 0
    1b66:	a9 01       	movw	r20, r18
    1b68:	02 c0       	rjmp	.+4      	; 0x1b6e <GPIO_readPin+0xde>
    1b6a:	55 95       	asr	r21
    1b6c:	47 95       	ror	r20
    1b6e:	8a 95       	dec	r24
    1b70:	e2 f7       	brpl	.-8      	; 0x1b6a <GPIO_readPin+0xda>
    1b72:	ca 01       	movw	r24, r20
    1b74:	81 70       	andi	r24, 0x01	; 1
    1b76:	90 70       	andi	r25, 0x00	; 0
    1b78:	88 23       	and	r24, r24
    1b7a:	19 f0       	breq	.+6      	; 0x1b82 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1b7c:	81 e0       	ldi	r24, 0x01	; 1
    1b7e:	89 83       	std	Y+1, r24	; 0x01
    1b80:	19 c0       	rjmp	.+50     	; 0x1bb4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1b82:	19 82       	std	Y+1, r1	; 0x01
    1b84:	17 c0       	rjmp	.+46     	; 0x1bb4 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1b86:	e0 e3       	ldi	r30, 0x30	; 48
    1b88:	f0 e0       	ldi	r31, 0x00	; 0
    1b8a:	80 81       	ld	r24, Z
    1b8c:	28 2f       	mov	r18, r24
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	8b 81       	ldd	r24, Y+3	; 0x03
    1b92:	88 2f       	mov	r24, r24
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	a9 01       	movw	r20, r18
    1b98:	02 c0       	rjmp	.+4      	; 0x1b9e <GPIO_readPin+0x10e>
    1b9a:	55 95       	asr	r21
    1b9c:	47 95       	ror	r20
    1b9e:	8a 95       	dec	r24
    1ba0:	e2 f7       	brpl	.-8      	; 0x1b9a <GPIO_readPin+0x10a>
    1ba2:	ca 01       	movw	r24, r20
    1ba4:	81 70       	andi	r24, 0x01	; 1
    1ba6:	90 70       	andi	r25, 0x00	; 0
    1ba8:	88 23       	and	r24, r24
    1baa:	19 f0       	breq	.+6      	; 0x1bb2 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1bac:	81 e0       	ldi	r24, 0x01	; 1
    1bae:	89 83       	std	Y+1, r24	; 0x01
    1bb0:	01 c0       	rjmp	.+2      	; 0x1bb4 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    1bb2:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1bb4:	89 81       	ldd	r24, Y+1	; 0x01
}
    1bb6:	0f 90       	pop	r0
    1bb8:	0f 90       	pop	r0
    1bba:	0f 90       	pop	r0
    1bbc:	0f 90       	pop	r0
    1bbe:	0f 90       	pop	r0
    1bc0:	cf 91       	pop	r28
    1bc2:	df 91       	pop	r29
    1bc4:	08 95       	ret

00001bc6 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    1bc6:	df 93       	push	r29
    1bc8:	cf 93       	push	r28
    1bca:	00 d0       	rcall	.+0      	; 0x1bcc <GPIO_setupPortDirection+0x6>
    1bcc:	00 d0       	rcall	.+0      	; 0x1bce <GPIO_setupPortDirection+0x8>
    1bce:	cd b7       	in	r28, 0x3d	; 61
    1bd0:	de b7       	in	r29, 0x3e	; 62
    1bd2:	89 83       	std	Y+1, r24	; 0x01
    1bd4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1bd6:	89 81       	ldd	r24, Y+1	; 0x01
    1bd8:	84 30       	cpi	r24, 0x04	; 4
    1bda:	90 f5       	brcc	.+100    	; 0x1c40 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    1bdc:	89 81       	ldd	r24, Y+1	; 0x01
    1bde:	28 2f       	mov	r18, r24
    1be0:	30 e0       	ldi	r19, 0x00	; 0
    1be2:	3c 83       	std	Y+4, r19	; 0x04
    1be4:	2b 83       	std	Y+3, r18	; 0x03
    1be6:	8b 81       	ldd	r24, Y+3	; 0x03
    1be8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bea:	81 30       	cpi	r24, 0x01	; 1
    1bec:	91 05       	cpc	r25, r1
    1bee:	d1 f0       	breq	.+52     	; 0x1c24 <GPIO_setupPortDirection+0x5e>
    1bf0:	2b 81       	ldd	r18, Y+3	; 0x03
    1bf2:	3c 81       	ldd	r19, Y+4	; 0x04
    1bf4:	22 30       	cpi	r18, 0x02	; 2
    1bf6:	31 05       	cpc	r19, r1
    1bf8:	2c f4       	brge	.+10     	; 0x1c04 <GPIO_setupPortDirection+0x3e>
    1bfa:	8b 81       	ldd	r24, Y+3	; 0x03
    1bfc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bfe:	00 97       	sbiw	r24, 0x00	; 0
    1c00:	61 f0       	breq	.+24     	; 0x1c1a <GPIO_setupPortDirection+0x54>
    1c02:	1e c0       	rjmp	.+60     	; 0x1c40 <GPIO_setupPortDirection+0x7a>
    1c04:	2b 81       	ldd	r18, Y+3	; 0x03
    1c06:	3c 81       	ldd	r19, Y+4	; 0x04
    1c08:	22 30       	cpi	r18, 0x02	; 2
    1c0a:	31 05       	cpc	r19, r1
    1c0c:	81 f0       	breq	.+32     	; 0x1c2e <GPIO_setupPortDirection+0x68>
    1c0e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c10:	9c 81       	ldd	r25, Y+4	; 0x04
    1c12:	83 30       	cpi	r24, 0x03	; 3
    1c14:	91 05       	cpc	r25, r1
    1c16:	81 f0       	breq	.+32     	; 0x1c38 <GPIO_setupPortDirection+0x72>
    1c18:	13 c0       	rjmp	.+38     	; 0x1c40 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    1c1a:	ea e3       	ldi	r30, 0x3A	; 58
    1c1c:	f0 e0       	ldi	r31, 0x00	; 0
    1c1e:	8a 81       	ldd	r24, Y+2	; 0x02
    1c20:	80 83       	st	Z, r24
    1c22:	0e c0       	rjmp	.+28     	; 0x1c40 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1c24:	e7 e3       	ldi	r30, 0x37	; 55
    1c26:	f0 e0       	ldi	r31, 0x00	; 0
    1c28:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2a:	80 83       	st	Z, r24
    1c2c:	09 c0       	rjmp	.+18     	; 0x1c40 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    1c2e:	e4 e3       	ldi	r30, 0x34	; 52
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	8a 81       	ldd	r24, Y+2	; 0x02
    1c34:	80 83       	st	Z, r24
    1c36:	04 c0       	rjmp	.+8      	; 0x1c40 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1c38:	e1 e3       	ldi	r30, 0x31	; 49
    1c3a:	f0 e0       	ldi	r31, 0x00	; 0
    1c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3e:	80 83       	st	Z, r24
			break;
		}
	}
}
    1c40:	0f 90       	pop	r0
    1c42:	0f 90       	pop	r0
    1c44:	0f 90       	pop	r0
    1c46:	0f 90       	pop	r0
    1c48:	cf 91       	pop	r28
    1c4a:	df 91       	pop	r29
    1c4c:	08 95       	ret

00001c4e <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    1c4e:	df 93       	push	r29
    1c50:	cf 93       	push	r28
    1c52:	00 d0       	rcall	.+0      	; 0x1c54 <GPIO_writePort+0x6>
    1c54:	00 d0       	rcall	.+0      	; 0x1c56 <GPIO_writePort+0x8>
    1c56:	cd b7       	in	r28, 0x3d	; 61
    1c58:	de b7       	in	r29, 0x3e	; 62
    1c5a:	89 83       	std	Y+1, r24	; 0x01
    1c5c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1c5e:	89 81       	ldd	r24, Y+1	; 0x01
    1c60:	84 30       	cpi	r24, 0x04	; 4
    1c62:	90 f5       	brcc	.+100    	; 0x1cc8 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1c64:	89 81       	ldd	r24, Y+1	; 0x01
    1c66:	28 2f       	mov	r18, r24
    1c68:	30 e0       	ldi	r19, 0x00	; 0
    1c6a:	3c 83       	std	Y+4, r19	; 0x04
    1c6c:	2b 83       	std	Y+3, r18	; 0x03
    1c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1c70:	9c 81       	ldd	r25, Y+4	; 0x04
    1c72:	81 30       	cpi	r24, 0x01	; 1
    1c74:	91 05       	cpc	r25, r1
    1c76:	d1 f0       	breq	.+52     	; 0x1cac <GPIO_writePort+0x5e>
    1c78:	2b 81       	ldd	r18, Y+3	; 0x03
    1c7a:	3c 81       	ldd	r19, Y+4	; 0x04
    1c7c:	22 30       	cpi	r18, 0x02	; 2
    1c7e:	31 05       	cpc	r19, r1
    1c80:	2c f4       	brge	.+10     	; 0x1c8c <GPIO_writePort+0x3e>
    1c82:	8b 81       	ldd	r24, Y+3	; 0x03
    1c84:	9c 81       	ldd	r25, Y+4	; 0x04
    1c86:	00 97       	sbiw	r24, 0x00	; 0
    1c88:	61 f0       	breq	.+24     	; 0x1ca2 <GPIO_writePort+0x54>
    1c8a:	1e c0       	rjmp	.+60     	; 0x1cc8 <GPIO_writePort+0x7a>
    1c8c:	2b 81       	ldd	r18, Y+3	; 0x03
    1c8e:	3c 81       	ldd	r19, Y+4	; 0x04
    1c90:	22 30       	cpi	r18, 0x02	; 2
    1c92:	31 05       	cpc	r19, r1
    1c94:	81 f0       	breq	.+32     	; 0x1cb6 <GPIO_writePort+0x68>
    1c96:	8b 81       	ldd	r24, Y+3	; 0x03
    1c98:	9c 81       	ldd	r25, Y+4	; 0x04
    1c9a:	83 30       	cpi	r24, 0x03	; 3
    1c9c:	91 05       	cpc	r25, r1
    1c9e:	81 f0       	breq	.+32     	; 0x1cc0 <GPIO_writePort+0x72>
    1ca0:	13 c0       	rjmp	.+38     	; 0x1cc8 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    1ca2:	eb e3       	ldi	r30, 0x3B	; 59
    1ca4:	f0 e0       	ldi	r31, 0x00	; 0
    1ca6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca8:	80 83       	st	Z, r24
    1caa:	0e c0       	rjmp	.+28     	; 0x1cc8 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1cac:	e8 e3       	ldi	r30, 0x38	; 56
    1cae:	f0 e0       	ldi	r31, 0x00	; 0
    1cb0:	8a 81       	ldd	r24, Y+2	; 0x02
    1cb2:	80 83       	st	Z, r24
    1cb4:	09 c0       	rjmp	.+18     	; 0x1cc8 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1cb6:	e5 e3       	ldi	r30, 0x35	; 53
    1cb8:	f0 e0       	ldi	r31, 0x00	; 0
    1cba:	8a 81       	ldd	r24, Y+2	; 0x02
    1cbc:	80 83       	st	Z, r24
    1cbe:	04 c0       	rjmp	.+8      	; 0x1cc8 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    1cc0:	e2 e3       	ldi	r30, 0x32	; 50
    1cc2:	f0 e0       	ldi	r31, 0x00	; 0
    1cc4:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc6:	80 83       	st	Z, r24
			break;
		}
	}
}
    1cc8:	0f 90       	pop	r0
    1cca:	0f 90       	pop	r0
    1ccc:	0f 90       	pop	r0
    1cce:	0f 90       	pop	r0
    1cd0:	cf 91       	pop	r28
    1cd2:	df 91       	pop	r29
    1cd4:	08 95       	ret

00001cd6 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    1cd6:	df 93       	push	r29
    1cd8:	cf 93       	push	r28
    1cda:	00 d0       	rcall	.+0      	; 0x1cdc <GPIO_readPort+0x6>
    1cdc:	00 d0       	rcall	.+0      	; 0x1cde <GPIO_readPort+0x8>
    1cde:	cd b7       	in	r28, 0x3d	; 61
    1ce0:	de b7       	in	r29, 0x3e	; 62
    1ce2:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    1ce4:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    1ce6:	8a 81       	ldd	r24, Y+2	; 0x02
    1ce8:	84 30       	cpi	r24, 0x04	; 4
    1cea:	90 f5       	brcc	.+100    	; 0x1d50 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    1cec:	8a 81       	ldd	r24, Y+2	; 0x02
    1cee:	28 2f       	mov	r18, r24
    1cf0:	30 e0       	ldi	r19, 0x00	; 0
    1cf2:	3c 83       	std	Y+4, r19	; 0x04
    1cf4:	2b 83       	std	Y+3, r18	; 0x03
    1cf6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cf8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cfa:	81 30       	cpi	r24, 0x01	; 1
    1cfc:	91 05       	cpc	r25, r1
    1cfe:	d1 f0       	breq	.+52     	; 0x1d34 <GPIO_readPort+0x5e>
    1d00:	2b 81       	ldd	r18, Y+3	; 0x03
    1d02:	3c 81       	ldd	r19, Y+4	; 0x04
    1d04:	22 30       	cpi	r18, 0x02	; 2
    1d06:	31 05       	cpc	r19, r1
    1d08:	2c f4       	brge	.+10     	; 0x1d14 <GPIO_readPort+0x3e>
    1d0a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0e:	00 97       	sbiw	r24, 0x00	; 0
    1d10:	61 f0       	breq	.+24     	; 0x1d2a <GPIO_readPort+0x54>
    1d12:	1e c0       	rjmp	.+60     	; 0x1d50 <GPIO_readPort+0x7a>
    1d14:	2b 81       	ldd	r18, Y+3	; 0x03
    1d16:	3c 81       	ldd	r19, Y+4	; 0x04
    1d18:	22 30       	cpi	r18, 0x02	; 2
    1d1a:	31 05       	cpc	r19, r1
    1d1c:	81 f0       	breq	.+32     	; 0x1d3e <GPIO_readPort+0x68>
    1d1e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d20:	9c 81       	ldd	r25, Y+4	; 0x04
    1d22:	83 30       	cpi	r24, 0x03	; 3
    1d24:	91 05       	cpc	r25, r1
    1d26:	81 f0       	breq	.+32     	; 0x1d48 <GPIO_readPort+0x72>
    1d28:	13 c0       	rjmp	.+38     	; 0x1d50 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1d2a:	e9 e3       	ldi	r30, 0x39	; 57
    1d2c:	f0 e0       	ldi	r31, 0x00	; 0
    1d2e:	80 81       	ld	r24, Z
    1d30:	89 83       	std	Y+1, r24	; 0x01
    1d32:	0e c0       	rjmp	.+28     	; 0x1d50 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1d34:	e6 e3       	ldi	r30, 0x36	; 54
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	80 81       	ld	r24, Z
    1d3a:	89 83       	std	Y+1, r24	; 0x01
    1d3c:	09 c0       	rjmp	.+18     	; 0x1d50 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    1d3e:	e3 e3       	ldi	r30, 0x33	; 51
    1d40:	f0 e0       	ldi	r31, 0x00	; 0
    1d42:	80 81       	ld	r24, Z
    1d44:	89 83       	std	Y+1, r24	; 0x01
    1d46:	04 c0       	rjmp	.+8      	; 0x1d50 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1d48:	e0 e3       	ldi	r30, 0x30	; 48
    1d4a:	f0 e0       	ldi	r31, 0x00	; 0
    1d4c:	80 81       	ld	r24, Z
    1d4e:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    1d50:	89 81       	ldd	r24, Y+1	; 0x01
}
    1d52:	0f 90       	pop	r0
    1d54:	0f 90       	pop	r0
    1d56:	0f 90       	pop	r0
    1d58:	0f 90       	pop	r0
    1d5a:	cf 91       	pop	r28
    1d5c:	df 91       	pop	r29
    1d5e:	08 95       	ret

00001d60 <KEYPAD_getPressedKey>:

/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/
uint8 KEYPAD_getPressedKey(void)
{
    1d60:	df 93       	push	r29
    1d62:	cf 93       	push	r28
    1d64:	00 d0       	rcall	.+0      	; 0x1d66 <KEYPAD_getPressedKey+0x6>
    1d66:	0f 92       	push	r0
    1d68:	cd b7       	in	r28, 0x3d	; 61
    1d6a:	de b7       	in	r29, 0x3e	; 62
	uint8 col,row;
	uint8 keypad_port_value = 0;
    1d6c:	19 82       	std	Y+1, r1	; 0x01
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1d6e:	1b 82       	std	Y+3, r1	; 0x03
    1d70:	43 c0       	rjmp	.+134    	; 0x1df8 <KEYPAD_getPressedKey+0x98>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this column will be output pin
			 */
			GPIO_setupPortDirection(KEYPAD_PORT_ID,PORT_INPUT);
    1d72:	81 e0       	ldi	r24, 0x01	; 1
    1d74:	60 e0       	ldi	r22, 0x00	; 0
    1d76:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <GPIO_setupPortDirection>
			GPIO_setupPinDirection(KEYPAD_PORT_ID,KEYPAD_FIRST_COLUMN_PIN_ID+col,PIN_OUTPUT);
    1d7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d7c:	98 2f       	mov	r25, r24
    1d7e:	9c 5f       	subi	r25, 0xFC	; 252
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	69 2f       	mov	r22, r25
    1d84:	41 e0       	ldi	r20, 0x01	; 1
    1d86:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <GPIO_setupPinDirection>

#if(KEYPAD_BUTTON_PRESSED == LOGIC_LOW)
			/* Clear the column output pin and set the rest pins value */
			keypad_port_value = ~(1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
    1d8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8c:	88 2f       	mov	r24, r24
    1d8e:	90 e0       	ldi	r25, 0x00	; 0
    1d90:	9c 01       	movw	r18, r24
    1d92:	2c 5f       	subi	r18, 0xFC	; 252
    1d94:	3f 4f       	sbci	r19, 0xFF	; 255
    1d96:	81 e0       	ldi	r24, 0x01	; 1
    1d98:	90 e0       	ldi	r25, 0x00	; 0
    1d9a:	02 c0       	rjmp	.+4      	; 0x1da0 <KEYPAD_getPressedKey+0x40>
    1d9c:	88 0f       	add	r24, r24
    1d9e:	99 1f       	adc	r25, r25
    1da0:	2a 95       	dec	r18
    1da2:	e2 f7       	brpl	.-8      	; 0x1d9c <KEYPAD_getPressedKey+0x3c>
    1da4:	80 95       	com	r24
    1da6:	89 83       	std	Y+1, r24	; 0x01
#else
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);
    1da8:	81 e0       	ldi	r24, 0x01	; 1
    1daa:	69 81       	ldd	r22, Y+1	; 0x01
    1dac:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <GPIO_writePort>

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1db0:	1a 82       	std	Y+2, r1	; 0x02
    1db2:	1c c0       	rjmp	.+56     	; 0x1dec <KEYPAD_getPressedKey+0x8c>
			{
				/* Check if the switch is pressed in this row */
				if(GPIO_readPin(KEYPAD_PORT_ID,row+KEYPAD_FIRST_ROW_PIN_ID) == KEYPAD_BUTTON_PRESSED)
    1db4:	81 e0       	ldi	r24, 0x01	; 1
    1db6:	6a 81       	ldd	r22, Y+2	; 0x02
    1db8:	0e 94 48 0d 	call	0x1a90	; 0x1a90 <GPIO_readPin>
    1dbc:	88 23       	and	r24, r24
    1dbe:	99 f4       	brne	.+38     	; 0x1de6 <KEYPAD_getPressedKey+0x86>
				{
					#if (KEYPAD_NUM_COLS == 3)
						return KEYPAD_4x3_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
					#elif (KEYPAD_NUM_COLS == 4)
						return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    1dc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc2:	88 2f       	mov	r24, r24
    1dc4:	90 e0       	ldi	r25, 0x00	; 0
    1dc6:	88 0f       	add	r24, r24
    1dc8:	99 1f       	adc	r25, r25
    1dca:	88 0f       	add	r24, r24
    1dcc:	99 1f       	adc	r25, r25
    1dce:	98 2f       	mov	r25, r24
    1dd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1dd2:	89 0f       	add	r24, r25
    1dd4:	8f 5f       	subi	r24, 0xFF	; 255
    1dd6:	0e 94 01 0f 	call	0x1e02	; 0x1e02 <KEYPAD_4x4_adjustKeyNumber>
					#endif
				}
			}
		}
	}
}
    1dda:	0f 90       	pop	r0
    1ddc:	0f 90       	pop	r0
    1dde:	0f 90       	pop	r0
    1de0:	cf 91       	pop	r28
    1de2:	df 91       	pop	r29
    1de4:	08 95       	ret
			/* Set the column output pin and clear the rest pins value */
			keypad_port_value = (1<<(KEYPAD_FIRST_COLUMN_PIN_ID+col));
#endif
			GPIO_writePort(KEYPAD_PORT_ID,keypad_port_value);

			for(row=0;row<KEYPAD_NUM_ROWS;row++) /* loop for rows */
    1de6:	8a 81       	ldd	r24, Y+2	; 0x02
    1de8:	8f 5f       	subi	r24, 0xFF	; 255
    1dea:	8a 83       	std	Y+2, r24	; 0x02
    1dec:	8a 81       	ldd	r24, Y+2	; 0x02
    1dee:	84 30       	cpi	r24, 0x04	; 4
    1df0:	08 f3       	brcs	.-62     	; 0x1db4 <KEYPAD_getPressedKey+0x54>
{
	uint8 col,row;
	uint8 keypad_port_value = 0;
	while(1)
	{
		for(col=0;col<KEYPAD_NUM_COLS;col++) /* loop for columns */
    1df2:	8b 81       	ldd	r24, Y+3	; 0x03
    1df4:	8f 5f       	subi	r24, 0xFF	; 255
    1df6:	8b 83       	std	Y+3, r24	; 0x03
    1df8:	8b 81       	ldd	r24, Y+3	; 0x03
    1dfa:	84 30       	cpi	r24, 0x04	; 4
    1dfc:	08 f4       	brcc	.+2      	; 0x1e00 <KEYPAD_getPressedKey+0xa0>
    1dfe:	b9 cf       	rjmp	.-142    	; 0x1d72 <KEYPAD_getPressedKey+0x12>
    1e00:	b6 cf       	rjmp	.-148    	; 0x1d6e <KEYPAD_getPressedKey+0xe>

00001e02 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1e02:	df 93       	push	r29
    1e04:	cf 93       	push	r28
    1e06:	00 d0       	rcall	.+0      	; 0x1e08 <KEYPAD_4x4_adjustKeyNumber+0x6>
    1e08:	00 d0       	rcall	.+0      	; 0x1e0a <KEYPAD_4x4_adjustKeyNumber+0x8>
    1e0a:	cd b7       	in	r28, 0x3d	; 61
    1e0c:	de b7       	in	r29, 0x3e	; 62
    1e0e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1e10:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1e12:	8a 81       	ldd	r24, Y+2	; 0x02
    1e14:	28 2f       	mov	r18, r24
    1e16:	30 e0       	ldi	r19, 0x00	; 0
    1e18:	3c 83       	std	Y+4, r19	; 0x04
    1e1a:	2b 83       	std	Y+3, r18	; 0x03
    1e1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1e20:	88 30       	cpi	r24, 0x08	; 8
    1e22:	91 05       	cpc	r25, r1
    1e24:	09 f4       	brne	.+2      	; 0x1e28 <KEYPAD_4x4_adjustKeyNumber+0x26>
    1e26:	70 c0       	rjmp	.+224    	; 0x1f08 <KEYPAD_4x4_adjustKeyNumber+0x106>
    1e28:	2b 81       	ldd	r18, Y+3	; 0x03
    1e2a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e2c:	29 30       	cpi	r18, 0x09	; 9
    1e2e:	31 05       	cpc	r19, r1
    1e30:	5c f5       	brge	.+86     	; 0x1e88 <KEYPAD_4x4_adjustKeyNumber+0x86>
    1e32:	8b 81       	ldd	r24, Y+3	; 0x03
    1e34:	9c 81       	ldd	r25, Y+4	; 0x04
    1e36:	84 30       	cpi	r24, 0x04	; 4
    1e38:	91 05       	cpc	r25, r1
    1e3a:	09 f4       	brne	.+2      	; 0x1e3e <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1e3c:	59 c0       	rjmp	.+178    	; 0x1ef0 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1e3e:	2b 81       	ldd	r18, Y+3	; 0x03
    1e40:	3c 81       	ldd	r19, Y+4	; 0x04
    1e42:	25 30       	cpi	r18, 0x05	; 5
    1e44:	31 05       	cpc	r19, r1
    1e46:	9c f4       	brge	.+38     	; 0x1e6e <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1e48:	8b 81       	ldd	r24, Y+3	; 0x03
    1e4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1e4c:	82 30       	cpi	r24, 0x02	; 2
    1e4e:	91 05       	cpc	r25, r1
    1e50:	09 f4       	brne	.+2      	; 0x1e54 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1e52:	48 c0       	rjmp	.+144    	; 0x1ee4 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1e54:	2b 81       	ldd	r18, Y+3	; 0x03
    1e56:	3c 81       	ldd	r19, Y+4	; 0x04
    1e58:	23 30       	cpi	r18, 0x03	; 3
    1e5a:	31 05       	cpc	r19, r1
    1e5c:	0c f0       	brlt	.+2      	; 0x1e60 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1e5e:	45 c0       	rjmp	.+138    	; 0x1eea <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1e60:	8b 81       	ldd	r24, Y+3	; 0x03
    1e62:	9c 81       	ldd	r25, Y+4	; 0x04
    1e64:	81 30       	cpi	r24, 0x01	; 1
    1e66:	91 05       	cpc	r25, r1
    1e68:	09 f4       	brne	.+2      	; 0x1e6c <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1e6a:	39 c0       	rjmp	.+114    	; 0x1ede <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1e6c:	67 c0       	rjmp	.+206    	; 0x1f3c <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1e6e:	2b 81       	ldd	r18, Y+3	; 0x03
    1e70:	3c 81       	ldd	r19, Y+4	; 0x04
    1e72:	26 30       	cpi	r18, 0x06	; 6
    1e74:	31 05       	cpc	r19, r1
    1e76:	09 f4       	brne	.+2      	; 0x1e7a <KEYPAD_4x4_adjustKeyNumber+0x78>
    1e78:	41 c0       	rjmp	.+130    	; 0x1efc <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1e7a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e7c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e7e:	87 30       	cpi	r24, 0x07	; 7
    1e80:	91 05       	cpc	r25, r1
    1e82:	0c f0       	brlt	.+2      	; 0x1e86 <KEYPAD_4x4_adjustKeyNumber+0x84>
    1e84:	3e c0       	rjmp	.+124    	; 0x1f02 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1e86:	37 c0       	rjmp	.+110    	; 0x1ef6 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1e88:	2b 81       	ldd	r18, Y+3	; 0x03
    1e8a:	3c 81       	ldd	r19, Y+4	; 0x04
    1e8c:	2c 30       	cpi	r18, 0x0C	; 12
    1e8e:	31 05       	cpc	r19, r1
    1e90:	09 f4       	brne	.+2      	; 0x1e94 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1e92:	46 c0       	rjmp	.+140    	; 0x1f20 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1e94:	8b 81       	ldd	r24, Y+3	; 0x03
    1e96:	9c 81       	ldd	r25, Y+4	; 0x04
    1e98:	8d 30       	cpi	r24, 0x0D	; 13
    1e9a:	91 05       	cpc	r25, r1
    1e9c:	5c f4       	brge	.+22     	; 0x1eb4 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1e9e:	2b 81       	ldd	r18, Y+3	; 0x03
    1ea0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ea2:	2a 30       	cpi	r18, 0x0A	; 10
    1ea4:	31 05       	cpc	r19, r1
    1ea6:	b1 f1       	breq	.+108    	; 0x1f14 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1ea8:	8b 81       	ldd	r24, Y+3	; 0x03
    1eaa:	9c 81       	ldd	r25, Y+4	; 0x04
    1eac:	8b 30       	cpi	r24, 0x0B	; 11
    1eae:	91 05       	cpc	r25, r1
    1eb0:	a4 f5       	brge	.+104    	; 0x1f1a <KEYPAD_4x4_adjustKeyNumber+0x118>
    1eb2:	2d c0       	rjmp	.+90     	; 0x1f0e <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1eb4:	2b 81       	ldd	r18, Y+3	; 0x03
    1eb6:	3c 81       	ldd	r19, Y+4	; 0x04
    1eb8:	2e 30       	cpi	r18, 0x0E	; 14
    1eba:	31 05       	cpc	r19, r1
    1ebc:	b9 f1       	breq	.+110    	; 0x1f2c <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1ebe:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ec2:	8e 30       	cpi	r24, 0x0E	; 14
    1ec4:	91 05       	cpc	r25, r1
    1ec6:	7c f1       	brlt	.+94     	; 0x1f26 <KEYPAD_4x4_adjustKeyNumber+0x124>
    1ec8:	2b 81       	ldd	r18, Y+3	; 0x03
    1eca:	3c 81       	ldd	r19, Y+4	; 0x04
    1ecc:	2f 30       	cpi	r18, 0x0F	; 15
    1ece:	31 05       	cpc	r19, r1
    1ed0:	79 f1       	breq	.+94     	; 0x1f30 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1ed2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ed4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ed6:	80 31       	cpi	r24, 0x10	; 16
    1ed8:	91 05       	cpc	r25, r1
    1eda:	69 f1       	breq	.+90     	; 0x1f36 <KEYPAD_4x4_adjustKeyNumber+0x134>
    1edc:	2f c0       	rjmp	.+94     	; 0x1f3c <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1ede:	87 e0       	ldi	r24, 0x07	; 7
    1ee0:	89 83       	std	Y+1, r24	; 0x01
    1ee2:	2e c0       	rjmp	.+92     	; 0x1f40 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1ee4:	88 e0       	ldi	r24, 0x08	; 8
    1ee6:	89 83       	std	Y+1, r24	; 0x01
    1ee8:	2b c0       	rjmp	.+86     	; 0x1f40 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1eea:	89 e0       	ldi	r24, 0x09	; 9
    1eec:	89 83       	std	Y+1, r24	; 0x01
    1eee:	28 c0       	rjmp	.+80     	; 0x1f40 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1ef0:	85 e2       	ldi	r24, 0x25	; 37
    1ef2:	89 83       	std	Y+1, r24	; 0x01
    1ef4:	25 c0       	rjmp	.+74     	; 0x1f40 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1ef6:	84 e0       	ldi	r24, 0x04	; 4
    1ef8:	89 83       	std	Y+1, r24	; 0x01
    1efa:	22 c0       	rjmp	.+68     	; 0x1f40 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1efc:	85 e0       	ldi	r24, 0x05	; 5
    1efe:	89 83       	std	Y+1, r24	; 0x01
    1f00:	1f c0       	rjmp	.+62     	; 0x1f40 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1f02:	86 e0       	ldi	r24, 0x06	; 6
    1f04:	89 83       	std	Y+1, r24	; 0x01
    1f06:	1c c0       	rjmp	.+56     	; 0x1f40 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1f08:	8a e2       	ldi	r24, 0x2A	; 42
    1f0a:	89 83       	std	Y+1, r24	; 0x01
    1f0c:	19 c0       	rjmp	.+50     	; 0x1f40 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	89 83       	std	Y+1, r24	; 0x01
    1f12:	16 c0       	rjmp	.+44     	; 0x1f40 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1f14:	82 e0       	ldi	r24, 0x02	; 2
    1f16:	89 83       	std	Y+1, r24	; 0x01
    1f18:	13 c0       	rjmp	.+38     	; 0x1f40 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1f1a:	83 e0       	ldi	r24, 0x03	; 3
    1f1c:	89 83       	std	Y+1, r24	; 0x01
    1f1e:	10 c0       	rjmp	.+32     	; 0x1f40 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1f20:	8d e2       	ldi	r24, 0x2D	; 45
    1f22:	89 83       	std	Y+1, r24	; 0x01
    1f24:	0d c0       	rjmp	.+26     	; 0x1f40 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1f26:	8d e0       	ldi	r24, 0x0D	; 13
    1f28:	89 83       	std	Y+1, r24	; 0x01
    1f2a:	0a c0       	rjmp	.+20     	; 0x1f40 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    1f2c:	19 82       	std	Y+1, r1	; 0x01
    1f2e:	08 c0       	rjmp	.+16     	; 0x1f40 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1f30:	8d e3       	ldi	r24, 0x3D	; 61
    1f32:	89 83       	std	Y+1, r24	; 0x01
    1f34:	05 c0       	rjmp	.+10     	; 0x1f40 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1f36:	8b e2       	ldi	r24, 0x2B	; 43
    1f38:	89 83       	std	Y+1, r24	; 0x01
    1f3a:	02 c0       	rjmp	.+4      	; 0x1f40 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1f3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1f3e:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1f40:	89 81       	ldd	r24, Y+1	; 0x01
}
    1f42:	0f 90       	pop	r0
    1f44:	0f 90       	pop	r0
    1f46:	0f 90       	pop	r0
    1f48:	0f 90       	pop	r0
    1f4a:	cf 91       	pop	r28
    1f4c:	df 91       	pop	r29
    1f4e:	08 95       	ret

00001f50 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1f50:	df 93       	push	r29
    1f52:	cf 93       	push	r28
    1f54:	cd b7       	in	r28, 0x3d	; 61
    1f56:	de b7       	in	r29, 0x3e	; 62
	/* Configure the direction for RS, RW and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1f58:	82 e0       	ldi	r24, 0x02	; 2
    1f5a:	60 e0       	ldi	r22, 0x00	; 0
    1f5c:	41 e0       	ldi	r20, 0x01	; 1
    1f5e:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_RW_PORT_ID,LCD_RW_PIN_ID,PIN_OUTPUT);
    1f62:	82 e0       	ldi	r24, 0x02	; 2
    1f64:	61 e0       	ldi	r22, 0x01	; 1
    1f66:	41 e0       	ldi	r20, 0x01	; 1
    1f68:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1f6c:	82 e0       	ldi	r24, 0x02	; 2
    1f6e:	62 e0       	ldi	r22, 0x02	; 2
    1f70:	41 e0       	ldi	r20, 0x01	; 1
    1f72:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <GPIO_setupPinDirection>

	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1f76:	80 e0       	ldi	r24, 0x00	; 0
    1f78:	6f ef       	ldi	r22, 0xFF	; 255
    1f7a:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <GPIO_setupPortDirection>

	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE); /* use 2-line lcd + 8-bit Data Mode + 5*7 dot display Mode */
    1f7e:	88 e3       	ldi	r24, 0x38	; 56
    1f80:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <LCD_sendCommand>

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1f84:	8c e0       	ldi	r24, 0x0C	; 12
    1f86:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <LCD_sendCommand>

	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1f8a:	81 e0       	ldi	r24, 0x01	; 1
    1f8c:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <LCD_sendCommand>
}
    1f90:	cf 91       	pop	r28
    1f92:	df 91       	pop	r29
    1f94:	08 95       	ret

00001f96 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1f96:	df 93       	push	r29
    1f98:	cf 93       	push	r28
    1f9a:	cd b7       	in	r28, 0x3d	; 61
    1f9c:	de b7       	in	r29, 0x3e	; 62
    1f9e:	e9 97       	sbiw	r28, 0x39	; 57
    1fa0:	0f b6       	in	r0, 0x3f	; 63
    1fa2:	f8 94       	cli
    1fa4:	de bf       	out	0x3e, r29	; 62
    1fa6:	0f be       	out	0x3f, r0	; 63
    1fa8:	cd bf       	out	0x3d, r28	; 61
    1faa:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1fac:	82 e0       	ldi	r24, 0x02	; 2
    1fae:	60 e0       	ldi	r22, 0x00	; 0
    1fb0:	40 e0       	ldi	r20, 0x00	; 0
    1fb2:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    1fb6:	82 e0       	ldi	r24, 0x02	; 2
    1fb8:	61 e0       	ldi	r22, 0x01	; 1
    1fba:	40 e0       	ldi	r20, 0x00	; 0
    1fbc:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <GPIO_writePin>
    1fc0:	80 e0       	ldi	r24, 0x00	; 0
    1fc2:	90 e0       	ldi	r25, 0x00	; 0
    1fc4:	a0 e8       	ldi	r26, 0x80	; 128
    1fc6:	bf e3       	ldi	r27, 0x3F	; 63
    1fc8:	8d ab       	std	Y+53, r24	; 0x35
    1fca:	9e ab       	std	Y+54, r25	; 0x36
    1fcc:	af ab       	std	Y+55, r26	; 0x37
    1fce:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fd0:	6d a9       	ldd	r22, Y+53	; 0x35
    1fd2:	7e a9       	ldd	r23, Y+54	; 0x36
    1fd4:	8f a9       	ldd	r24, Y+55	; 0x37
    1fd6:	98 ad       	ldd	r25, Y+56	; 0x38
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	4a e7       	ldi	r20, 0x7A	; 122
    1fde:	53 e4       	ldi	r21, 0x43	; 67
    1fe0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fe4:	dc 01       	movw	r26, r24
    1fe6:	cb 01       	movw	r24, r22
    1fe8:	89 ab       	std	Y+49, r24	; 0x31
    1fea:	9a ab       	std	Y+50, r25	; 0x32
    1fec:	ab ab       	std	Y+51, r26	; 0x33
    1fee:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1ff0:	69 a9       	ldd	r22, Y+49	; 0x31
    1ff2:	7a a9       	ldd	r23, Y+50	; 0x32
    1ff4:	8b a9       	ldd	r24, Y+51	; 0x33
    1ff6:	9c a9       	ldd	r25, Y+52	; 0x34
    1ff8:	20 e0       	ldi	r18, 0x00	; 0
    1ffa:	30 e0       	ldi	r19, 0x00	; 0
    1ffc:	40 e8       	ldi	r20, 0x80	; 128
    1ffe:	5f e3       	ldi	r21, 0x3F	; 63
    2000:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2004:	88 23       	and	r24, r24
    2006:	2c f4       	brge	.+10     	; 0x2012 <LCD_sendCommand+0x7c>
		__ticks = 1;
    2008:	81 e0       	ldi	r24, 0x01	; 1
    200a:	90 e0       	ldi	r25, 0x00	; 0
    200c:	98 ab       	std	Y+48, r25	; 0x30
    200e:	8f a7       	std	Y+47, r24	; 0x2f
    2010:	3f c0       	rjmp	.+126    	; 0x2090 <LCD_sendCommand+0xfa>
	else if (__tmp > 65535)
    2012:	69 a9       	ldd	r22, Y+49	; 0x31
    2014:	7a a9       	ldd	r23, Y+50	; 0x32
    2016:	8b a9       	ldd	r24, Y+51	; 0x33
    2018:	9c a9       	ldd	r25, Y+52	; 0x34
    201a:	20 e0       	ldi	r18, 0x00	; 0
    201c:	3f ef       	ldi	r19, 0xFF	; 255
    201e:	4f e7       	ldi	r20, 0x7F	; 127
    2020:	57 e4       	ldi	r21, 0x47	; 71
    2022:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2026:	18 16       	cp	r1, r24
    2028:	4c f5       	brge	.+82     	; 0x207c <LCD_sendCommand+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    202a:	6d a9       	ldd	r22, Y+53	; 0x35
    202c:	7e a9       	ldd	r23, Y+54	; 0x36
    202e:	8f a9       	ldd	r24, Y+55	; 0x37
    2030:	98 ad       	ldd	r25, Y+56	; 0x38
    2032:	20 e0       	ldi	r18, 0x00	; 0
    2034:	30 e0       	ldi	r19, 0x00	; 0
    2036:	40 e2       	ldi	r20, 0x20	; 32
    2038:	51 e4       	ldi	r21, 0x41	; 65
    203a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    203e:	dc 01       	movw	r26, r24
    2040:	cb 01       	movw	r24, r22
    2042:	bc 01       	movw	r22, r24
    2044:	cd 01       	movw	r24, r26
    2046:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	98 ab       	std	Y+48, r25	; 0x30
    2050:	8f a7       	std	Y+47, r24	; 0x2f
    2052:	0f c0       	rjmp	.+30     	; 0x2072 <LCD_sendCommand+0xdc>
    2054:	89 e1       	ldi	r24, 0x19	; 25
    2056:	90 e0       	ldi	r25, 0x00	; 0
    2058:	9e a7       	std	Y+46, r25	; 0x2e
    205a:	8d a7       	std	Y+45, r24	; 0x2d
    205c:	8d a5       	ldd	r24, Y+45	; 0x2d
    205e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2060:	01 97       	sbiw	r24, 0x01	; 1
    2062:	f1 f7       	brne	.-4      	; 0x2060 <LCD_sendCommand+0xca>
    2064:	9e a7       	std	Y+46, r25	; 0x2e
    2066:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2068:	8f a5       	ldd	r24, Y+47	; 0x2f
    206a:	98 a9       	ldd	r25, Y+48	; 0x30
    206c:	01 97       	sbiw	r24, 0x01	; 1
    206e:	98 ab       	std	Y+48, r25	; 0x30
    2070:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2072:	8f a5       	ldd	r24, Y+47	; 0x2f
    2074:	98 a9       	ldd	r25, Y+48	; 0x30
    2076:	00 97       	sbiw	r24, 0x00	; 0
    2078:	69 f7       	brne	.-38     	; 0x2054 <LCD_sendCommand+0xbe>
    207a:	14 c0       	rjmp	.+40     	; 0x20a4 <LCD_sendCommand+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    207c:	69 a9       	ldd	r22, Y+49	; 0x31
    207e:	7a a9       	ldd	r23, Y+50	; 0x32
    2080:	8b a9       	ldd	r24, Y+51	; 0x33
    2082:	9c a9       	ldd	r25, Y+52	; 0x34
    2084:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2088:	dc 01       	movw	r26, r24
    208a:	cb 01       	movw	r24, r22
    208c:	98 ab       	std	Y+48, r25	; 0x30
    208e:	8f a7       	std	Y+47, r24	; 0x2f
    2090:	8f a5       	ldd	r24, Y+47	; 0x2f
    2092:	98 a9       	ldd	r25, Y+48	; 0x30
    2094:	9c a7       	std	Y+44, r25	; 0x2c
    2096:	8b a7       	std	Y+43, r24	; 0x2b
    2098:	8b a5       	ldd	r24, Y+43	; 0x2b
    209a:	9c a5       	ldd	r25, Y+44	; 0x2c
    209c:	01 97       	sbiw	r24, 0x01	; 1
    209e:	f1 f7       	brne	.-4      	; 0x209c <LCD_sendCommand+0x106>
    20a0:	9c a7       	std	Y+44, r25	; 0x2c
    20a2:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    20a4:	82 e0       	ldi	r24, 0x02	; 2
    20a6:	62 e0       	ldi	r22, 0x02	; 2
    20a8:	41 e0       	ldi	r20, 0x01	; 1
    20aa:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <GPIO_writePin>
    20ae:	80 e0       	ldi	r24, 0x00	; 0
    20b0:	90 e0       	ldi	r25, 0x00	; 0
    20b2:	a0 e8       	ldi	r26, 0x80	; 128
    20b4:	bf e3       	ldi	r27, 0x3F	; 63
    20b6:	8f a3       	std	Y+39, r24	; 0x27
    20b8:	98 a7       	std	Y+40, r25	; 0x28
    20ba:	a9 a7       	std	Y+41, r26	; 0x29
    20bc:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20be:	6f a1       	ldd	r22, Y+39	; 0x27
    20c0:	78 a5       	ldd	r23, Y+40	; 0x28
    20c2:	89 a5       	ldd	r24, Y+41	; 0x29
    20c4:	9a a5       	ldd	r25, Y+42	; 0x2a
    20c6:	20 e0       	ldi	r18, 0x00	; 0
    20c8:	30 e0       	ldi	r19, 0x00	; 0
    20ca:	4a e7       	ldi	r20, 0x7A	; 122
    20cc:	53 e4       	ldi	r21, 0x43	; 67
    20ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20d2:	dc 01       	movw	r26, r24
    20d4:	cb 01       	movw	r24, r22
    20d6:	8b a3       	std	Y+35, r24	; 0x23
    20d8:	9c a3       	std	Y+36, r25	; 0x24
    20da:	ad a3       	std	Y+37, r26	; 0x25
    20dc:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    20de:	6b a1       	ldd	r22, Y+35	; 0x23
    20e0:	7c a1       	ldd	r23, Y+36	; 0x24
    20e2:	8d a1       	ldd	r24, Y+37	; 0x25
    20e4:	9e a1       	ldd	r25, Y+38	; 0x26
    20e6:	20 e0       	ldi	r18, 0x00	; 0
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	40 e8       	ldi	r20, 0x80	; 128
    20ec:	5f e3       	ldi	r21, 0x3F	; 63
    20ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20f2:	88 23       	and	r24, r24
    20f4:	2c f4       	brge	.+10     	; 0x2100 <LCD_sendCommand+0x16a>
		__ticks = 1;
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	9a a3       	std	Y+34, r25	; 0x22
    20fc:	89 a3       	std	Y+33, r24	; 0x21
    20fe:	3f c0       	rjmp	.+126    	; 0x217e <LCD_sendCommand+0x1e8>
	else if (__tmp > 65535)
    2100:	6b a1       	ldd	r22, Y+35	; 0x23
    2102:	7c a1       	ldd	r23, Y+36	; 0x24
    2104:	8d a1       	ldd	r24, Y+37	; 0x25
    2106:	9e a1       	ldd	r25, Y+38	; 0x26
    2108:	20 e0       	ldi	r18, 0x00	; 0
    210a:	3f ef       	ldi	r19, 0xFF	; 255
    210c:	4f e7       	ldi	r20, 0x7F	; 127
    210e:	57 e4       	ldi	r21, 0x47	; 71
    2110:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2114:	18 16       	cp	r1, r24
    2116:	4c f5       	brge	.+82     	; 0x216a <LCD_sendCommand+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2118:	6f a1       	ldd	r22, Y+39	; 0x27
    211a:	78 a5       	ldd	r23, Y+40	; 0x28
    211c:	89 a5       	ldd	r24, Y+41	; 0x29
    211e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2120:	20 e0       	ldi	r18, 0x00	; 0
    2122:	30 e0       	ldi	r19, 0x00	; 0
    2124:	40 e2       	ldi	r20, 0x20	; 32
    2126:	51 e4       	ldi	r21, 0x41	; 65
    2128:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    212c:	dc 01       	movw	r26, r24
    212e:	cb 01       	movw	r24, r22
    2130:	bc 01       	movw	r22, r24
    2132:	cd 01       	movw	r24, r26
    2134:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2138:	dc 01       	movw	r26, r24
    213a:	cb 01       	movw	r24, r22
    213c:	9a a3       	std	Y+34, r25	; 0x22
    213e:	89 a3       	std	Y+33, r24	; 0x21
    2140:	0f c0       	rjmp	.+30     	; 0x2160 <LCD_sendCommand+0x1ca>
    2142:	89 e1       	ldi	r24, 0x19	; 25
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	98 a3       	std	Y+32, r25	; 0x20
    2148:	8f 8f       	std	Y+31, r24	; 0x1f
    214a:	8f 8d       	ldd	r24, Y+31	; 0x1f
    214c:	98 a1       	ldd	r25, Y+32	; 0x20
    214e:	01 97       	sbiw	r24, 0x01	; 1
    2150:	f1 f7       	brne	.-4      	; 0x214e <LCD_sendCommand+0x1b8>
    2152:	98 a3       	std	Y+32, r25	; 0x20
    2154:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2156:	89 a1       	ldd	r24, Y+33	; 0x21
    2158:	9a a1       	ldd	r25, Y+34	; 0x22
    215a:	01 97       	sbiw	r24, 0x01	; 1
    215c:	9a a3       	std	Y+34, r25	; 0x22
    215e:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2160:	89 a1       	ldd	r24, Y+33	; 0x21
    2162:	9a a1       	ldd	r25, Y+34	; 0x22
    2164:	00 97       	sbiw	r24, 0x00	; 0
    2166:	69 f7       	brne	.-38     	; 0x2142 <LCD_sendCommand+0x1ac>
    2168:	14 c0       	rjmp	.+40     	; 0x2192 <LCD_sendCommand+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    216a:	6b a1       	ldd	r22, Y+35	; 0x23
    216c:	7c a1       	ldd	r23, Y+36	; 0x24
    216e:	8d a1       	ldd	r24, Y+37	; 0x25
    2170:	9e a1       	ldd	r25, Y+38	; 0x26
    2172:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2176:	dc 01       	movw	r26, r24
    2178:	cb 01       	movw	r24, r22
    217a:	9a a3       	std	Y+34, r25	; 0x22
    217c:	89 a3       	std	Y+33, r24	; 0x21
    217e:	89 a1       	ldd	r24, Y+33	; 0x21
    2180:	9a a1       	ldd	r25, Y+34	; 0x22
    2182:	9e 8f       	std	Y+30, r25	; 0x1e
    2184:	8d 8f       	std	Y+29, r24	; 0x1d
    2186:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2188:	9e 8d       	ldd	r25, Y+30	; 0x1e
    218a:	01 97       	sbiw	r24, 0x01	; 1
    218c:	f1 f7       	brne	.-4      	; 0x218a <LCD_sendCommand+0x1f4>
    218e:	9e 8f       	std	Y+30, r25	; 0x1e
    2190:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    2192:	80 e0       	ldi	r24, 0x00	; 0
    2194:	69 ad       	ldd	r22, Y+57	; 0x39
    2196:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <GPIO_writePort>
    219a:	80 e0       	ldi	r24, 0x00	; 0
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	a0 e8       	ldi	r26, 0x80	; 128
    21a0:	bf e3       	ldi	r27, 0x3F	; 63
    21a2:	89 8f       	std	Y+25, r24	; 0x19
    21a4:	9a 8f       	std	Y+26, r25	; 0x1a
    21a6:	ab 8f       	std	Y+27, r26	; 0x1b
    21a8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21aa:	69 8d       	ldd	r22, Y+25	; 0x19
    21ac:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21ae:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21b0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21b2:	20 e0       	ldi	r18, 0x00	; 0
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	4a e7       	ldi	r20, 0x7A	; 122
    21b8:	53 e4       	ldi	r21, 0x43	; 67
    21ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21be:	dc 01       	movw	r26, r24
    21c0:	cb 01       	movw	r24, r22
    21c2:	8d 8b       	std	Y+21, r24	; 0x15
    21c4:	9e 8b       	std	Y+22, r25	; 0x16
    21c6:	af 8b       	std	Y+23, r26	; 0x17
    21c8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    21ca:	6d 89       	ldd	r22, Y+21	; 0x15
    21cc:	7e 89       	ldd	r23, Y+22	; 0x16
    21ce:	8f 89       	ldd	r24, Y+23	; 0x17
    21d0:	98 8d       	ldd	r25, Y+24	; 0x18
    21d2:	20 e0       	ldi	r18, 0x00	; 0
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	40 e8       	ldi	r20, 0x80	; 128
    21d8:	5f e3       	ldi	r21, 0x3F	; 63
    21da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21de:	88 23       	and	r24, r24
    21e0:	2c f4       	brge	.+10     	; 0x21ec <LCD_sendCommand+0x256>
		__ticks = 1;
    21e2:	81 e0       	ldi	r24, 0x01	; 1
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	9c 8b       	std	Y+20, r25	; 0x14
    21e8:	8b 8b       	std	Y+19, r24	; 0x13
    21ea:	3f c0       	rjmp	.+126    	; 0x226a <LCD_sendCommand+0x2d4>
	else if (__tmp > 65535)
    21ec:	6d 89       	ldd	r22, Y+21	; 0x15
    21ee:	7e 89       	ldd	r23, Y+22	; 0x16
    21f0:	8f 89       	ldd	r24, Y+23	; 0x17
    21f2:	98 8d       	ldd	r25, Y+24	; 0x18
    21f4:	20 e0       	ldi	r18, 0x00	; 0
    21f6:	3f ef       	ldi	r19, 0xFF	; 255
    21f8:	4f e7       	ldi	r20, 0x7F	; 127
    21fa:	57 e4       	ldi	r21, 0x47	; 71
    21fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2200:	18 16       	cp	r1, r24
    2202:	4c f5       	brge	.+82     	; 0x2256 <LCD_sendCommand+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2204:	69 8d       	ldd	r22, Y+25	; 0x19
    2206:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2208:	8b 8d       	ldd	r24, Y+27	; 0x1b
    220a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    220c:	20 e0       	ldi	r18, 0x00	; 0
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	40 e2       	ldi	r20, 0x20	; 32
    2212:	51 e4       	ldi	r21, 0x41	; 65
    2214:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2218:	dc 01       	movw	r26, r24
    221a:	cb 01       	movw	r24, r22
    221c:	bc 01       	movw	r22, r24
    221e:	cd 01       	movw	r24, r26
    2220:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2224:	dc 01       	movw	r26, r24
    2226:	cb 01       	movw	r24, r22
    2228:	9c 8b       	std	Y+20, r25	; 0x14
    222a:	8b 8b       	std	Y+19, r24	; 0x13
    222c:	0f c0       	rjmp	.+30     	; 0x224c <LCD_sendCommand+0x2b6>
    222e:	89 e1       	ldi	r24, 0x19	; 25
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	9a 8b       	std	Y+18, r25	; 0x12
    2234:	89 8b       	std	Y+17, r24	; 0x11
    2236:	89 89       	ldd	r24, Y+17	; 0x11
    2238:	9a 89       	ldd	r25, Y+18	; 0x12
    223a:	01 97       	sbiw	r24, 0x01	; 1
    223c:	f1 f7       	brne	.-4      	; 0x223a <LCD_sendCommand+0x2a4>
    223e:	9a 8b       	std	Y+18, r25	; 0x12
    2240:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2242:	8b 89       	ldd	r24, Y+19	; 0x13
    2244:	9c 89       	ldd	r25, Y+20	; 0x14
    2246:	01 97       	sbiw	r24, 0x01	; 1
    2248:	9c 8b       	std	Y+20, r25	; 0x14
    224a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    224c:	8b 89       	ldd	r24, Y+19	; 0x13
    224e:	9c 89       	ldd	r25, Y+20	; 0x14
    2250:	00 97       	sbiw	r24, 0x00	; 0
    2252:	69 f7       	brne	.-38     	; 0x222e <LCD_sendCommand+0x298>
    2254:	14 c0       	rjmp	.+40     	; 0x227e <LCD_sendCommand+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2256:	6d 89       	ldd	r22, Y+21	; 0x15
    2258:	7e 89       	ldd	r23, Y+22	; 0x16
    225a:	8f 89       	ldd	r24, Y+23	; 0x17
    225c:	98 8d       	ldd	r25, Y+24	; 0x18
    225e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2262:	dc 01       	movw	r26, r24
    2264:	cb 01       	movw	r24, r22
    2266:	9c 8b       	std	Y+20, r25	; 0x14
    2268:	8b 8b       	std	Y+19, r24	; 0x13
    226a:	8b 89       	ldd	r24, Y+19	; 0x13
    226c:	9c 89       	ldd	r25, Y+20	; 0x14
    226e:	98 8b       	std	Y+16, r25	; 0x10
    2270:	8f 87       	std	Y+15, r24	; 0x0f
    2272:	8f 85       	ldd	r24, Y+15	; 0x0f
    2274:	98 89       	ldd	r25, Y+16	; 0x10
    2276:	01 97       	sbiw	r24, 0x01	; 1
    2278:	f1 f7       	brne	.-4      	; 0x2276 <LCD_sendCommand+0x2e0>
    227a:	98 8b       	std	Y+16, r25	; 0x10
    227c:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    227e:	82 e0       	ldi	r24, 0x02	; 2
    2280:	62 e0       	ldi	r22, 0x02	; 2
    2282:	40 e0       	ldi	r20, 0x00	; 0
    2284:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <GPIO_writePin>
    2288:	80 e0       	ldi	r24, 0x00	; 0
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	a0 e8       	ldi	r26, 0x80	; 128
    228e:	bf e3       	ldi	r27, 0x3F	; 63
    2290:	8b 87       	std	Y+11, r24	; 0x0b
    2292:	9c 87       	std	Y+12, r25	; 0x0c
    2294:	ad 87       	std	Y+13, r26	; 0x0d
    2296:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2298:	6b 85       	ldd	r22, Y+11	; 0x0b
    229a:	7c 85       	ldd	r23, Y+12	; 0x0c
    229c:	8d 85       	ldd	r24, Y+13	; 0x0d
    229e:	9e 85       	ldd	r25, Y+14	; 0x0e
    22a0:	20 e0       	ldi	r18, 0x00	; 0
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	4a e7       	ldi	r20, 0x7A	; 122
    22a6:	53 e4       	ldi	r21, 0x43	; 67
    22a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	8f 83       	std	Y+7, r24	; 0x07
    22b2:	98 87       	std	Y+8, r25	; 0x08
    22b4:	a9 87       	std	Y+9, r26	; 0x09
    22b6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22b8:	6f 81       	ldd	r22, Y+7	; 0x07
    22ba:	78 85       	ldd	r23, Y+8	; 0x08
    22bc:	89 85       	ldd	r24, Y+9	; 0x09
    22be:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c0:	20 e0       	ldi	r18, 0x00	; 0
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	40 e8       	ldi	r20, 0x80	; 128
    22c6:	5f e3       	ldi	r21, 0x3F	; 63
    22c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22cc:	88 23       	and	r24, r24
    22ce:	2c f4       	brge	.+10     	; 0x22da <LCD_sendCommand+0x344>
		__ticks = 1;
    22d0:	81 e0       	ldi	r24, 0x01	; 1
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	9e 83       	std	Y+6, r25	; 0x06
    22d6:	8d 83       	std	Y+5, r24	; 0x05
    22d8:	3f c0       	rjmp	.+126    	; 0x2358 <LCD_sendCommand+0x3c2>
	else if (__tmp > 65535)
    22da:	6f 81       	ldd	r22, Y+7	; 0x07
    22dc:	78 85       	ldd	r23, Y+8	; 0x08
    22de:	89 85       	ldd	r24, Y+9	; 0x09
    22e0:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	3f ef       	ldi	r19, 0xFF	; 255
    22e6:	4f e7       	ldi	r20, 0x7F	; 127
    22e8:	57 e4       	ldi	r21, 0x47	; 71
    22ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22ee:	18 16       	cp	r1, r24
    22f0:	4c f5       	brge	.+82     	; 0x2344 <LCD_sendCommand+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    22f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    22f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    22f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    22fa:	20 e0       	ldi	r18, 0x00	; 0
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	40 e2       	ldi	r20, 0x20	; 32
    2300:	51 e4       	ldi	r21, 0x41	; 65
    2302:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2306:	dc 01       	movw	r26, r24
    2308:	cb 01       	movw	r24, r22
    230a:	bc 01       	movw	r22, r24
    230c:	cd 01       	movw	r24, r26
    230e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2312:	dc 01       	movw	r26, r24
    2314:	cb 01       	movw	r24, r22
    2316:	9e 83       	std	Y+6, r25	; 0x06
    2318:	8d 83       	std	Y+5, r24	; 0x05
    231a:	0f c0       	rjmp	.+30     	; 0x233a <LCD_sendCommand+0x3a4>
    231c:	89 e1       	ldi	r24, 0x19	; 25
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	9c 83       	std	Y+4, r25	; 0x04
    2322:	8b 83       	std	Y+3, r24	; 0x03
    2324:	8b 81       	ldd	r24, Y+3	; 0x03
    2326:	9c 81       	ldd	r25, Y+4	; 0x04
    2328:	01 97       	sbiw	r24, 0x01	; 1
    232a:	f1 f7       	brne	.-4      	; 0x2328 <LCD_sendCommand+0x392>
    232c:	9c 83       	std	Y+4, r25	; 0x04
    232e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2330:	8d 81       	ldd	r24, Y+5	; 0x05
    2332:	9e 81       	ldd	r25, Y+6	; 0x06
    2334:	01 97       	sbiw	r24, 0x01	; 1
    2336:	9e 83       	std	Y+6, r25	; 0x06
    2338:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    233a:	8d 81       	ldd	r24, Y+5	; 0x05
    233c:	9e 81       	ldd	r25, Y+6	; 0x06
    233e:	00 97       	sbiw	r24, 0x00	; 0
    2340:	69 f7       	brne	.-38     	; 0x231c <LCD_sendCommand+0x386>
    2342:	14 c0       	rjmp	.+40     	; 0x236c <LCD_sendCommand+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2344:	6f 81       	ldd	r22, Y+7	; 0x07
    2346:	78 85       	ldd	r23, Y+8	; 0x08
    2348:	89 85       	ldd	r24, Y+9	; 0x09
    234a:	9a 85       	ldd	r25, Y+10	; 0x0a
    234c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2350:	dc 01       	movw	r26, r24
    2352:	cb 01       	movw	r24, r22
    2354:	9e 83       	std	Y+6, r25	; 0x06
    2356:	8d 83       	std	Y+5, r24	; 0x05
    2358:	8d 81       	ldd	r24, Y+5	; 0x05
    235a:	9e 81       	ldd	r25, Y+6	; 0x06
    235c:	9a 83       	std	Y+2, r25	; 0x02
    235e:	89 83       	std	Y+1, r24	; 0x01
    2360:	89 81       	ldd	r24, Y+1	; 0x01
    2362:	9a 81       	ldd	r25, Y+2	; 0x02
    2364:	01 97       	sbiw	r24, 0x01	; 1
    2366:	f1 f7       	brne	.-4      	; 0x2364 <LCD_sendCommand+0x3ce>
    2368:	9a 83       	std	Y+2, r25	; 0x02
    236a:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    236c:	e9 96       	adiw	r28, 0x39	; 57
    236e:	0f b6       	in	r0, 0x3f	; 63
    2370:	f8 94       	cli
    2372:	de bf       	out	0x3e, r29	; 62
    2374:	0f be       	out	0x3f, r0	; 63
    2376:	cd bf       	out	0x3d, r28	; 61
    2378:	cf 91       	pop	r28
    237a:	df 91       	pop	r29
    237c:	08 95       	ret

0000237e <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    237e:	df 93       	push	r29
    2380:	cf 93       	push	r28
    2382:	cd b7       	in	r28, 0x3d	; 61
    2384:	de b7       	in	r29, 0x3e	; 62
    2386:	e9 97       	sbiw	r28, 0x39	; 57
    2388:	0f b6       	in	r0, 0x3f	; 63
    238a:	f8 94       	cli
    238c:	de bf       	out	0x3e, r29	; 62
    238e:	0f be       	out	0x3f, r0	; 63
    2390:	cd bf       	out	0x3d, r28	; 61
    2392:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2394:	82 e0       	ldi	r24, 0x02	; 2
    2396:	60 e0       	ldi	r22, 0x00	; 0
    2398:	41 e0       	ldi	r20, 0x01	; 1
    239a:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <GPIO_writePin>
	GPIO_writePin(LCD_RW_PORT_ID,LCD_RW_PIN_ID,LOGIC_LOW); /* write data to LCD so RW=0 */
    239e:	82 e0       	ldi	r24, 0x02	; 2
    23a0:	61 e0       	ldi	r22, 0x01	; 1
    23a2:	40 e0       	ldi	r20, 0x00	; 0
    23a4:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <GPIO_writePin>
    23a8:	80 e0       	ldi	r24, 0x00	; 0
    23aa:	90 e0       	ldi	r25, 0x00	; 0
    23ac:	a0 e8       	ldi	r26, 0x80	; 128
    23ae:	bf e3       	ldi	r27, 0x3F	; 63
    23b0:	8d ab       	std	Y+53, r24	; 0x35
    23b2:	9e ab       	std	Y+54, r25	; 0x36
    23b4:	af ab       	std	Y+55, r26	; 0x37
    23b6:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23b8:	6d a9       	ldd	r22, Y+53	; 0x35
    23ba:	7e a9       	ldd	r23, Y+54	; 0x36
    23bc:	8f a9       	ldd	r24, Y+55	; 0x37
    23be:	98 ad       	ldd	r25, Y+56	; 0x38
    23c0:	20 e0       	ldi	r18, 0x00	; 0
    23c2:	30 e0       	ldi	r19, 0x00	; 0
    23c4:	4a e7       	ldi	r20, 0x7A	; 122
    23c6:	53 e4       	ldi	r21, 0x43	; 67
    23c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23cc:	dc 01       	movw	r26, r24
    23ce:	cb 01       	movw	r24, r22
    23d0:	89 ab       	std	Y+49, r24	; 0x31
    23d2:	9a ab       	std	Y+50, r25	; 0x32
    23d4:	ab ab       	std	Y+51, r26	; 0x33
    23d6:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    23d8:	69 a9       	ldd	r22, Y+49	; 0x31
    23da:	7a a9       	ldd	r23, Y+50	; 0x32
    23dc:	8b a9       	ldd	r24, Y+51	; 0x33
    23de:	9c a9       	ldd	r25, Y+52	; 0x34
    23e0:	20 e0       	ldi	r18, 0x00	; 0
    23e2:	30 e0       	ldi	r19, 0x00	; 0
    23e4:	40 e8       	ldi	r20, 0x80	; 128
    23e6:	5f e3       	ldi	r21, 0x3F	; 63
    23e8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23ec:	88 23       	and	r24, r24
    23ee:	2c f4       	brge	.+10     	; 0x23fa <LCD_displayCharacter+0x7c>
		__ticks = 1;
    23f0:	81 e0       	ldi	r24, 0x01	; 1
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	98 ab       	std	Y+48, r25	; 0x30
    23f6:	8f a7       	std	Y+47, r24	; 0x2f
    23f8:	3f c0       	rjmp	.+126    	; 0x2478 <LCD_displayCharacter+0xfa>
	else if (__tmp > 65535)
    23fa:	69 a9       	ldd	r22, Y+49	; 0x31
    23fc:	7a a9       	ldd	r23, Y+50	; 0x32
    23fe:	8b a9       	ldd	r24, Y+51	; 0x33
    2400:	9c a9       	ldd	r25, Y+52	; 0x34
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	3f ef       	ldi	r19, 0xFF	; 255
    2406:	4f e7       	ldi	r20, 0x7F	; 127
    2408:	57 e4       	ldi	r21, 0x47	; 71
    240a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    240e:	18 16       	cp	r1, r24
    2410:	4c f5       	brge	.+82     	; 0x2464 <LCD_displayCharacter+0xe6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2412:	6d a9       	ldd	r22, Y+53	; 0x35
    2414:	7e a9       	ldd	r23, Y+54	; 0x36
    2416:	8f a9       	ldd	r24, Y+55	; 0x37
    2418:	98 ad       	ldd	r25, Y+56	; 0x38
    241a:	20 e0       	ldi	r18, 0x00	; 0
    241c:	30 e0       	ldi	r19, 0x00	; 0
    241e:	40 e2       	ldi	r20, 0x20	; 32
    2420:	51 e4       	ldi	r21, 0x41	; 65
    2422:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2426:	dc 01       	movw	r26, r24
    2428:	cb 01       	movw	r24, r22
    242a:	bc 01       	movw	r22, r24
    242c:	cd 01       	movw	r24, r26
    242e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2432:	dc 01       	movw	r26, r24
    2434:	cb 01       	movw	r24, r22
    2436:	98 ab       	std	Y+48, r25	; 0x30
    2438:	8f a7       	std	Y+47, r24	; 0x2f
    243a:	0f c0       	rjmp	.+30     	; 0x245a <LCD_displayCharacter+0xdc>
    243c:	89 e1       	ldi	r24, 0x19	; 25
    243e:	90 e0       	ldi	r25, 0x00	; 0
    2440:	9e a7       	std	Y+46, r25	; 0x2e
    2442:	8d a7       	std	Y+45, r24	; 0x2d
    2444:	8d a5       	ldd	r24, Y+45	; 0x2d
    2446:	9e a5       	ldd	r25, Y+46	; 0x2e
    2448:	01 97       	sbiw	r24, 0x01	; 1
    244a:	f1 f7       	brne	.-4      	; 0x2448 <LCD_displayCharacter+0xca>
    244c:	9e a7       	std	Y+46, r25	; 0x2e
    244e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2450:	8f a5       	ldd	r24, Y+47	; 0x2f
    2452:	98 a9       	ldd	r25, Y+48	; 0x30
    2454:	01 97       	sbiw	r24, 0x01	; 1
    2456:	98 ab       	std	Y+48, r25	; 0x30
    2458:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    245a:	8f a5       	ldd	r24, Y+47	; 0x2f
    245c:	98 a9       	ldd	r25, Y+48	; 0x30
    245e:	00 97       	sbiw	r24, 0x00	; 0
    2460:	69 f7       	brne	.-38     	; 0x243c <LCD_displayCharacter+0xbe>
    2462:	14 c0       	rjmp	.+40     	; 0x248c <LCD_displayCharacter+0x10e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2464:	69 a9       	ldd	r22, Y+49	; 0x31
    2466:	7a a9       	ldd	r23, Y+50	; 0x32
    2468:	8b a9       	ldd	r24, Y+51	; 0x33
    246a:	9c a9       	ldd	r25, Y+52	; 0x34
    246c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2470:	dc 01       	movw	r26, r24
    2472:	cb 01       	movw	r24, r22
    2474:	98 ab       	std	Y+48, r25	; 0x30
    2476:	8f a7       	std	Y+47, r24	; 0x2f
    2478:	8f a5       	ldd	r24, Y+47	; 0x2f
    247a:	98 a9       	ldd	r25, Y+48	; 0x30
    247c:	9c a7       	std	Y+44, r25	; 0x2c
    247e:	8b a7       	std	Y+43, r24	; 0x2b
    2480:	8b a5       	ldd	r24, Y+43	; 0x2b
    2482:	9c a5       	ldd	r25, Y+44	; 0x2c
    2484:	01 97       	sbiw	r24, 0x01	; 1
    2486:	f1 f7       	brne	.-4      	; 0x2484 <LCD_displayCharacter+0x106>
    2488:	9c a7       	std	Y+44, r25	; 0x2c
    248a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    248c:	82 e0       	ldi	r24, 0x02	; 2
    248e:	62 e0       	ldi	r22, 0x02	; 2
    2490:	41 e0       	ldi	r20, 0x01	; 1
    2492:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <GPIO_writePin>
    2496:	80 e0       	ldi	r24, 0x00	; 0
    2498:	90 e0       	ldi	r25, 0x00	; 0
    249a:	a0 e8       	ldi	r26, 0x80	; 128
    249c:	bf e3       	ldi	r27, 0x3F	; 63
    249e:	8f a3       	std	Y+39, r24	; 0x27
    24a0:	98 a7       	std	Y+40, r25	; 0x28
    24a2:	a9 a7       	std	Y+41, r26	; 0x29
    24a4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a6:	6f a1       	ldd	r22, Y+39	; 0x27
    24a8:	78 a5       	ldd	r23, Y+40	; 0x28
    24aa:	89 a5       	ldd	r24, Y+41	; 0x29
    24ac:	9a a5       	ldd	r25, Y+42	; 0x2a
    24ae:	20 e0       	ldi	r18, 0x00	; 0
    24b0:	30 e0       	ldi	r19, 0x00	; 0
    24b2:	4a e7       	ldi	r20, 0x7A	; 122
    24b4:	53 e4       	ldi	r21, 0x43	; 67
    24b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24ba:	dc 01       	movw	r26, r24
    24bc:	cb 01       	movw	r24, r22
    24be:	8b a3       	std	Y+35, r24	; 0x23
    24c0:	9c a3       	std	Y+36, r25	; 0x24
    24c2:	ad a3       	std	Y+37, r26	; 0x25
    24c4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    24c6:	6b a1       	ldd	r22, Y+35	; 0x23
    24c8:	7c a1       	ldd	r23, Y+36	; 0x24
    24ca:	8d a1       	ldd	r24, Y+37	; 0x25
    24cc:	9e a1       	ldd	r25, Y+38	; 0x26
    24ce:	20 e0       	ldi	r18, 0x00	; 0
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	40 e8       	ldi	r20, 0x80	; 128
    24d4:	5f e3       	ldi	r21, 0x3F	; 63
    24d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24da:	88 23       	and	r24, r24
    24dc:	2c f4       	brge	.+10     	; 0x24e8 <LCD_displayCharacter+0x16a>
		__ticks = 1;
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	90 e0       	ldi	r25, 0x00	; 0
    24e2:	9a a3       	std	Y+34, r25	; 0x22
    24e4:	89 a3       	std	Y+33, r24	; 0x21
    24e6:	3f c0       	rjmp	.+126    	; 0x2566 <LCD_displayCharacter+0x1e8>
	else if (__tmp > 65535)
    24e8:	6b a1       	ldd	r22, Y+35	; 0x23
    24ea:	7c a1       	ldd	r23, Y+36	; 0x24
    24ec:	8d a1       	ldd	r24, Y+37	; 0x25
    24ee:	9e a1       	ldd	r25, Y+38	; 0x26
    24f0:	20 e0       	ldi	r18, 0x00	; 0
    24f2:	3f ef       	ldi	r19, 0xFF	; 255
    24f4:	4f e7       	ldi	r20, 0x7F	; 127
    24f6:	57 e4       	ldi	r21, 0x47	; 71
    24f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24fc:	18 16       	cp	r1, r24
    24fe:	4c f5       	brge	.+82     	; 0x2552 <LCD_displayCharacter+0x1d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2500:	6f a1       	ldd	r22, Y+39	; 0x27
    2502:	78 a5       	ldd	r23, Y+40	; 0x28
    2504:	89 a5       	ldd	r24, Y+41	; 0x29
    2506:	9a a5       	ldd	r25, Y+42	; 0x2a
    2508:	20 e0       	ldi	r18, 0x00	; 0
    250a:	30 e0       	ldi	r19, 0x00	; 0
    250c:	40 e2       	ldi	r20, 0x20	; 32
    250e:	51 e4       	ldi	r21, 0x41	; 65
    2510:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2514:	dc 01       	movw	r26, r24
    2516:	cb 01       	movw	r24, r22
    2518:	bc 01       	movw	r22, r24
    251a:	cd 01       	movw	r24, r26
    251c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2520:	dc 01       	movw	r26, r24
    2522:	cb 01       	movw	r24, r22
    2524:	9a a3       	std	Y+34, r25	; 0x22
    2526:	89 a3       	std	Y+33, r24	; 0x21
    2528:	0f c0       	rjmp	.+30     	; 0x2548 <LCD_displayCharacter+0x1ca>
    252a:	89 e1       	ldi	r24, 0x19	; 25
    252c:	90 e0       	ldi	r25, 0x00	; 0
    252e:	98 a3       	std	Y+32, r25	; 0x20
    2530:	8f 8f       	std	Y+31, r24	; 0x1f
    2532:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2534:	98 a1       	ldd	r25, Y+32	; 0x20
    2536:	01 97       	sbiw	r24, 0x01	; 1
    2538:	f1 f7       	brne	.-4      	; 0x2536 <LCD_displayCharacter+0x1b8>
    253a:	98 a3       	std	Y+32, r25	; 0x20
    253c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    253e:	89 a1       	ldd	r24, Y+33	; 0x21
    2540:	9a a1       	ldd	r25, Y+34	; 0x22
    2542:	01 97       	sbiw	r24, 0x01	; 1
    2544:	9a a3       	std	Y+34, r25	; 0x22
    2546:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2548:	89 a1       	ldd	r24, Y+33	; 0x21
    254a:	9a a1       	ldd	r25, Y+34	; 0x22
    254c:	00 97       	sbiw	r24, 0x00	; 0
    254e:	69 f7       	brne	.-38     	; 0x252a <LCD_displayCharacter+0x1ac>
    2550:	14 c0       	rjmp	.+40     	; 0x257a <LCD_displayCharacter+0x1fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2552:	6b a1       	ldd	r22, Y+35	; 0x23
    2554:	7c a1       	ldd	r23, Y+36	; 0x24
    2556:	8d a1       	ldd	r24, Y+37	; 0x25
    2558:	9e a1       	ldd	r25, Y+38	; 0x26
    255a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    255e:	dc 01       	movw	r26, r24
    2560:	cb 01       	movw	r24, r22
    2562:	9a a3       	std	Y+34, r25	; 0x22
    2564:	89 a3       	std	Y+33, r24	; 0x21
    2566:	89 a1       	ldd	r24, Y+33	; 0x21
    2568:	9a a1       	ldd	r25, Y+34	; 0x22
    256a:	9e 8f       	std	Y+30, r25	; 0x1e
    256c:	8d 8f       	std	Y+29, r24	; 0x1d
    256e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2570:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2572:	01 97       	sbiw	r24, 0x01	; 1
    2574:	f1 f7       	brne	.-4      	; 0x2572 <LCD_displayCharacter+0x1f4>
    2576:	9e 8f       	std	Y+30, r25	; 0x1e
    2578:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tpw - Tdws = 190ns */
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    257a:	80 e0       	ldi	r24, 0x00	; 0
    257c:	69 ad       	ldd	r22, Y+57	; 0x39
    257e:	0e 94 27 0e 	call	0x1c4e	; 0x1c4e <GPIO_writePort>
    2582:	80 e0       	ldi	r24, 0x00	; 0
    2584:	90 e0       	ldi	r25, 0x00	; 0
    2586:	a0 e8       	ldi	r26, 0x80	; 128
    2588:	bf e3       	ldi	r27, 0x3F	; 63
    258a:	89 8f       	std	Y+25, r24	; 0x19
    258c:	9a 8f       	std	Y+26, r25	; 0x1a
    258e:	ab 8f       	std	Y+27, r26	; 0x1b
    2590:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2592:	69 8d       	ldd	r22, Y+25	; 0x19
    2594:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2596:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2598:	9c 8d       	ldd	r25, Y+28	; 0x1c
    259a:	20 e0       	ldi	r18, 0x00	; 0
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	4a e7       	ldi	r20, 0x7A	; 122
    25a0:	53 e4       	ldi	r21, 0x43	; 67
    25a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25a6:	dc 01       	movw	r26, r24
    25a8:	cb 01       	movw	r24, r22
    25aa:	8d 8b       	std	Y+21, r24	; 0x15
    25ac:	9e 8b       	std	Y+22, r25	; 0x16
    25ae:	af 8b       	std	Y+23, r26	; 0x17
    25b0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    25b2:	6d 89       	ldd	r22, Y+21	; 0x15
    25b4:	7e 89       	ldd	r23, Y+22	; 0x16
    25b6:	8f 89       	ldd	r24, Y+23	; 0x17
    25b8:	98 8d       	ldd	r25, Y+24	; 0x18
    25ba:	20 e0       	ldi	r18, 0x00	; 0
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	40 e8       	ldi	r20, 0x80	; 128
    25c0:	5f e3       	ldi	r21, 0x3F	; 63
    25c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25c6:	88 23       	and	r24, r24
    25c8:	2c f4       	brge	.+10     	; 0x25d4 <LCD_displayCharacter+0x256>
		__ticks = 1;
    25ca:	81 e0       	ldi	r24, 0x01	; 1
    25cc:	90 e0       	ldi	r25, 0x00	; 0
    25ce:	9c 8b       	std	Y+20, r25	; 0x14
    25d0:	8b 8b       	std	Y+19, r24	; 0x13
    25d2:	3f c0       	rjmp	.+126    	; 0x2652 <LCD_displayCharacter+0x2d4>
	else if (__tmp > 65535)
    25d4:	6d 89       	ldd	r22, Y+21	; 0x15
    25d6:	7e 89       	ldd	r23, Y+22	; 0x16
    25d8:	8f 89       	ldd	r24, Y+23	; 0x17
    25da:	98 8d       	ldd	r25, Y+24	; 0x18
    25dc:	20 e0       	ldi	r18, 0x00	; 0
    25de:	3f ef       	ldi	r19, 0xFF	; 255
    25e0:	4f e7       	ldi	r20, 0x7F	; 127
    25e2:	57 e4       	ldi	r21, 0x47	; 71
    25e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25e8:	18 16       	cp	r1, r24
    25ea:	4c f5       	brge	.+82     	; 0x263e <LCD_displayCharacter+0x2c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25ec:	69 8d       	ldd	r22, Y+25	; 0x19
    25ee:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25f0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25f2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25f4:	20 e0       	ldi	r18, 0x00	; 0
    25f6:	30 e0       	ldi	r19, 0x00	; 0
    25f8:	40 e2       	ldi	r20, 0x20	; 32
    25fa:	51 e4       	ldi	r21, 0x41	; 65
    25fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2600:	dc 01       	movw	r26, r24
    2602:	cb 01       	movw	r24, r22
    2604:	bc 01       	movw	r22, r24
    2606:	cd 01       	movw	r24, r26
    2608:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    260c:	dc 01       	movw	r26, r24
    260e:	cb 01       	movw	r24, r22
    2610:	9c 8b       	std	Y+20, r25	; 0x14
    2612:	8b 8b       	std	Y+19, r24	; 0x13
    2614:	0f c0       	rjmp	.+30     	; 0x2634 <LCD_displayCharacter+0x2b6>
    2616:	89 e1       	ldi	r24, 0x19	; 25
    2618:	90 e0       	ldi	r25, 0x00	; 0
    261a:	9a 8b       	std	Y+18, r25	; 0x12
    261c:	89 8b       	std	Y+17, r24	; 0x11
    261e:	89 89       	ldd	r24, Y+17	; 0x11
    2620:	9a 89       	ldd	r25, Y+18	; 0x12
    2622:	01 97       	sbiw	r24, 0x01	; 1
    2624:	f1 f7       	brne	.-4      	; 0x2622 <LCD_displayCharacter+0x2a4>
    2626:	9a 8b       	std	Y+18, r25	; 0x12
    2628:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    262a:	8b 89       	ldd	r24, Y+19	; 0x13
    262c:	9c 89       	ldd	r25, Y+20	; 0x14
    262e:	01 97       	sbiw	r24, 0x01	; 1
    2630:	9c 8b       	std	Y+20, r25	; 0x14
    2632:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2634:	8b 89       	ldd	r24, Y+19	; 0x13
    2636:	9c 89       	ldd	r25, Y+20	; 0x14
    2638:	00 97       	sbiw	r24, 0x00	; 0
    263a:	69 f7       	brne	.-38     	; 0x2616 <LCD_displayCharacter+0x298>
    263c:	14 c0       	rjmp	.+40     	; 0x2666 <LCD_displayCharacter+0x2e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    263e:	6d 89       	ldd	r22, Y+21	; 0x15
    2640:	7e 89       	ldd	r23, Y+22	; 0x16
    2642:	8f 89       	ldd	r24, Y+23	; 0x17
    2644:	98 8d       	ldd	r25, Y+24	; 0x18
    2646:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    264a:	dc 01       	movw	r26, r24
    264c:	cb 01       	movw	r24, r22
    264e:	9c 8b       	std	Y+20, r25	; 0x14
    2650:	8b 8b       	std	Y+19, r24	; 0x13
    2652:	8b 89       	ldd	r24, Y+19	; 0x13
    2654:	9c 89       	ldd	r25, Y+20	; 0x14
    2656:	98 8b       	std	Y+16, r25	; 0x10
    2658:	8f 87       	std	Y+15, r24	; 0x0f
    265a:	8f 85       	ldd	r24, Y+15	; 0x0f
    265c:	98 89       	ldd	r25, Y+16	; 0x10
    265e:	01 97       	sbiw	r24, 0x01	; 1
    2660:	f1 f7       	brne	.-4      	; 0x265e <LCD_displayCharacter+0x2e0>
    2662:	98 8b       	std	Y+16, r25	; 0x10
    2664:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2666:	82 e0       	ldi	r24, 0x02	; 2
    2668:	62 e0       	ldi	r22, 0x02	; 2
    266a:	40 e0       	ldi	r20, 0x00	; 0
    266c:	0e 94 5d 0c 	call	0x18ba	; 0x18ba <GPIO_writePin>
    2670:	80 e0       	ldi	r24, 0x00	; 0
    2672:	90 e0       	ldi	r25, 0x00	; 0
    2674:	a0 e8       	ldi	r26, 0x80	; 128
    2676:	bf e3       	ldi	r27, 0x3F	; 63
    2678:	8b 87       	std	Y+11, r24	; 0x0b
    267a:	9c 87       	std	Y+12, r25	; 0x0c
    267c:	ad 87       	std	Y+13, r26	; 0x0d
    267e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2680:	6b 85       	ldd	r22, Y+11	; 0x0b
    2682:	7c 85       	ldd	r23, Y+12	; 0x0c
    2684:	8d 85       	ldd	r24, Y+13	; 0x0d
    2686:	9e 85       	ldd	r25, Y+14	; 0x0e
    2688:	20 e0       	ldi	r18, 0x00	; 0
    268a:	30 e0       	ldi	r19, 0x00	; 0
    268c:	4a e7       	ldi	r20, 0x7A	; 122
    268e:	53 e4       	ldi	r21, 0x43	; 67
    2690:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2694:	dc 01       	movw	r26, r24
    2696:	cb 01       	movw	r24, r22
    2698:	8f 83       	std	Y+7, r24	; 0x07
    269a:	98 87       	std	Y+8, r25	; 0x08
    269c:	a9 87       	std	Y+9, r26	; 0x09
    269e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26a0:	6f 81       	ldd	r22, Y+7	; 0x07
    26a2:	78 85       	ldd	r23, Y+8	; 0x08
    26a4:	89 85       	ldd	r24, Y+9	; 0x09
    26a6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26a8:	20 e0       	ldi	r18, 0x00	; 0
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	40 e8       	ldi	r20, 0x80	; 128
    26ae:	5f e3       	ldi	r21, 0x3F	; 63
    26b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26b4:	88 23       	and	r24, r24
    26b6:	2c f4       	brge	.+10     	; 0x26c2 <LCD_displayCharacter+0x344>
		__ticks = 1;
    26b8:	81 e0       	ldi	r24, 0x01	; 1
    26ba:	90 e0       	ldi	r25, 0x00	; 0
    26bc:	9e 83       	std	Y+6, r25	; 0x06
    26be:	8d 83       	std	Y+5, r24	; 0x05
    26c0:	3f c0       	rjmp	.+126    	; 0x2740 <LCD_displayCharacter+0x3c2>
	else if (__tmp > 65535)
    26c2:	6f 81       	ldd	r22, Y+7	; 0x07
    26c4:	78 85       	ldd	r23, Y+8	; 0x08
    26c6:	89 85       	ldd	r24, Y+9	; 0x09
    26c8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26ca:	20 e0       	ldi	r18, 0x00	; 0
    26cc:	3f ef       	ldi	r19, 0xFF	; 255
    26ce:	4f e7       	ldi	r20, 0x7F	; 127
    26d0:	57 e4       	ldi	r21, 0x47	; 71
    26d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26d6:	18 16       	cp	r1, r24
    26d8:	4c f5       	brge	.+82     	; 0x272c <LCD_displayCharacter+0x3ae>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26da:	6b 85       	ldd	r22, Y+11	; 0x0b
    26dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    26de:	8d 85       	ldd	r24, Y+13	; 0x0d
    26e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    26e2:	20 e0       	ldi	r18, 0x00	; 0
    26e4:	30 e0       	ldi	r19, 0x00	; 0
    26e6:	40 e2       	ldi	r20, 0x20	; 32
    26e8:	51 e4       	ldi	r21, 0x41	; 65
    26ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ee:	dc 01       	movw	r26, r24
    26f0:	cb 01       	movw	r24, r22
    26f2:	bc 01       	movw	r22, r24
    26f4:	cd 01       	movw	r24, r26
    26f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26fa:	dc 01       	movw	r26, r24
    26fc:	cb 01       	movw	r24, r22
    26fe:	9e 83       	std	Y+6, r25	; 0x06
    2700:	8d 83       	std	Y+5, r24	; 0x05
    2702:	0f c0       	rjmp	.+30     	; 0x2722 <LCD_displayCharacter+0x3a4>
    2704:	89 e1       	ldi	r24, 0x19	; 25
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	9c 83       	std	Y+4, r25	; 0x04
    270a:	8b 83       	std	Y+3, r24	; 0x03
    270c:	8b 81       	ldd	r24, Y+3	; 0x03
    270e:	9c 81       	ldd	r25, Y+4	; 0x04
    2710:	01 97       	sbiw	r24, 0x01	; 1
    2712:	f1 f7       	brne	.-4      	; 0x2710 <LCD_displayCharacter+0x392>
    2714:	9c 83       	std	Y+4, r25	; 0x04
    2716:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2718:	8d 81       	ldd	r24, Y+5	; 0x05
    271a:	9e 81       	ldd	r25, Y+6	; 0x06
    271c:	01 97       	sbiw	r24, 0x01	; 1
    271e:	9e 83       	std	Y+6, r25	; 0x06
    2720:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2722:	8d 81       	ldd	r24, Y+5	; 0x05
    2724:	9e 81       	ldd	r25, Y+6	; 0x06
    2726:	00 97       	sbiw	r24, 0x00	; 0
    2728:	69 f7       	brne	.-38     	; 0x2704 <LCD_displayCharacter+0x386>
    272a:	14 c0       	rjmp	.+40     	; 0x2754 <LCD_displayCharacter+0x3d6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    272c:	6f 81       	ldd	r22, Y+7	; 0x07
    272e:	78 85       	ldd	r23, Y+8	; 0x08
    2730:	89 85       	ldd	r24, Y+9	; 0x09
    2732:	9a 85       	ldd	r25, Y+10	; 0x0a
    2734:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2738:	dc 01       	movw	r26, r24
    273a:	cb 01       	movw	r24, r22
    273c:	9e 83       	std	Y+6, r25	; 0x06
    273e:	8d 83       	std	Y+5, r24	; 0x05
    2740:	8d 81       	ldd	r24, Y+5	; 0x05
    2742:	9e 81       	ldd	r25, Y+6	; 0x06
    2744:	9a 83       	std	Y+2, r25	; 0x02
    2746:	89 83       	std	Y+1, r24	; 0x01
    2748:	89 81       	ldd	r24, Y+1	; 0x01
    274a:	9a 81       	ldd	r25, Y+2	; 0x02
    274c:	01 97       	sbiw	r24, 0x01	; 1
    274e:	f1 f7       	brne	.-4      	; 0x274c <LCD_displayCharacter+0x3ce>
    2750:	9a 83       	std	Y+2, r25	; 0x02
    2752:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
}
    2754:	e9 96       	adiw	r28, 0x39	; 57
    2756:	0f b6       	in	r0, 0x3f	; 63
    2758:	f8 94       	cli
    275a:	de bf       	out	0x3e, r29	; 62
    275c:	0f be       	out	0x3f, r0	; 63
    275e:	cd bf       	out	0x3d, r28	; 61
    2760:	cf 91       	pop	r28
    2762:	df 91       	pop	r29
    2764:	08 95       	ret

00002766 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2766:	df 93       	push	r29
    2768:	cf 93       	push	r28
    276a:	00 d0       	rcall	.+0      	; 0x276c <LCD_displayString+0x6>
    276c:	0f 92       	push	r0
    276e:	cd b7       	in	r28, 0x3d	; 61
    2770:	de b7       	in	r29, 0x3e	; 62
    2772:	9b 83       	std	Y+3, r25	; 0x03
    2774:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2776:	19 82       	std	Y+1, r1	; 0x01
    2778:	0e c0       	rjmp	.+28     	; 0x2796 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    277a:	89 81       	ldd	r24, Y+1	; 0x01
    277c:	28 2f       	mov	r18, r24
    277e:	30 e0       	ldi	r19, 0x00	; 0
    2780:	8a 81       	ldd	r24, Y+2	; 0x02
    2782:	9b 81       	ldd	r25, Y+3	; 0x03
    2784:	fc 01       	movw	r30, r24
    2786:	e2 0f       	add	r30, r18
    2788:	f3 1f       	adc	r31, r19
    278a:	80 81       	ld	r24, Z
    278c:	0e 94 bf 11 	call	0x237e	; 0x237e <LCD_displayCharacter>
		i++;
    2790:	89 81       	ldd	r24, Y+1	; 0x01
    2792:	8f 5f       	subi	r24, 0xFF	; 255
    2794:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2796:	89 81       	ldd	r24, Y+1	; 0x01
    2798:	28 2f       	mov	r18, r24
    279a:	30 e0       	ldi	r19, 0x00	; 0
    279c:	8a 81       	ldd	r24, Y+2	; 0x02
    279e:	9b 81       	ldd	r25, Y+3	; 0x03
    27a0:	fc 01       	movw	r30, r24
    27a2:	e2 0f       	add	r30, r18
    27a4:	f3 1f       	adc	r31, r19
    27a6:	80 81       	ld	r24, Z
    27a8:	88 23       	and	r24, r24
    27aa:	39 f7       	brne	.-50     	; 0x277a <LCD_displayString+0x14>
	{
		LCD_displayCharacter(Str[i]);
		i++;
	}
}
    27ac:	0f 90       	pop	r0
    27ae:	0f 90       	pop	r0
    27b0:	0f 90       	pop	r0
    27b2:	cf 91       	pop	r28
    27b4:	df 91       	pop	r29
    27b6:	08 95       	ret

000027b8 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    27b8:	df 93       	push	r29
    27ba:	cf 93       	push	r28
    27bc:	00 d0       	rcall	.+0      	; 0x27be <LCD_moveCursor+0x6>
    27be:	00 d0       	rcall	.+0      	; 0x27c0 <LCD_moveCursor+0x8>
    27c0:	0f 92       	push	r0
    27c2:	cd b7       	in	r28, 0x3d	; 61
    27c4:	de b7       	in	r29, 0x3e	; 62
    27c6:	8a 83       	std	Y+2, r24	; 0x02
    27c8:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    27ca:	8a 81       	ldd	r24, Y+2	; 0x02
    27cc:	28 2f       	mov	r18, r24
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	3d 83       	std	Y+5, r19	; 0x05
    27d2:	2c 83       	std	Y+4, r18	; 0x04
    27d4:	8c 81       	ldd	r24, Y+4	; 0x04
    27d6:	9d 81       	ldd	r25, Y+5	; 0x05
    27d8:	81 30       	cpi	r24, 0x01	; 1
    27da:	91 05       	cpc	r25, r1
    27dc:	c1 f0       	breq	.+48     	; 0x280e <LCD_moveCursor+0x56>
    27de:	2c 81       	ldd	r18, Y+4	; 0x04
    27e0:	3d 81       	ldd	r19, Y+5	; 0x05
    27e2:	22 30       	cpi	r18, 0x02	; 2
    27e4:	31 05       	cpc	r19, r1
    27e6:	2c f4       	brge	.+10     	; 0x27f2 <LCD_moveCursor+0x3a>
    27e8:	8c 81       	ldd	r24, Y+4	; 0x04
    27ea:	9d 81       	ldd	r25, Y+5	; 0x05
    27ec:	00 97       	sbiw	r24, 0x00	; 0
    27ee:	61 f0       	breq	.+24     	; 0x2808 <LCD_moveCursor+0x50>
    27f0:	19 c0       	rjmp	.+50     	; 0x2824 <LCD_moveCursor+0x6c>
    27f2:	2c 81       	ldd	r18, Y+4	; 0x04
    27f4:	3d 81       	ldd	r19, Y+5	; 0x05
    27f6:	22 30       	cpi	r18, 0x02	; 2
    27f8:	31 05       	cpc	r19, r1
    27fa:	69 f0       	breq	.+26     	; 0x2816 <LCD_moveCursor+0x5e>
    27fc:	8c 81       	ldd	r24, Y+4	; 0x04
    27fe:	9d 81       	ldd	r25, Y+5	; 0x05
    2800:	83 30       	cpi	r24, 0x03	; 3
    2802:	91 05       	cpc	r25, r1
    2804:	61 f0       	breq	.+24     	; 0x281e <LCD_moveCursor+0x66>
    2806:	0e c0       	rjmp	.+28     	; 0x2824 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2808:	8b 81       	ldd	r24, Y+3	; 0x03
    280a:	89 83       	std	Y+1, r24	; 0x01
    280c:	0b c0       	rjmp	.+22     	; 0x2824 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    280e:	8b 81       	ldd	r24, Y+3	; 0x03
    2810:	80 5c       	subi	r24, 0xC0	; 192
    2812:	89 83       	std	Y+1, r24	; 0x01
    2814:	07 c0       	rjmp	.+14     	; 0x2824 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2816:	8b 81       	ldd	r24, Y+3	; 0x03
    2818:	80 5f       	subi	r24, 0xF0	; 240
    281a:	89 83       	std	Y+1, r24	; 0x01
    281c:	03 c0       	rjmp	.+6      	; 0x2824 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    281e:	8b 81       	ldd	r24, Y+3	; 0x03
    2820:	80 5b       	subi	r24, 0xB0	; 176
    2822:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2824:	89 81       	ldd	r24, Y+1	; 0x01
    2826:	80 68       	ori	r24, 0x80	; 128
    2828:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <LCD_sendCommand>
}
    282c:	0f 90       	pop	r0
    282e:	0f 90       	pop	r0
    2830:	0f 90       	pop	r0
    2832:	0f 90       	pop	r0
    2834:	0f 90       	pop	r0
    2836:	cf 91       	pop	r28
    2838:	df 91       	pop	r29
    283a:	08 95       	ret

0000283c <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    283c:	df 93       	push	r29
    283e:	cf 93       	push	r28
    2840:	00 d0       	rcall	.+0      	; 0x2842 <LCD_displayStringRowColumn+0x6>
    2842:	00 d0       	rcall	.+0      	; 0x2844 <LCD_displayStringRowColumn+0x8>
    2844:	cd b7       	in	r28, 0x3d	; 61
    2846:	de b7       	in	r29, 0x3e	; 62
    2848:	89 83       	std	Y+1, r24	; 0x01
    284a:	6a 83       	std	Y+2, r22	; 0x02
    284c:	5c 83       	std	Y+4, r21	; 0x04
    284e:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2850:	89 81       	ldd	r24, Y+1	; 0x01
    2852:	6a 81       	ldd	r22, Y+2	; 0x02
    2854:	0e 94 dc 13 	call	0x27b8	; 0x27b8 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2858:	8b 81       	ldd	r24, Y+3	; 0x03
    285a:	9c 81       	ldd	r25, Y+4	; 0x04
    285c:	0e 94 b3 13 	call	0x2766	; 0x2766 <LCD_displayString>
}
    2860:	0f 90       	pop	r0
    2862:	0f 90       	pop	r0
    2864:	0f 90       	pop	r0
    2866:	0f 90       	pop	r0
    2868:	cf 91       	pop	r28
    286a:	df 91       	pop	r29
    286c:	08 95       	ret

0000286e <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    286e:	df 93       	push	r29
    2870:	cf 93       	push	r28
    2872:	cd b7       	in	r28, 0x3d	; 61
    2874:	de b7       	in	r29, 0x3e	; 62
    2876:	62 97       	sbiw	r28, 0x12	; 18
    2878:	0f b6       	in	r0, 0x3f	; 63
    287a:	f8 94       	cli
    287c:	de bf       	out	0x3e, r29	; 62
    287e:	0f be       	out	0x3f, r0	; 63
    2880:	cd bf       	out	0x3d, r28	; 61
    2882:	9a 8b       	std	Y+18, r25	; 0x12
    2884:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2886:	89 89       	ldd	r24, Y+17	; 0x11
    2888:	9a 89       	ldd	r25, Y+18	; 0x12
    288a:	9e 01       	movw	r18, r28
    288c:	2f 5f       	subi	r18, 0xFF	; 255
    288e:	3f 4f       	sbci	r19, 0xFF	; 255
    2890:	b9 01       	movw	r22, r18
    2892:	4a e0       	ldi	r20, 0x0A	; 10
    2894:	50 e0       	ldi	r21, 0x00	; 0
    2896:	0e 94 a1 16 	call	0x2d42	; 0x2d42 <itoa>
   LCD_displayString(buff); /* Display the string */
    289a:	ce 01       	movw	r24, r28
    289c:	01 96       	adiw	r24, 0x01	; 1
    289e:	0e 94 b3 13 	call	0x2766	; 0x2766 <LCD_displayString>
}
    28a2:	62 96       	adiw	r28, 0x12	; 18
    28a4:	0f b6       	in	r0, 0x3f	; 63
    28a6:	f8 94       	cli
    28a8:	de bf       	out	0x3e, r29	; 62
    28aa:	0f be       	out	0x3f, r0	; 63
    28ac:	cd bf       	out	0x3d, r28	; 61
    28ae:	cf 91       	pop	r28
    28b0:	df 91       	pop	r29
    28b2:	08 95       	ret

000028b4 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    28b4:	df 93       	push	r29
    28b6:	cf 93       	push	r28
    28b8:	cd b7       	in	r28, 0x3d	; 61
    28ba:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    28bc:	81 e0       	ldi	r24, 0x01	; 1
    28be:	0e 94 cb 0f 	call	0x1f96	; 0x1f96 <LCD_sendCommand>
}
    28c2:	cf 91       	pop	r28
    28c4:	df 91       	pop	r29
    28c6:	08 95       	ret

000028c8 <__vector_9>:
/*******************************************************************************
 *                       Interrupt Service Routines                            *
 *******************************************************************************/

ISR(TIMER0_OVF_vect)
{
    28c8:	1f 92       	push	r1
    28ca:	0f 92       	push	r0
    28cc:	0f b6       	in	r0, 0x3f	; 63
    28ce:	0f 92       	push	r0
    28d0:	11 24       	eor	r1, r1
    28d2:	2f 93       	push	r18
    28d4:	3f 93       	push	r19
    28d6:	4f 93       	push	r20
    28d8:	5f 93       	push	r21
    28da:	6f 93       	push	r22
    28dc:	7f 93       	push	r23
    28de:	8f 93       	push	r24
    28e0:	9f 93       	push	r25
    28e2:	af 93       	push	r26
    28e4:	bf 93       	push	r27
    28e6:	ef 93       	push	r30
    28e8:	ff 93       	push	r31
    28ea:	df 93       	push	r29
    28ec:	cf 93       	push	r28
    28ee:	cd b7       	in	r28, 0x3d	; 61
    28f0:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    28f2:	80 91 fe 00 	lds	r24, 0x00FE
    28f6:	90 91 ff 00 	lds	r25, 0x00FF
    28fa:	00 97       	sbiw	r24, 0x00	; 0
    28fc:	29 f0       	breq	.+10     	; 0x2908 <__vector_9+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)();
    28fe:	e0 91 fe 00 	lds	r30, 0x00FE
    2902:	f0 91 ff 00 	lds	r31, 0x00FF
    2906:	09 95       	icall
	}
}
    2908:	cf 91       	pop	r28
    290a:	df 91       	pop	r29
    290c:	ff 91       	pop	r31
    290e:	ef 91       	pop	r30
    2910:	bf 91       	pop	r27
    2912:	af 91       	pop	r26
    2914:	9f 91       	pop	r25
    2916:	8f 91       	pop	r24
    2918:	7f 91       	pop	r23
    291a:	6f 91       	pop	r22
    291c:	5f 91       	pop	r21
    291e:	4f 91       	pop	r20
    2920:	3f 91       	pop	r19
    2922:	2f 91       	pop	r18
    2924:	0f 90       	pop	r0
    2926:	0f be       	out	0x3f, r0	; 63
    2928:	0f 90       	pop	r0
    292a:	1f 90       	pop	r1
    292c:	18 95       	reti

0000292e <__vector_19>:

ISR(TIMER0_COMP_vect)
{
    292e:	1f 92       	push	r1
    2930:	0f 92       	push	r0
    2932:	0f b6       	in	r0, 0x3f	; 63
    2934:	0f 92       	push	r0
    2936:	11 24       	eor	r1, r1
    2938:	2f 93       	push	r18
    293a:	3f 93       	push	r19
    293c:	4f 93       	push	r20
    293e:	5f 93       	push	r21
    2940:	6f 93       	push	r22
    2942:	7f 93       	push	r23
    2944:	8f 93       	push	r24
    2946:	9f 93       	push	r25
    2948:	af 93       	push	r26
    294a:	bf 93       	push	r27
    294c:	ef 93       	push	r30
    294e:	ff 93       	push	r31
    2950:	df 93       	push	r29
    2952:	cf 93       	push	r28
    2954:	cd b7       	in	r28, 0x3d	; 61
    2956:	de b7       	in	r29, 0x3e	; 62
	if(g_callBackPtr != NULL_PTR)
    2958:	80 91 fe 00 	lds	r24, 0x00FE
    295c:	90 91 ff 00 	lds	r25, 0x00FF
    2960:	00 97       	sbiw	r24, 0x00	; 0
    2962:	29 f0       	breq	.+10     	; 0x296e <__vector_19+0x40>
	{
		/* Call the Call Back function in the application after the edge is detected */
		(*g_callBackPtr)();
    2964:	e0 91 fe 00 	lds	r30, 0x00FE
    2968:	f0 91 ff 00 	lds	r31, 0x00FF
    296c:	09 95       	icall
	}
}
    296e:	cf 91       	pop	r28
    2970:	df 91       	pop	r29
    2972:	ff 91       	pop	r31
    2974:	ef 91       	pop	r30
    2976:	bf 91       	pop	r27
    2978:	af 91       	pop	r26
    297a:	9f 91       	pop	r25
    297c:	8f 91       	pop	r24
    297e:	7f 91       	pop	r23
    2980:	6f 91       	pop	r22
    2982:	5f 91       	pop	r21
    2984:	4f 91       	pop	r20
    2986:	3f 91       	pop	r19
    2988:	2f 91       	pop	r18
    298a:	0f 90       	pop	r0
    298c:	0f be       	out	0x3f, r0	; 63
    298e:	0f 90       	pop	r0
    2990:	1f 90       	pop	r1
    2992:	18 95       	reti

00002994 <Timer0_Init>:
 * 5. Set the initial value of the timer
 * 6. Set the compare value of the timer if working in compare mode
 * 7. Enable Timer0 Compare Interrupt if in compare mode
 * 8. Enable Timer0 Overflow Interrupt if in normal mode
 */
void Timer0_Init(const TIMER0_ConfigType * Config_Ptr){
    2994:	df 93       	push	r29
    2996:	cf 93       	push	r28
    2998:	00 d0       	rcall	.+0      	; 0x299a <Timer0_Init+0x6>
    299a:	cd b7       	in	r28, 0x3d	; 61
    299c:	de b7       	in	r29, 0x3e	; 62
    299e:	9a 83       	std	Y+2, r25	; 0x02
    29a0:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = Config_Ptr->initial_value;
    29a2:	a2 e5       	ldi	r26, 0x52	; 82
    29a4:	b0 e0       	ldi	r27, 0x00	; 0
    29a6:	e9 81       	ldd	r30, Y+1	; 0x01
    29a8:	fa 81       	ldd	r31, Y+2	; 0x02
    29aa:	82 81       	ldd	r24, Z+2	; 0x02
    29ac:	8c 93       	st	X, r24

	SET_BIT(TCCR0,FOC0);//this bit is for either normal or compare mode
    29ae:	a3 e5       	ldi	r26, 0x53	; 83
    29b0:	b0 e0       	ldi	r27, 0x00	; 0
    29b2:	e3 e5       	ldi	r30, 0x53	; 83
    29b4:	f0 e0       	ldi	r31, 0x00	; 0
    29b6:	80 81       	ld	r24, Z
    29b8:	80 68       	ori	r24, 0x80	; 128
    29ba:	8c 93       	st	X, r24

	TCCR0 = (TCCR0 & 0xF8) | (Config_Ptr->prescaler); //set and clear prescaler bits as desired
    29bc:	a3 e5       	ldi	r26, 0x53	; 83
    29be:	b0 e0       	ldi	r27, 0x00	; 0
    29c0:	e3 e5       	ldi	r30, 0x53	; 83
    29c2:	f0 e0       	ldi	r31, 0x00	; 0
    29c4:	80 81       	ld	r24, Z
    29c6:	98 2f       	mov	r25, r24
    29c8:	98 7f       	andi	r25, 0xF8	; 248
    29ca:	e9 81       	ldd	r30, Y+1	; 0x01
    29cc:	fa 81       	ldd	r31, Y+2	; 0x02
    29ce:	81 81       	ldd	r24, Z+1	; 0x01
    29d0:	89 2b       	or	r24, r25
    29d2:	8c 93       	st	X, r24

	if(Config_Ptr->mode == COMPARE_MODE){
    29d4:	e9 81       	ldd	r30, Y+1	; 0x01
    29d6:	fa 81       	ldd	r31, Y+2	; 0x02
    29d8:	80 81       	ld	r24, Z
    29da:	81 30       	cpi	r24, 0x01	; 1
    29dc:	a9 f4       	brne	.+42     	; 0x2a08 <Timer0_Init+0x74>

		SET_BIT(TCCR0,WGM01);
    29de:	a3 e5       	ldi	r26, 0x53	; 83
    29e0:	b0 e0       	ldi	r27, 0x00	; 0
    29e2:	e3 e5       	ldi	r30, 0x53	; 83
    29e4:	f0 e0       	ldi	r31, 0x00	; 0
    29e6:	80 81       	ld	r24, Z
    29e8:	88 60       	ori	r24, 0x08	; 8
    29ea:	8c 93       	st	X, r24
		OCR0 = Config_Ptr->compare_value;
    29ec:	ac e5       	ldi	r26, 0x5C	; 92
    29ee:	b0 e0       	ldi	r27, 0x00	; 0
    29f0:	e9 81       	ldd	r30, Y+1	; 0x01
    29f2:	fa 81       	ldd	r31, Y+2	; 0x02
    29f4:	83 81       	ldd	r24, Z+3	; 0x03
    29f6:	8c 93       	st	X, r24
		SET_BIT(TIMSK,OCIE0);
    29f8:	a9 e5       	ldi	r26, 0x59	; 89
    29fa:	b0 e0       	ldi	r27, 0x00	; 0
    29fc:	e9 e5       	ldi	r30, 0x59	; 89
    29fe:	f0 e0       	ldi	r31, 0x00	; 0
    2a00:	80 81       	ld	r24, Z
    2a02:	82 60       	ori	r24, 0x02	; 2
    2a04:	8c 93       	st	X, r24
    2a06:	07 c0       	rjmp	.+14     	; 0x2a16 <Timer0_Init+0x82>
	}
	else{
		SET_BIT(TIMSK,TOIE0);
    2a08:	a9 e5       	ldi	r26, 0x59	; 89
    2a0a:	b0 e0       	ldi	r27, 0x00	; 0
    2a0c:	e9 e5       	ldi	r30, 0x59	; 89
    2a0e:	f0 e0       	ldi	r31, 0x00	; 0
    2a10:	80 81       	ld	r24, Z
    2a12:	81 60       	ori	r24, 0x01	; 1
    2a14:	8c 93       	st	X, r24
	}
}
    2a16:	0f 90       	pop	r0
    2a18:	0f 90       	pop	r0
    2a1a:	cf 91       	pop	r28
    2a1c:	df 91       	pop	r29
    2a1e:	08 95       	ret

00002a20 <Timer0_DeInit>:

/*
 * Description: Function to disable the Timer0 to stop the TIMER Driver
 */
void Timer0_DeInit(void){
    2a20:	df 93       	push	r29
    2a22:	cf 93       	push	r28
    2a24:	cd b7       	in	r28, 0x3d	; 61
    2a26:	de b7       	in	r29, 0x3e	; 62

	/*Clear all Timer0 registers*/
	TCCR0=0;
    2a28:	e3 e5       	ldi	r30, 0x53	; 83
    2a2a:	f0 e0       	ldi	r31, 0x00	; 0
    2a2c:	10 82       	st	Z, r1
	TCNT0=0;
    2a2e:	e2 e5       	ldi	r30, 0x52	; 82
    2a30:	f0 e0       	ldi	r31, 0x00	; 0
    2a32:	10 82       	st	Z, r1
	OCR0=0;
    2a34:	ec e5       	ldi	r30, 0x5C	; 92
    2a36:	f0 e0       	ldi	r31, 0x00	; 0
    2a38:	10 82       	st	Z, r1
	TIMSK=0;
    2a3a:	e9 e5       	ldi	r30, 0x59	; 89
    2a3c:	f0 e0       	ldi	r31, 0x00	; 0
    2a3e:	10 82       	st	Z, r1
}
    2a40:	cf 91       	pop	r28
    2a42:	df 91       	pop	r29
    2a44:	08 95       	ret

00002a46 <Timer0_setCallBack>:

/*
 * Description: Function to set the Call Back function address.
 */
void Timer0_setCallBack(void(*a_ptr)(void))
{
    2a46:	df 93       	push	r29
    2a48:	cf 93       	push	r28
    2a4a:	00 d0       	rcall	.+0      	; 0x2a4c <Timer0_setCallBack+0x6>
    2a4c:	cd b7       	in	r28, 0x3d	; 61
    2a4e:	de b7       	in	r29, 0x3e	; 62
    2a50:	9a 83       	std	Y+2, r25	; 0x02
    2a52:	89 83       	std	Y+1, r24	; 0x01
	/* Save the address of the Call back function in a global variable */
	g_callBackPtr = a_ptr;
    2a54:	89 81       	ldd	r24, Y+1	; 0x01
    2a56:	9a 81       	ldd	r25, Y+2	; 0x02
    2a58:	90 93 ff 00 	sts	0x00FF, r25
    2a5c:	80 93 fe 00 	sts	0x00FE, r24
}
    2a60:	0f 90       	pop	r0
    2a62:	0f 90       	pop	r0
    2a64:	cf 91       	pop	r28
    2a66:	df 91       	pop	r29
    2a68:	08 95       	ret

00002a6a <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const Usart_ConfigType * Config_Ptr)
{
    2a6a:	df 93       	push	r29
    2a6c:	cf 93       	push	r28
    2a6e:	00 d0       	rcall	.+0      	; 0x2a70 <UART_init+0x6>
    2a70:	00 d0       	rcall	.+0      	; 0x2a72 <UART_init+0x8>
    2a72:	cd b7       	in	r28, 0x3d	; 61
    2a74:	de b7       	in	r29, 0x3e	; 62
    2a76:	9c 83       	std	Y+4, r25	; 0x04
    2a78:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2a7a:	1a 82       	std	Y+2, r1	; 0x02
    2a7c:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2a7e:	eb e2       	ldi	r30, 0x2B	; 43
    2a80:	f0 e0       	ldi	r31, 0x00	; 0
    2a82:	82 e0       	ldi	r24, 0x02	; 2
    2a84:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2a86:	ea e2       	ldi	r30, 0x2A	; 42
    2a88:	f0 e0       	ldi	r31, 0x00	; 0
    2a8a:	88 e1       	ldi	r24, 0x18	; 24
    2a8c:	80 83       	st	Z, r24
	/************************** UCSRC Description **************************
	 * URSEL   = 1 The URSEL must be one when writing the UCSRC
	 * UMSEL   = 0 Asynchronous Operation
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL);
    2a8e:	e0 e4       	ldi	r30, 0x40	; 64
    2a90:	f0 e0       	ldi	r31, 0x00	; 0
    2a92:	80 e8       	ldi	r24, 0x80	; 128
    2a94:	80 83       	st	Z, r24

	UCSRC = (UCSRC & 0xCF) | ((Config_Ptr->parity) <<4);
    2a96:	a0 e4       	ldi	r26, 0x40	; 64
    2a98:	b0 e0       	ldi	r27, 0x00	; 0
    2a9a:	e0 e4       	ldi	r30, 0x40	; 64
    2a9c:	f0 e0       	ldi	r31, 0x00	; 0
    2a9e:	80 81       	ld	r24, Z
    2aa0:	28 2f       	mov	r18, r24
    2aa2:	2f 7c       	andi	r18, 0xCF	; 207
    2aa4:	eb 81       	ldd	r30, Y+3	; 0x03
    2aa6:	fc 81       	ldd	r31, Y+4	; 0x04
    2aa8:	80 81       	ld	r24, Z
    2aaa:	88 2f       	mov	r24, r24
    2aac:	90 e0       	ldi	r25, 0x00	; 0
    2aae:	82 95       	swap	r24
    2ab0:	92 95       	swap	r25
    2ab2:	90 7f       	andi	r25, 0xF0	; 240
    2ab4:	98 27       	eor	r25, r24
    2ab6:	80 7f       	andi	r24, 0xF0	; 240
    2ab8:	98 27       	eor	r25, r24
    2aba:	82 2b       	or	r24, r18
    2abc:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF7) | ((Config_Ptr->stop)<<3);
    2abe:	a0 e4       	ldi	r26, 0x40	; 64
    2ac0:	b0 e0       	ldi	r27, 0x00	; 0
    2ac2:	e0 e4       	ldi	r30, 0x40	; 64
    2ac4:	f0 e0       	ldi	r31, 0x00	; 0
    2ac6:	80 81       	ld	r24, Z
    2ac8:	28 2f       	mov	r18, r24
    2aca:	27 7f       	andi	r18, 0xF7	; 247
    2acc:	eb 81       	ldd	r30, Y+3	; 0x03
    2ace:	fc 81       	ldd	r31, Y+4	; 0x04
    2ad0:	81 81       	ldd	r24, Z+1	; 0x01
    2ad2:	88 2f       	mov	r24, r24
    2ad4:	90 e0       	ldi	r25, 0x00	; 0
    2ad6:	88 0f       	add	r24, r24
    2ad8:	99 1f       	adc	r25, r25
    2ada:	88 0f       	add	r24, r24
    2adc:	99 1f       	adc	r25, r25
    2ade:	88 0f       	add	r24, r24
    2ae0:	99 1f       	adc	r25, r25
    2ae2:	82 2b       	or	r24, r18
    2ae4:	8c 93       	st	X, r24
	UCSRC = (UCSRC & 0xF9) | ((Config_Ptr->data_bits)<<1);
    2ae6:	a0 e4       	ldi	r26, 0x40	; 64
    2ae8:	b0 e0       	ldi	r27, 0x00	; 0
    2aea:	e0 e4       	ldi	r30, 0x40	; 64
    2aec:	f0 e0       	ldi	r31, 0x00	; 0
    2aee:	80 81       	ld	r24, Z
    2af0:	28 2f       	mov	r18, r24
    2af2:	29 7f       	andi	r18, 0xF9	; 249
    2af4:	eb 81       	ldd	r30, Y+3	; 0x03
    2af6:	fc 81       	ldd	r31, Y+4	; 0x04
    2af8:	82 81       	ldd	r24, Z+2	; 0x02
    2afa:	88 2f       	mov	r24, r24
    2afc:	90 e0       	ldi	r25, 0x00	; 0
    2afe:	88 0f       	add	r24, r24
    2b00:	99 1f       	adc	r25, r25
    2b02:	82 2b       	or	r24, r18
    2b04:	8c 93       	st	X, r24
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / ((Config_Ptr->baud_rate) * 8UL))) - 1);
    2b06:	eb 81       	ldd	r30, Y+3	; 0x03
    2b08:	fc 81       	ldd	r31, Y+4	; 0x04
    2b0a:	83 81       	ldd	r24, Z+3	; 0x03
    2b0c:	94 81       	ldd	r25, Z+4	; 0x04
    2b0e:	a5 81       	ldd	r26, Z+5	; 0x05
    2b10:	b6 81       	ldd	r27, Z+6	; 0x06
    2b12:	88 0f       	add	r24, r24
    2b14:	99 1f       	adc	r25, r25
    2b16:	aa 1f       	adc	r26, r26
    2b18:	bb 1f       	adc	r27, r27
    2b1a:	88 0f       	add	r24, r24
    2b1c:	99 1f       	adc	r25, r25
    2b1e:	aa 1f       	adc	r26, r26
    2b20:	bb 1f       	adc	r27, r27
    2b22:	88 0f       	add	r24, r24
    2b24:	99 1f       	adc	r25, r25
    2b26:	aa 1f       	adc	r26, r26
    2b28:	bb 1f       	adc	r27, r27
    2b2a:	9c 01       	movw	r18, r24
    2b2c:	ad 01       	movw	r20, r26
    2b2e:	80 e4       	ldi	r24, 0x40	; 64
    2b30:	92 e4       	ldi	r25, 0x42	; 66
    2b32:	af e0       	ldi	r26, 0x0F	; 15
    2b34:	b0 e0       	ldi	r27, 0x00	; 0
    2b36:	bc 01       	movw	r22, r24
    2b38:	cd 01       	movw	r24, r26
    2b3a:	0e 94 48 16 	call	0x2c90	; 0x2c90 <__udivmodsi4>
    2b3e:	da 01       	movw	r26, r20
    2b40:	c9 01       	movw	r24, r18
    2b42:	01 97       	sbiw	r24, 0x01	; 1
    2b44:	9a 83       	std	Y+2, r25	; 0x02
    2b46:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2b48:	e0 e4       	ldi	r30, 0x40	; 64
    2b4a:	f0 e0       	ldi	r31, 0x00	; 0
    2b4c:	89 81       	ldd	r24, Y+1	; 0x01
    2b4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2b50:	89 2f       	mov	r24, r25
    2b52:	99 27       	eor	r25, r25
    2b54:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2b56:	e9 e2       	ldi	r30, 0x29	; 41
    2b58:	f0 e0       	ldi	r31, 0x00	; 0
    2b5a:	89 81       	ldd	r24, Y+1	; 0x01
    2b5c:	80 83       	st	Z, r24
}
    2b5e:	0f 90       	pop	r0
    2b60:	0f 90       	pop	r0
    2b62:	0f 90       	pop	r0
    2b64:	0f 90       	pop	r0
    2b66:	cf 91       	pop	r28
    2b68:	df 91       	pop	r29
    2b6a:	08 95       	ret

00002b6c <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2b6c:	df 93       	push	r29
    2b6e:	cf 93       	push	r28
    2b70:	0f 92       	push	r0
    2b72:	cd b7       	in	r28, 0x3d	; 61
    2b74:	de b7       	in	r29, 0x3e	; 62
    2b76:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2b78:	eb e2       	ldi	r30, 0x2B	; 43
    2b7a:	f0 e0       	ldi	r31, 0x00	; 0
    2b7c:	80 81       	ld	r24, Z
    2b7e:	88 2f       	mov	r24, r24
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	80 72       	andi	r24, 0x20	; 32
    2b84:	90 70       	andi	r25, 0x00	; 0
    2b86:	00 97       	sbiw	r24, 0x00	; 0
    2b88:	b9 f3       	breq	.-18     	; 0x2b78 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2b8a:	ec e2       	ldi	r30, 0x2C	; 44
    2b8c:	f0 e0       	ldi	r31, 0x00	; 0
    2b8e:	89 81       	ldd	r24, Y+1	; 0x01
    2b90:	80 83       	st	Z, r24

}
    2b92:	0f 90       	pop	r0
    2b94:	cf 91       	pop	r28
    2b96:	df 91       	pop	r29
    2b98:	08 95       	ret

00002b9a <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2b9a:	df 93       	push	r29
    2b9c:	cf 93       	push	r28
    2b9e:	cd b7       	in	r28, 0x3d	; 61
    2ba0:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2ba2:	eb e2       	ldi	r30, 0x2B	; 43
    2ba4:	f0 e0       	ldi	r31, 0x00	; 0
    2ba6:	80 81       	ld	r24, Z
    2ba8:	88 23       	and	r24, r24
    2baa:	dc f7       	brge	.-10     	; 0x2ba2 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    2bac:	ec e2       	ldi	r30, 0x2C	; 44
    2bae:	f0 e0       	ldi	r31, 0x00	; 0
    2bb0:	80 81       	ld	r24, Z
}
    2bb2:	cf 91       	pop	r28
    2bb4:	df 91       	pop	r29
    2bb6:	08 95       	ret

00002bb8 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2bb8:	df 93       	push	r29
    2bba:	cf 93       	push	r28
    2bbc:	00 d0       	rcall	.+0      	; 0x2bbe <UART_sendString+0x6>
    2bbe:	0f 92       	push	r0
    2bc0:	cd b7       	in	r28, 0x3d	; 61
    2bc2:	de b7       	in	r29, 0x3e	; 62
    2bc4:	9b 83       	std	Y+3, r25	; 0x03
    2bc6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2bc8:	19 82       	std	Y+1, r1	; 0x01
    2bca:	0e c0       	rjmp	.+28     	; 0x2be8 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2bcc:	89 81       	ldd	r24, Y+1	; 0x01
    2bce:	28 2f       	mov	r18, r24
    2bd0:	30 e0       	ldi	r19, 0x00	; 0
    2bd2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd4:	9b 81       	ldd	r25, Y+3	; 0x03
    2bd6:	fc 01       	movw	r30, r24
    2bd8:	e2 0f       	add	r30, r18
    2bda:	f3 1f       	adc	r31, r19
    2bdc:	80 81       	ld	r24, Z
    2bde:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <UART_sendByte>
		i++;
    2be2:	89 81       	ldd	r24, Y+1	; 0x01
    2be4:	8f 5f       	subi	r24, 0xFF	; 255
    2be6:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2be8:	89 81       	ldd	r24, Y+1	; 0x01
    2bea:	28 2f       	mov	r18, r24
    2bec:	30 e0       	ldi	r19, 0x00	; 0
    2bee:	8a 81       	ldd	r24, Y+2	; 0x02
    2bf0:	9b 81       	ldd	r25, Y+3	; 0x03
    2bf2:	fc 01       	movw	r30, r24
    2bf4:	e2 0f       	add	r30, r18
    2bf6:	f3 1f       	adc	r31, r19
    2bf8:	80 81       	ld	r24, Z
    2bfa:	88 23       	and	r24, r24
    2bfc:	39 f7       	brne	.-50     	; 0x2bcc <UART_sendString+0x14>
	{
		UART_sendByte(Str[i]);
		i++;
	}

}
    2bfe:	0f 90       	pop	r0
    2c00:	0f 90       	pop	r0
    2c02:	0f 90       	pop	r0
    2c04:	cf 91       	pop	r28
    2c06:	df 91       	pop	r29
    2c08:	08 95       	ret

00002c0a <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2c0a:	0f 93       	push	r16
    2c0c:	1f 93       	push	r17
    2c0e:	df 93       	push	r29
    2c10:	cf 93       	push	r28
    2c12:	00 d0       	rcall	.+0      	; 0x2c14 <UART_receiveString+0xa>
    2c14:	0f 92       	push	r0
    2c16:	cd b7       	in	r28, 0x3d	; 61
    2c18:	de b7       	in	r29, 0x3e	; 62
    2c1a:	9b 83       	std	Y+3, r25	; 0x03
    2c1c:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2c1e:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2c20:	89 81       	ldd	r24, Y+1	; 0x01
    2c22:	28 2f       	mov	r18, r24
    2c24:	30 e0       	ldi	r19, 0x00	; 0
    2c26:	8a 81       	ldd	r24, Y+2	; 0x02
    2c28:	9b 81       	ldd	r25, Y+3	; 0x03
    2c2a:	8c 01       	movw	r16, r24
    2c2c:	02 0f       	add	r16, r18
    2c2e:	13 1f       	adc	r17, r19
    2c30:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <UART_recieveByte>
    2c34:	f8 01       	movw	r30, r16
    2c36:	80 83       	st	Z, r24
    2c38:	0f c0       	rjmp	.+30     	; 0x2c58 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2c3a:	89 81       	ldd	r24, Y+1	; 0x01
    2c3c:	8f 5f       	subi	r24, 0xFF	; 255
    2c3e:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2c40:	89 81       	ldd	r24, Y+1	; 0x01
    2c42:	28 2f       	mov	r18, r24
    2c44:	30 e0       	ldi	r19, 0x00	; 0
    2c46:	8a 81       	ldd	r24, Y+2	; 0x02
    2c48:	9b 81       	ldd	r25, Y+3	; 0x03
    2c4a:	8c 01       	movw	r16, r24
    2c4c:	02 0f       	add	r16, r18
    2c4e:	13 1f       	adc	r17, r19
    2c50:	0e 94 cd 15 	call	0x2b9a	; 0x2b9a <UART_recieveByte>
    2c54:	f8 01       	movw	r30, r16
    2c56:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2c58:	89 81       	ldd	r24, Y+1	; 0x01
    2c5a:	28 2f       	mov	r18, r24
    2c5c:	30 e0       	ldi	r19, 0x00	; 0
    2c5e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c60:	9b 81       	ldd	r25, Y+3	; 0x03
    2c62:	fc 01       	movw	r30, r24
    2c64:	e2 0f       	add	r30, r18
    2c66:	f3 1f       	adc	r31, r19
    2c68:	80 81       	ld	r24, Z
    2c6a:	83 32       	cpi	r24, 0x23	; 35
    2c6c:	31 f7       	brne	.-52     	; 0x2c3a <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2c6e:	89 81       	ldd	r24, Y+1	; 0x01
    2c70:	28 2f       	mov	r18, r24
    2c72:	30 e0       	ldi	r19, 0x00	; 0
    2c74:	8a 81       	ldd	r24, Y+2	; 0x02
    2c76:	9b 81       	ldd	r25, Y+3	; 0x03
    2c78:	fc 01       	movw	r30, r24
    2c7a:	e2 0f       	add	r30, r18
    2c7c:	f3 1f       	adc	r31, r19
    2c7e:	10 82       	st	Z, r1
}
    2c80:	0f 90       	pop	r0
    2c82:	0f 90       	pop	r0
    2c84:	0f 90       	pop	r0
    2c86:	cf 91       	pop	r28
    2c88:	df 91       	pop	r29
    2c8a:	1f 91       	pop	r17
    2c8c:	0f 91       	pop	r16
    2c8e:	08 95       	ret

00002c90 <__udivmodsi4>:
    2c90:	a1 e2       	ldi	r26, 0x21	; 33
    2c92:	1a 2e       	mov	r1, r26
    2c94:	aa 1b       	sub	r26, r26
    2c96:	bb 1b       	sub	r27, r27
    2c98:	fd 01       	movw	r30, r26
    2c9a:	0d c0       	rjmp	.+26     	; 0x2cb6 <__udivmodsi4_ep>

00002c9c <__udivmodsi4_loop>:
    2c9c:	aa 1f       	adc	r26, r26
    2c9e:	bb 1f       	adc	r27, r27
    2ca0:	ee 1f       	adc	r30, r30
    2ca2:	ff 1f       	adc	r31, r31
    2ca4:	a2 17       	cp	r26, r18
    2ca6:	b3 07       	cpc	r27, r19
    2ca8:	e4 07       	cpc	r30, r20
    2caa:	f5 07       	cpc	r31, r21
    2cac:	20 f0       	brcs	.+8      	; 0x2cb6 <__udivmodsi4_ep>
    2cae:	a2 1b       	sub	r26, r18
    2cb0:	b3 0b       	sbc	r27, r19
    2cb2:	e4 0b       	sbc	r30, r20
    2cb4:	f5 0b       	sbc	r31, r21

00002cb6 <__udivmodsi4_ep>:
    2cb6:	66 1f       	adc	r22, r22
    2cb8:	77 1f       	adc	r23, r23
    2cba:	88 1f       	adc	r24, r24
    2cbc:	99 1f       	adc	r25, r25
    2cbe:	1a 94       	dec	r1
    2cc0:	69 f7       	brne	.-38     	; 0x2c9c <__udivmodsi4_loop>
    2cc2:	60 95       	com	r22
    2cc4:	70 95       	com	r23
    2cc6:	80 95       	com	r24
    2cc8:	90 95       	com	r25
    2cca:	9b 01       	movw	r18, r22
    2ccc:	ac 01       	movw	r20, r24
    2cce:	bd 01       	movw	r22, r26
    2cd0:	cf 01       	movw	r24, r30
    2cd2:	08 95       	ret

00002cd4 <__prologue_saves__>:
    2cd4:	2f 92       	push	r2
    2cd6:	3f 92       	push	r3
    2cd8:	4f 92       	push	r4
    2cda:	5f 92       	push	r5
    2cdc:	6f 92       	push	r6
    2cde:	7f 92       	push	r7
    2ce0:	8f 92       	push	r8
    2ce2:	9f 92       	push	r9
    2ce4:	af 92       	push	r10
    2ce6:	bf 92       	push	r11
    2ce8:	cf 92       	push	r12
    2cea:	df 92       	push	r13
    2cec:	ef 92       	push	r14
    2cee:	ff 92       	push	r15
    2cf0:	0f 93       	push	r16
    2cf2:	1f 93       	push	r17
    2cf4:	cf 93       	push	r28
    2cf6:	df 93       	push	r29
    2cf8:	cd b7       	in	r28, 0x3d	; 61
    2cfa:	de b7       	in	r29, 0x3e	; 62
    2cfc:	ca 1b       	sub	r28, r26
    2cfe:	db 0b       	sbc	r29, r27
    2d00:	0f b6       	in	r0, 0x3f	; 63
    2d02:	f8 94       	cli
    2d04:	de bf       	out	0x3e, r29	; 62
    2d06:	0f be       	out	0x3f, r0	; 63
    2d08:	cd bf       	out	0x3d, r28	; 61
    2d0a:	09 94       	ijmp

00002d0c <__epilogue_restores__>:
    2d0c:	2a 88       	ldd	r2, Y+18	; 0x12
    2d0e:	39 88       	ldd	r3, Y+17	; 0x11
    2d10:	48 88       	ldd	r4, Y+16	; 0x10
    2d12:	5f 84       	ldd	r5, Y+15	; 0x0f
    2d14:	6e 84       	ldd	r6, Y+14	; 0x0e
    2d16:	7d 84       	ldd	r7, Y+13	; 0x0d
    2d18:	8c 84       	ldd	r8, Y+12	; 0x0c
    2d1a:	9b 84       	ldd	r9, Y+11	; 0x0b
    2d1c:	aa 84       	ldd	r10, Y+10	; 0x0a
    2d1e:	b9 84       	ldd	r11, Y+9	; 0x09
    2d20:	c8 84       	ldd	r12, Y+8	; 0x08
    2d22:	df 80       	ldd	r13, Y+7	; 0x07
    2d24:	ee 80       	ldd	r14, Y+6	; 0x06
    2d26:	fd 80       	ldd	r15, Y+5	; 0x05
    2d28:	0c 81       	ldd	r16, Y+4	; 0x04
    2d2a:	1b 81       	ldd	r17, Y+3	; 0x03
    2d2c:	aa 81       	ldd	r26, Y+2	; 0x02
    2d2e:	b9 81       	ldd	r27, Y+1	; 0x01
    2d30:	ce 0f       	add	r28, r30
    2d32:	d1 1d       	adc	r29, r1
    2d34:	0f b6       	in	r0, 0x3f	; 63
    2d36:	f8 94       	cli
    2d38:	de bf       	out	0x3e, r29	; 62
    2d3a:	0f be       	out	0x3f, r0	; 63
    2d3c:	cd bf       	out	0x3d, r28	; 61
    2d3e:	ed 01       	movw	r28, r26
    2d40:	08 95       	ret

00002d42 <itoa>:
    2d42:	fb 01       	movw	r30, r22
    2d44:	9f 01       	movw	r18, r30
    2d46:	e8 94       	clt
    2d48:	42 30       	cpi	r20, 0x02	; 2
    2d4a:	c4 f0       	brlt	.+48     	; 0x2d7c <itoa+0x3a>
    2d4c:	45 32       	cpi	r20, 0x25	; 37
    2d4e:	b4 f4       	brge	.+44     	; 0x2d7c <itoa+0x3a>
    2d50:	4a 30       	cpi	r20, 0x0A	; 10
    2d52:	29 f4       	brne	.+10     	; 0x2d5e <itoa+0x1c>
    2d54:	97 fb       	bst	r25, 7
    2d56:	1e f4       	brtc	.+6      	; 0x2d5e <itoa+0x1c>
    2d58:	90 95       	com	r25
    2d5a:	81 95       	neg	r24
    2d5c:	9f 4f       	sbci	r25, 0xFF	; 255
    2d5e:	64 2f       	mov	r22, r20
    2d60:	77 27       	eor	r23, r23
    2d62:	0e 94 d2 16 	call	0x2da4	; 0x2da4 <__udivmodhi4>
    2d66:	80 5d       	subi	r24, 0xD0	; 208
    2d68:	8a 33       	cpi	r24, 0x3A	; 58
    2d6a:	0c f0       	brlt	.+2      	; 0x2d6e <itoa+0x2c>
    2d6c:	89 5d       	subi	r24, 0xD9	; 217
    2d6e:	81 93       	st	Z+, r24
    2d70:	cb 01       	movw	r24, r22
    2d72:	00 97       	sbiw	r24, 0x00	; 0
    2d74:	a1 f7       	brne	.-24     	; 0x2d5e <itoa+0x1c>
    2d76:	16 f4       	brtc	.+4      	; 0x2d7c <itoa+0x3a>
    2d78:	5d e2       	ldi	r21, 0x2D	; 45
    2d7a:	51 93       	st	Z+, r21
    2d7c:	10 82       	st	Z, r1
    2d7e:	c9 01       	movw	r24, r18
    2d80:	0c 94 c2 16 	jmp	0x2d84	; 0x2d84 <strrev>

00002d84 <strrev>:
    2d84:	dc 01       	movw	r26, r24
    2d86:	fc 01       	movw	r30, r24
    2d88:	67 2f       	mov	r22, r23
    2d8a:	71 91       	ld	r23, Z+
    2d8c:	77 23       	and	r23, r23
    2d8e:	e1 f7       	brne	.-8      	; 0x2d88 <strrev+0x4>
    2d90:	32 97       	sbiw	r30, 0x02	; 2
    2d92:	04 c0       	rjmp	.+8      	; 0x2d9c <strrev+0x18>
    2d94:	7c 91       	ld	r23, X
    2d96:	6d 93       	st	X+, r22
    2d98:	70 83       	st	Z, r23
    2d9a:	62 91       	ld	r22, -Z
    2d9c:	ae 17       	cp	r26, r30
    2d9e:	bf 07       	cpc	r27, r31
    2da0:	c8 f3       	brcs	.-14     	; 0x2d94 <strrev+0x10>
    2da2:	08 95       	ret

00002da4 <__udivmodhi4>:
    2da4:	aa 1b       	sub	r26, r26
    2da6:	bb 1b       	sub	r27, r27
    2da8:	51 e1       	ldi	r21, 0x11	; 17
    2daa:	07 c0       	rjmp	.+14     	; 0x2dba <__udivmodhi4_ep>

00002dac <__udivmodhi4_loop>:
    2dac:	aa 1f       	adc	r26, r26
    2dae:	bb 1f       	adc	r27, r27
    2db0:	a6 17       	cp	r26, r22
    2db2:	b7 07       	cpc	r27, r23
    2db4:	10 f0       	brcs	.+4      	; 0x2dba <__udivmodhi4_ep>
    2db6:	a6 1b       	sub	r26, r22
    2db8:	b7 0b       	sbc	r27, r23

00002dba <__udivmodhi4_ep>:
    2dba:	88 1f       	adc	r24, r24
    2dbc:	99 1f       	adc	r25, r25
    2dbe:	5a 95       	dec	r21
    2dc0:	a9 f7       	brne	.-22     	; 0x2dac <__udivmodhi4_loop>
    2dc2:	80 95       	com	r24
    2dc4:	90 95       	com	r25
    2dc6:	bc 01       	movw	r22, r24
    2dc8:	cd 01       	movw	r24, r26
    2dca:	08 95       	ret

00002dcc <_exit>:
    2dcc:	f8 94       	cli

00002dce <__stop_program>:
    2dce:	ff cf       	rjmp	.-2      	; 0x2dce <__stop_program>
